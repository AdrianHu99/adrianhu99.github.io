{"meta":{"version":1,"warehouse":"2.2.0"},"models":{"Asset":[{"_id":"source/CNAME","path":"CNAME","modified":1,"renderable":0},{"_id":"source/uploads/android-chrome-192x192.png","path":"uploads/android-chrome-192x192.png","modified":1,"renderable":0},{"_id":"source/uploads/apple-touch-icon.png","path":"uploads/apple-touch-icon.png","modified":1,"renderable":0},{"_id":"source/uploads/browserconfig.xml","path":"uploads/browserconfig.xml","modified":1,"renderable":0},{"_id":"source/uploads/favicon-32x32.png","path":"uploads/favicon-32x32.png","modified":1,"renderable":0},{"_id":"source/uploads/favicon-16x16.png","path":"uploads/favicon-16x16.png","modified":1,"renderable":0},{"_id":"source/uploads/favicon.ico","path":"uploads/favicon.ico","modified":1,"renderable":0},{"_id":"source/uploads/favicon.png","path":"uploads/favicon.png","modified":1,"renderable":0},{"_id":"source/uploads/mstile-150x150.png","path":"uploads/mstile-150x150.png","modified":1,"renderable":0},{"_id":"source/uploads/safari-pinned-tab.svg","path":"uploads/safari-pinned-tab.svg","modified":1,"renderable":0},{"_id":"source/uploads/site.webmanifest","path":"uploads/site.webmanifest","modified":1,"renderable":0},{"_id":"themes/next/source/css/main.styl","path":"css/main.styl","modified":1,"renderable":1},{"_id":"themes/next/source/images/algolia_logo.svg","path":"images/algolia_logo.svg","modified":1,"renderable":1},{"_id":"themes/next/source/images/apple-touch-icon-next.png","path":"images/apple-touch-icon-next.png","modified":1,"renderable":1},{"_id":"themes/next/source/images/avatar.gif","path":"images/avatar.gif","modified":1,"renderable":1},{"_id":"themes/next/source/images/cc-by-nc-nd.svg","path":"images/cc-by-nc-nd.svg","modified":1,"renderable":1},{"_id":"themes/next/source/images/cc-by-nc-sa.svg","path":"images/cc-by-nc-sa.svg","modified":1,"renderable":1},{"_id":"themes/next/source/images/cc-by-nc.svg","path":"images/cc-by-nc.svg","modified":1,"renderable":1},{"_id":"themes/next/source/images/cc-by-nd.svg","path":"images/cc-by-nd.svg","modified":1,"renderable":1},{"_id":"themes/next/source/images/cc-by-sa.svg","path":"images/cc-by-sa.svg","modified":1,"renderable":1},{"_id":"themes/next/source/images/cc-by.svg","path":"images/cc-by.svg","modified":1,"renderable":1},{"_id":"themes/next/source/images/cc-zero.svg","path":"images/cc-zero.svg","modified":1,"renderable":1},{"_id":"themes/next/source/images/favicon-16x16-next.png","path":"images/favicon-16x16-next.png","modified":1,"renderable":1},{"_id":"themes/next/source/images/favicon-32x32-next.png","path":"images/favicon-32x32-next.png","modified":1,"renderable":1},{"_id":"themes/next/source/images/logo.svg","path":"images/logo.svg","modified":1,"renderable":1},{"_id":"themes/next/source/images/quote-l.svg","path":"images/quote-l.svg","modified":1,"renderable":1},{"_id":"themes/next/source/images/quote-r.svg","path":"images/quote-r.svg","modified":1,"renderable":1},{"_id":"themes/next/source/js/algolia-search.js","path":"js/algolia-search.js","modified":1,"renderable":1},{"_id":"themes/next/source/js/bookmark.js","path":"js/bookmark.js","modified":1,"renderable":1},{"_id":"themes/next/source/js/local-search.js","path":"js/local-search.js","modified":1,"renderable":1},{"_id":"themes/next/source/js/motion.js","path":"js/motion.js","modified":1,"renderable":1},{"_id":"themes/next/source/js/next-boot.js","path":"js/next-boot.js","modified":1,"renderable":1},{"_id":"themes/next/source/js/utils.js","path":"js/utils.js","modified":1,"renderable":1},{"_id":"themes/next/source/lib/anime.min.js","path":"lib/anime.min.js","modified":1,"renderable":1},{"_id":"themes/next/source/js/schemes/muse.js","path":"js/schemes/muse.js","modified":1,"renderable":1},{"_id":"themes/next/source/js/schemes/pisces.js","path":"js/schemes/pisces.js","modified":1,"renderable":1},{"_id":"themes/next/source/lib/font-awesome/HELP-US-OUT.txt","path":"lib/font-awesome/HELP-US-OUT.txt","modified":1,"renderable":1},{"_id":"themes/next/source/lib/font-awesome/bower.json","path":"lib/font-awesome/bower.json","modified":1,"renderable":1},{"_id":"themes/next/source/lib/velocity/velocity.min.js","path":"lib/velocity/velocity.min.js","modified":1,"renderable":1},{"_id":"themes/next/source/lib/velocity/velocity.ui.min.js","path":"lib/velocity/velocity.ui.min.js","modified":1,"renderable":1},{"_id":"themes/next/source/lib/font-awesome/css/font-awesome.css","path":"lib/font-awesome/css/font-awesome.css","modified":1,"renderable":1},{"_id":"themes/next/source/lib/font-awesome/css/font-awesome.css.map","path":"lib/font-awesome/css/font-awesome.css.map","modified":1,"renderable":1},{"_id":"themes/next/source/lib/font-awesome/css/font-awesome.min.css","path":"lib/font-awesome/css/font-awesome.min.css","modified":1,"renderable":1},{"_id":"themes/next/source/lib/font-awesome/fonts/fontawesome-webfont.woff","path":"lib/font-awesome/fonts/fontawesome-webfont.woff","modified":1,"renderable":1},{"_id":"themes/next/source/lib/font-awesome/fonts/fontawesome-webfont.woff2","path":"lib/font-awesome/fonts/fontawesome-webfont.woff2","modified":1,"renderable":1},{"_id":"themes/next/source/lib/font-awesome/fonts/fontawesome-webfont.eot","path":"lib/font-awesome/fonts/fontawesome-webfont.eot","modified":1,"renderable":1},{"_id":"themes/next/source/images/samurai.png","path":"images/samurai.png","modified":1,"renderable":1}],"Cache":[{"_id":"source/404.md","hash":"995ba208bd7b27c0c54520b58d31cca9c801b3e2","modified":1583802320702},{"_id":"source/CNAME","hash":"620730b9f49132f600c7709bea3cd009ff2dc4dd","modified":1583802282103},{"_id":"themes/next/.editorconfig","hash":"8570735a8d8d034a3a175afd1dd40b39140b3e6a","modified":1588560671644},{"_id":"themes/next/.eslintrc.json","hash":"cc5f297f0322672fe3f684f823bc4659e4a54c41","modified":1588560671671},{"_id":"themes/next/.gitattributes","hash":"a54f902957d49356376b59287b894b1a3d7a003f","modified":1588560671697},{"_id":"themes/next/.gitignore","hash":"7b68ca7a46104cf9aa84ec0541a4856ab1836eca","modified":1588560671723},{"_id":"themes/next/.stylintrc","hash":"2cf4d637b56d8eb423f59656a11f6403aa90f550","modified":1588560671752},{"_id":"themes/next/.travis.yml","hash":"ecca3b919a5b15886e3eca58aa84aafc395590da","modified":1588560671777},{"_id":"themes/next/LICENSE.md","hash":"18144d8ed58c75af66cb419d54f3f63374cd5c5b","modified":1588560671806},{"_id":"themes/next/README.md","hash":"9b4b7d66aca47f9c65d6321b14eef48d95c4dff1","modified":1588560671839},{"_id":"themes/next/_config.yml","hash":"8e17f4ff29664d7f00d75f4d1beffdd9977e952a","modified":1589054976264},{"_id":"themes/next/crowdin.yml","hash":"e026078448c77dcdd9ef50256bb6635a8f83dca6","modified":1588560671898},{"_id":"themes/next/gulpfile.js","hash":"1b4fc262b89948937b9e3794de812a7c1f2f3592","modified":1588560671928},{"_id":"themes/next/package.json","hash":"62fad6de02adbbba9fb096cbe2dcc15fe25f2435","modified":1588560673472},{"_id":"source/_data/next.yml","hash":"d35c083cedf0fd4385e3366ce40b78ace8a10d20","modified":1589054989373},{"_id":"source/_posts/Advanced-Programming-in-Unix-Chapter-1.md","hash":"9bb3c315e9564b4ea2c47ed0fe74ddd876f06869","modified":1588965222323},{"_id":"source/_posts/Advanced-Programming-in-Unix-Chapter-2.md","hash":"e785e76993747530f5bfd55866b0968ad1db0a00","modified":1588691469713},{"_id":"source/_posts/Advanced-Programming-in-Unix-Chapter-3.md","hash":"af8675ac0384ad453fd60ad24c7be33a8950e2f8","modified":1588691483065},{"_id":"source/_posts/Cryptography-notes.md","hash":"7cdc508dfa3d5ab6825d5be4fc0cc537f606d860","modified":1594610572906},{"_id":"source/_posts/How-to-read-a-tech-book.md","hash":"0210bb992ff4a8a80d222c2056b53331158cdb50","modified":1589040069520},{"_id":"source/_posts/Java-Exception-Handling-Best-Practices.md","hash":"97a98d97ba25a6321a5e1548beb6b3007816919e","modified":1588691491853},{"_id":"source/_posts/July-1st-half-notes.md","hash":"4e84c1e65d7881ce37b26abb6333f888e7852630","modified":1595015553653},{"_id":"source/_posts/June-1st-half-notes.md","hash":"a8ec579976edb42ecd818a507803147ec087d99d","modified":1594609308865},{"_id":"source/_posts/June-2nd-half-notes.md","hash":"a52cef2bbdc5cd400b09640500966e25202f73aa","modified":1594609304813},{"_id":"source/_posts/Netty-in-Action-Chapter-1-1.md","hash":"028c39a9d9a47a09aa03e33b39e80a37296fdc38","modified":1588691495849},{"_id":"source/_posts/Netty-in-Action-Chapter-2.md","hash":"d17223a97e8b38793dc051b31b5222e0b4055d66","modified":1588691500116},{"_id":"source/_posts/Netty-in-Action-Chapter-3.md","hash":"81c117b12b1d9ddd272eec24901c11e3e5695853","modified":1588691503780},{"_id":"source/_posts/Netty-in-Action-Chapter-4.md","hash":"8c14227fc4a1ee37ac6ac2d382e938a230a49e87","modified":1588691520604},{"_id":"source/_posts/Netty-in-Action-Chapter-5.md","hash":"594d7f1d0aba623cee4043625d8522af7e32e581","modified":1588691529980},{"_id":"source/_posts/Netty-in-Action-Chapter-6.md","hash":"e613b3ecdb297411651563a3696b87f9186da8e8","modified":1588691539332},{"_id":"source/_posts/Netty-in-Action-Chapter-7.md","hash":"ea4c66f94693e49f0a29debb03478ce3b40e44c0","modified":1588691547380},{"_id":"source/_posts/Netty-in-Action-Chapter-8.md","hash":"7ea7fabe74460302de82ae2e388d42e2d300eed0","modified":1588691556688},{"_id":"source/_posts/Netty-in-Action-Chapter-9.md","hash":"2f5180ee3d5848f5f1b7941f1e72c2cd1c617c98","modified":1588691560500},{"_id":"source/_posts/Spring-security-notes.md","hash":"000e2ec511123e6ea3b36acaf7f478b7bf60e48e","modified":1594608380090},{"_id":"source/_posts/Technology-Sharing-May-2020.md","hash":"ff292d8902aa998065799064d33dcec5dff7cc5a","modified":1590958718287},{"_id":"source/_posts/The-Pragmatic-Programmer-Chapter-1.md","hash":"a7f0bc7dcd02094aede2a8c2595b8285d45e75b0","modified":1589042417856},{"_id":"source/_posts/The-Pragmatic-Programmer-Chapter-2.md","hash":"c61d00b1828daa2bc38a476c70466049a6407a12","modified":1590439607219},{"_id":"source/_posts/The-Pragmatic-Programmer-Chapter-7.md","hash":"03fb0efc0a1c2db6d4f992bbd6eaeaafe03fb17a","modified":1595451546179},{"_id":"source/_posts/The-Pragmatic-Programmer-Chapter-8.md","hash":"f503f89250430a04ca9efacd01f6b5b40413b396","modified":1595451566927},{"_id":"source/_posts/work-from-home-体会.md","hash":"3233ac8523693ec7a2578ad250f1fc1054a7efc4","modified":1588691764712},{"_id":"source/_posts/从零开始学架构-笔记01.md","hash":"828a9191b5869b170eac1471456a6d6d48381b29","modified":1588691568751},{"_id":"source/_posts/传奇程序员修炼之道-直播观后感.md","hash":"6209447a34cde8781b4684d2766746ab2cd00122","modified":1588691571527},{"_id":"source/_posts/第一个OKR.md","hash":"82e9fc30de8e8e40cc9bda9d3c50bda32db5838b","modified":1590957471840},{"_id":"source/_posts/第三个OKR.md","hash":"4a8f30a48a6dc60e7c7a8abe950baa879e340116","modified":1594609311472},{"_id":"source/_posts/第二个OKR.md","hash":"9630f0171a9b4c6c541808765a756a05afa69840","modified":1592402005173},{"_id":"source/_posts/第四个OKR.md","hash":"84ccc37343cfeaf6d2b15e81db6c8f7189bfb232","modified":1594861483225},{"_id":"source/about/index.md","hash":"b87e6b6cd00a94a112559734048bae6a7e488e91","modified":1584304249185},{"_id":"source/categories/index.md","hash":"c44a2839345dc3052f72122b4873b0e740660e26","modified":1588300135581},{"_id":"source/archives/index.md","hash":"acba06562a9cc9d53458a7c42db9d1db7ccb1df7","modified":1584297697012},{"_id":"source/tags/index.md","hash":"3f49cdb2d5cc65d8ff0f2ae03f6fbde54057ac28","modified":1588300170333},{"_id":"source/uploads/android-chrome-192x192.png","hash":"3c6bfab6aedc74d1b318ee1c8efb931c59607cba","modified":1588646923855},{"_id":"source/uploads/apple-touch-icon.png","hash":"86478483206a950f6fbf9e41e4f704b6c281562b","modified":1588646923855},{"_id":"source/uploads/browserconfig.xml","hash":"974aea18bda5a95802c06b80126ab1d96d91d708","modified":1588646923855},{"_id":"source/uploads/favicon-32x32.png","hash":"9bafedc21beec603b3f57aabddd72f424b210a8a","modified":1588646923855},{"_id":"source/uploads/favicon-16x16.png","hash":"f51698a905b7855553ca2e958db76b166983121c","modified":1588646923855},{"_id":"source/uploads/favicon.ico","hash":"4a16edb11b49036d0049ba0615624c209a5f943e","modified":1588646923855},{"_id":"source/uploads/favicon.png","hash":"3c6bfab6aedc74d1b318ee1c8efb931c59607cba","modified":1588646923855},{"_id":"source/uploads/mstile-150x150.png","hash":"50c82f35dba7e06aff680e8d5bd70cccda40910e","modified":1588646923855},{"_id":"source/uploads/safari-pinned-tab.svg","hash":"f2bc648b125a55fdec56142734185b99d91a1aa5","modified":1588646923855},{"_id":"source/uploads/site.webmanifest","hash":"15130c91f2694226943e18267a8c125ea248c298","modified":1588646923855},{"_id":"themes/next/docs/ALGOLIA-SEARCH.md","hash":"c7a994b9542040317d8f99affa1405c143a94a38","modified":1588560674036},{"_id":"themes/next/docs/AUTHORS.md","hash":"10135a2f78ac40e9f46b3add3e360c025400752f","modified":1588560674071},{"_id":"themes/next/docs/DATA-FILES.md","hash":"cddbdc91ee9e65c37a50bec12194f93d36161616","modified":1588560674103},{"_id":"themes/next/docs/AGPL3.md","hash":"0d2b8c5fa8a614723be0767cc3bca39c49578036","modified":1588560674004},{"_id":"themes/next/docs/INSTALLATION.md","hash":"af88bcce035780aaa061261ed9d0d6c697678618","modified":1588560674136},{"_id":"themes/next/docs/LICENSE.txt","hash":"368bf2c29d70f27d8726dd914f1b3211cae4bbab","modified":1588560674202},{"_id":"themes/next/docs/LEANCLOUD-COUNTER-SECURITY.md","hash":"94dc3404ccb0e5f663af2aa883c1af1d6eae553d","modified":1588560674169},{"_id":"themes/next/docs/UPDATE-FROM-5.1.X.md","hash":"8b6e4b2c9cfcb969833092bdeaed78534082e3e6","modified":1588560674269},{"_id":"themes/next/docs/MATH.md","hash":"d645b025ec7fb9fbf799b9bb76af33b9f5b9ed93","modified":1588560674235},{"_id":"themes/next/languages/ar.yml","hash":"9815e84e53d750c8bcbd9193c2d44d8d910e3444","modified":1588560674770},{"_id":"themes/next/languages/de.yml","hash":"74c59f2744217003b717b59d96e275b54635abf5","modified":1588560674798},{"_id":"themes/next/languages/default.yml","hash":"ea5e6aee4cb14510793ac4593a3bddffe23e530c","modified":1588560674824},{"_id":"themes/next/languages/en.yml","hash":"45bc5118828bdc72dcaa25282cd367c8622758cb","modified":1588560674852},{"_id":"themes/next/languages/es.yml","hash":"c64cf05f356096f1464b4b1439da3c6c9b941062","modified":1588560674881},{"_id":"themes/next/languages/fa.yml","hash":"3676b32fda37e122f3c1a655085a1868fb6ad66b","modified":1588560674910},{"_id":"themes/next/languages/fr.yml","hash":"752bf309f46a2cd43890b82300b342d7218d625f","modified":1588560674940},{"_id":"themes/next/languages/hu.yml","hash":"b1ebb77a5fd101195b79f94de293bcf9001d996f","modified":1588560674968},{"_id":"themes/next/languages/id.yml","hash":"572ed855d47aafe26f58c73b1394530754881ec2","modified":1588560674996},{"_id":"themes/next/languages/ja.yml","hash":"0cf0baa663d530f22ff380a051881216d6adcdd8","modified":1588560675052},{"_id":"themes/next/languages/it.yml","hash":"44759f779ce9c260b895532de1d209ad4bd144bf","modified":1588560675024},{"_id":"themes/next/languages/ko.yml","hash":"0feea9e43cd399f3610b94d755a39fff1d371e97","modified":1588560675079},{"_id":"themes/next/languages/nl.yml","hash":"5af3473d9f22897204afabc08bb984b247493330","modified":1588560675105},{"_id":"themes/next/languages/pt-BR.yml","hash":"67555b1ba31a0242b12fc6ce3add28531160e35b","modified":1588560675135},{"_id":"themes/next/languages/pt.yml","hash":"718d131f42f214842337776e1eaddd1e9a584054","modified":1588560675171},{"_id":"themes/next/languages/ru.yml","hash":"e993d5ca072f7f6887e30fc0c19b4da791ca7a88","modified":1588560675200},{"_id":"themes/next/languages/tr.yml","hash":"fe793f4c2608e3f85f0b872fd0ac1fb93e6155e2","modified":1588560675231},{"_id":"themes/next/languages/uk.yml","hash":"3a6d635b1035423b22fc86d9455dba9003724de9","modified":1588560675260},{"_id":"themes/next/languages/vi.yml","hash":"93393b01df148dcbf0863f6eee8e404e2d94ef9e","modified":1588560675289},{"_id":"themes/next/languages/zh-CN.yml","hash":"a1f15571ee7e1e84e3cc0985c3ec4ba1a113f6f8","modified":1588560675319},{"_id":"themes/next/languages/zh-HK.yml","hash":"3789f94010f948e9f23e21235ef422a191753c65","modified":1588560675351},{"_id":"themes/next/languages/zh-TW.yml","hash":"8c09da7c4ec3fca2c6ee897b2eea260596a2baa1","modified":1588560675380},{"_id":"themes/next/layout/_layout.swig","hash":"6a6e92a4664cdb981890a27ac11fd057f44de1d5","modified":1588560675413},{"_id":"themes/next/layout/archive.swig","hash":"e4e31317a8df68f23156cfc49e9b1aa9a12ad2ed","modified":1588560675443},{"_id":"themes/next/layout/category.swig","hash":"1bde61cf4d2d171647311a0ac2c5c7933f6a53b0","modified":1588560675471},{"_id":"themes/next/layout/index.swig","hash":"7f403a18a68e6d662ae3e154b2c1d3bbe0801a23","modified":1588560675499},{"_id":"themes/next/layout/page.swig","hash":"db581bdeac5c75fabb0f17d7c5e746e47f2a9168","modified":1588560675528},{"_id":"themes/next/layout/post.swig","hash":"2f6d992ced7e067521fdce05ffe4fd75481f41c5","modified":1588560675554},{"_id":"themes/next/layout/tag.swig","hash":"0dfb653bd5de980426d55a0606d1ab122bd8c017","modified":1588560675582},{"_id":"themes/next/scripts/renderer.js","hash":"49a65df2028a1bc24814dc72fa50d52231ca4f05","modified":1588560679273},{"_id":"source/_posts/Advanced-Programming-in-Unix-Chapter-1/systemCallAndLibraryCall.png","hash":"f57529e21a43e58b751026138e15e3d2fa1c2cdf","modified":1584931685642},{"_id":"source/_posts/Advanced-Programming-in-Unix-Chapter-3/kernel_data_structure_after_dup.png","hash":"491216badae18f89afa9ed4ce45b37493c72d0bb","modified":1586011243866},{"_id":"source/_posts/Netty-in-Action-Chapter-3/channelPipeline.png","hash":"3effa60c1592c5b399043ab82503102cee5d39ec","modified":1585831772487},{"_id":"source/_posts/Netty-in-Action-Chapter-5/bytebuf.png","hash":"ac4f67e8217b45a426452cff12b82f998ea90596","modified":1585939361671},{"_id":"source/_posts/Netty-in-Action-Chapter-6/ChannelHandlerAdaptor.png","hash":"bdd2574e6508342b682ade060ea857429c21aa94","modified":1586275811715},{"_id":"source/_posts/Netty-in-Action-Chapter-6/channelPipeline_channelHandlers.png","hash":"7956550a3b5b8868372b67d019e8a37d8815b0c6","modified":1586283281748},{"_id":"source/_posts/Netty-in-Action-Chapter-6/channel_state_model.png","hash":"bec61f920867bd96cbaa90561c96ab7a65ca67a6","modified":1586274566353},{"_id":"source/_posts/Netty-in-Action-Chapter-9/embedded_channel_workflow.png","hash":"ff4bf86fff11ad8231bf686419b95a26765323ca","modified":1587127266337},{"_id":"source/_posts/从零开始学架构-笔记01/4+1.jpg","hash":"c8c734f9ba09d17985c76fec9b59f1579e5f36fc","modified":1584564304661},{"_id":"themes/next/docs/ru/DATA-FILES.md","hash":"0bd2d696f62a997a11a7d84fec0130122234174e","modified":1588560674311},{"_id":"themes/next/docs/ru/INSTALLATION.md","hash":"9c4fe2873123bf9ceacab5c50d17d8a0f1baef27","modified":1588560674348},{"_id":"themes/next/docs/ru/README.md","hash":"85dd68ed1250897a8e4a444a53a68c1d49eb7e11","modified":1588560674382},{"_id":"themes/next/docs/ru/UPDATE-FROM-5.1.X.md","hash":"5237a368ab99123749d724b6c379415f2c142a96","modified":1588560674420},{"_id":"themes/next/docs/zh-CN/ALGOLIA-SEARCH.md","hash":"34b88784ec120dfdc20fa82aadeb5f64ef614d14","modified":1588560674458},{"_id":"themes/next/docs/zh-CN/CODE_OF_CONDUCT.md","hash":"fb23b85db6f7d8279d73ae1f41631f92f64fc864","modified":1588560674487},{"_id":"themes/next/docs/zh-CN/CONTRIBUTING.md","hash":"d3f03be036b75dc71cf3c366cd75aee7c127c874","modified":1588560674524},{"_id":"themes/next/docs/zh-CN/DATA-FILES.md","hash":"ca1030efdfca5e20f9db2e7a428998e66a24c0d0","modified":1588560674557},{"_id":"themes/next/docs/zh-CN/INSTALLATION.md","hash":"579c7bd8341873fb8be4732476d412814f1a3df7","modified":1588560674585},{"_id":"themes/next/docs/zh-CN/LEANCLOUD-COUNTER-SECURITY.md","hash":"8b18f84503a361fc712b0fe4d4568e2f086ca97d","modified":1588560674619},{"_id":"themes/next/docs/zh-CN/MATH.md","hash":"b92585d251f1f9ebe401abb5d932cb920f9b8b10","modified":1588560674656},{"_id":"themes/next/docs/zh-CN/README.md","hash":"c038629ff8f3f24e8593c4c8ecf0bef3a35c750d","modified":1588560674691},{"_id":"themes/next/docs/zh-CN/UPDATE-FROM-5.1.X.md","hash":"d9ce7331c1236bbe0a551d56cef2405e47e65325","modified":1588560674735},{"_id":"themes/next/layout/_macro/post-collapse.swig","hash":"c4ec5822d644ddcedf2401837e6f6e6d3b63fbcd","modified":1588560675619},{"_id":"themes/next/layout/_macro/post.swig","hash":"71e4dc5a56cbc403d9785526f7719d824f4c8911","modified":1588560675651},{"_id":"themes/next/layout/_macro/sidebar.swig","hash":"71655ca21907e9061b6e8ac52d0d8fbf54d0062b","modified":1588560675683},{"_id":"themes/next/layout/_partials/comments.swig","hash":"db6ab5421b5f4b7cb32ac73ad0e053fdf065f83e","modified":1588560675725},{"_id":"themes/next/layout/_partials/footer.swig","hash":"af2d688f688923080aaf8f20be33cfda629797ea","modified":1588560675755},{"_id":"themes/next/layout/_partials/languages.swig","hash":"ba9e272f1065b8f0e8848648caa7dea3f02c6be1","modified":1588560675785},{"_id":"themes/next/layout/_partials/pagination.swig","hash":"9876dbfc15713c7a47d4bcaa301f4757bd978269","modified":1588560675814},{"_id":"themes/next/layout/_partials/widgets.swig","hash":"83a40ce83dfd5cada417444fb2d6f5470aae6bb0","modified":1588560675846},{"_id":"themes/next/layout/_scripts/index.swig","hash":"cea942b450bcb0f352da78d76dc6d6f1d23d5029","modified":1588560676491},{"_id":"themes/next/layout/_scripts/noscript.swig","hash":"d1f2bfde6f1da51a2b35a7ab9e7e8eb6eefd1c6b","modified":1588560676524},{"_id":"themes/next/layout/_scripts/pjax.swig","hash":"4d2c93c66e069852bb0e3ea2e268d213d07bfa3f","modified":1588560677977},{"_id":"themes/next/layout/_scripts/three.swig","hash":"a4f42f2301866bd25a784a2281069d8b66836d0b","modified":1588560678004},{"_id":"themes/next/layout/_scripts/vendors.swig","hash":"ef38c213679e7b6d2a4116f56c9e55d678446069","modified":1588560678034},{"_id":"themes/next/layout/_third-party/baidu-push.swig","hash":"8627c8c8b031ecee16c522433b66fa4d6979b8ea","modified":1588560678269},{"_id":"themes/next/layout/_third-party/index.swig","hash":"70c3c01dd181de81270c57f3d99b6d8f4c723404","modified":1588560678301},{"_id":"themes/next/layout/_third-party/quicklink.swig","hash":"311e5eceec9e949f1ea8d623b083cec0b8700ff2","modified":1588560678332},{"_id":"themes/next/layout/_third-party/rating.swig","hash":"2731e262a6b88eaee2a3ca61e6a3583a7f594702","modified":1588560678362},{"_id":"themes/next/scripts/events/index.js","hash":"bf5e93f9209d111a014a7a6a17e86c05be552d13","modified":1588560679312},{"_id":"themes/next/scripts/filters/default-injects.js","hash":"aec50ed57b9d5d3faf2db3c88374f107203617e0","modified":1588560679459},{"_id":"themes/next/scripts/filters/front-matter.js","hash":"703bdd142a671b4b67d3d9dfb4a19d1dd7e7e8f7","modified":1588560679489},{"_id":"themes/next/scripts/filters/locals.js","hash":"b193a936ee63451f09f8886343dcfdca577c0141","modified":1588560679519},{"_id":"themes/next/scripts/filters/minify.js","hash":"19985723b9f677ff775f3b17dcebf314819a76ac","modified":1588560679557},{"_id":"themes/next/scripts/filters/post.js","hash":"d86849559ae54a4098aef4e2ab9dc8f99a1d186c","modified":1588560679590},{"_id":"themes/next/scripts/helpers/engine.js","hash":"22d77bd511fc7c1bbd12339d65004ed5bfb0713c","modified":1588560679908},{"_id":"themes/next/scripts/helpers/font.js","hash":"40cf00e9f2b7aa6e5f33d412e03ed10304b15fd7","modified":1588560679947},{"_id":"themes/next/scripts/helpers/next-config.js","hash":"5e11f30ddb5093a88a687446617a46b048fa02e5","modified":1588560679980},{"_id":"themes/next/scripts/helpers/next-url.js","hash":"958e86b2bd24e4fdfcbf9ce73e998efe3491a71f","modified":1588560680012},{"_id":"themes/next/scripts/tags/button.js","hash":"946dd7beede408d1f090d5e9774d74763828b97c","modified":1588560680048},{"_id":"themes/next/scripts/tags/caniuse.js","hash":"94e0bbc7999b359baa42fa3731bdcf89c79ae2b3","modified":1588560680078},{"_id":"themes/next/scripts/tags/center-quote.js","hash":"0f133f27b61e8351cfd0959ba8a1b8551a9a8cc6","modified":1588560680108},{"_id":"themes/next/scripts/tags/group-pictures.js","hash":"d902fd313e8d35c3cc36f237607c2a0536c9edf1","modified":1588560680140},{"_id":"themes/next/scripts/tags/label.js","hash":"fc5b267d903facb7a35001792db28b801cccb1f8","modified":1588560680171},{"_id":"themes/next/scripts/tags/mermaid.js","hash":"983c6c4adea86160ecc0ba2204bc312aa338121d","modified":1588560680198},{"_id":"themes/next/scripts/tags/note.js","hash":"0a02bb4c15aec41f6d5f1271cdb5c65889e265d9","modified":1588560680226},{"_id":"themes/next/scripts/tags/pdf.js","hash":"8c613b39e7bff735473e35244b5629d02ee20618","modified":1588560680256},{"_id":"themes/next/scripts/tags/tabs.js","hash":"00ca6340d4fe0ccdae7525373e4729117775bbfa","modified":1588560680292},{"_id":"themes/next/scripts/tags/video.js","hash":"e5ff4c44faee604dd3ea9db6b222828c4750c227","modified":1588560680341},{"_id":"themes/next/source/css/_colors.styl","hash":"19c836f367977fb712b9868f3281ff5d757a8d5c","modified":1588560680380},{"_id":"themes/next/source/css/_mixins.styl","hash":"b79ff3debd5709397b122292fc7e551ae9d40782","modified":1588560680412},{"_id":"themes/next/source/css/main.styl","hash":"a3a3bbb5a973052f0186b3523911cb2539ff7b88","modified":1588560680441},{"_id":"themes/next/source/images/algolia_logo.svg","hash":"ec119560b382b2624e00144ae01c137186e91621","modified":1588560683714},{"_id":"themes/next/source/images/apple-touch-icon-next.png","hash":"2959dbc97f31c80283e67104fe0854e2369e40aa","modified":1588560683741},{"_id":"themes/next/source/images/avatar.gif","hash":"18c53e15eb0c84b139995f9334ed8522b40aeaf6","modified":1588560683775},{"_id":"themes/next/source/images/cc-by-nc-nd.svg","hash":"c6524ece3f8039a5f612feaf865d21ec8a794564","modified":1588560683810},{"_id":"themes/next/source/images/cc-by-nc-sa.svg","hash":"3031be41e8753c70508aa88e84ed8f4f653f157e","modified":1588560683848},{"_id":"themes/next/source/images/cc-by-nc.svg","hash":"8d39b39d88f8501c0d27f8df9aae47136ebc59b7","modified":1588560683885},{"_id":"themes/next/source/images/cc-by-nd.svg","hash":"c563508ce9ced1e66948024ba1153400ac0e0621","modified":1588560683925},{"_id":"themes/next/source/images/cc-by-sa.svg","hash":"aa4742d733c8af8d38d4c183b8adbdcab045872e","modified":1588560683979},{"_id":"themes/next/source/images/cc-by.svg","hash":"28a0a4fe355a974a5e42f68031652b76798d4f7e","modified":1588560684018},{"_id":"themes/next/source/images/cc-zero.svg","hash":"87669bf8ac268a91d027a0a4802c92a1473e9030","modified":1588560684060},{"_id":"themes/next/source/images/favicon-16x16-next.png","hash":"943a0d67a9cdf8c198109b28f9dbd42f761d11c3","modified":1588560684100},{"_id":"themes/next/source/images/favicon-32x32-next.png","hash":"0749d7b24b0d2fae1c8eb7f671ad4646ee1894b1","modified":1588560684129},{"_id":"themes/next/source/images/logo.svg","hash":"d29cacbae1bdc4bbccb542107ee0524fe55ad6de","modified":1588560684162},{"_id":"themes/next/source/images/quote-l.svg","hash":"94e870b4c8c48da61d09522196d4dd40e277a98f","modified":1588560684191},{"_id":"themes/next/source/images/quote-r.svg","hash":"e60ae504f9d99b712c793c3740c6b100d057d4ec","modified":1588560684222},{"_id":"themes/next/source/js/algolia-search.js","hash":"23cc3c013185eb97ef347c3b4c92d928f2f3398f","modified":1588560684261},{"_id":"themes/next/source/js/bookmark.js","hash":"a00945ff886e9f6f835731cdaf29a3a3727c8877","modified":1588560684292},{"_id":"themes/next/source/js/local-search.js","hash":"b42bd1c883ce91db8632d96e0f0e062cb6b73adc","modified":1588560684331},{"_id":"themes/next/source/js/motion.js","hash":"72df86f6dfa29cce22abeff9d814c9dddfcf13a9","modified":1588560684364},{"_id":"themes/next/source/js/next-boot.js","hash":"a22eeb6048ddd6b9224c8a671cbcfa303a2f7a1a","modified":1588560684396},{"_id":"themes/next/source/js/utils.js","hash":"95c5d37aa06521675afcf8619cfc5dbba3d2e18a","modified":1588560684430},{"_id":"themes/next/source/lib/anime.min.js","hash":"47cb482a8a488620a793d50ba8f6752324b46af3","modified":1588560684622},{"_id":"source/_posts/Advanced-Programming-in-Unix-Chapter-1/common_shell.png","hash":"94924d22ff268d09b5b08035b072de8d62be18e4","modified":1584931685642},{"_id":"source/_posts/Advanced-Programming-in-Unix-Chapter-1/unix_architecture.png","hash":"c2940ed5b9cf3ff0add60ef37a23cbd5f2046a32","modified":1584931685642},{"_id":"source/_posts/Advanced-Programming-in-Unix-Chapter-3/kernel_data_structure_for_open_files.png","hash":"91f81342193cfe88654c5a311a159ebfa7ebcd0d","modified":1586011243866},{"_id":"source/_posts/Advanced-Programming-in-Unix-Chapter-3/two_processes_one_file.png","hash":"01215d6d6cff5ebab20f83e875fcac233baca62e","modified":1586011243866},{"_id":"source/_posts/Netty-in-Action-Chapter-1-1/callback.png","hash":"c8fefab87a90dcae509ca94f82c8e0666f39134f","modified":1585413268884},{"_id":"source/_posts/Netty-in-Action-Chapter-1-1/callback_with_future.png","hash":"2a66b8226803773b1508b5d72d9a75d5883aa850","modified":1585413268884},{"_id":"source/_posts/Netty-in-Action-Chapter-3/channel_eventLoop.png","hash":"17d2306c67bfa9043ee80f8fb2fa96c1fa25e688","modified":1585831772487},{"_id":"source/_posts/Netty-in-Action-Chapter-3/eventLoopGroup.png","hash":"c76114185709fcd85a0f62bf86800b45e059683b","modified":1585831772487},{"_id":"source/_posts/Netty-in-Action-Chapter-5/bytebuf_internal_segmentation.png","hash":"27574fa8a2157964776abb14c6931c211dee9001","modified":1586202658808},{"_id":"source/_posts/Netty-in-Action-Chapter-6/channelFutureListenerToChannelFuture.png","hash":"02a1ee4600f5e1907a1a31ad660852ee99dc7b5f","modified":1586289374066},{"_id":"source/_posts/Netty-in-Action-Chapter-6/channelFutureListenerToChannelPromise.png","hash":"85aad23d82949eaea84803e44ebd8048b37c1da1","modified":1586289682928},{"_id":"source/_posts/Netty-in-Action-Chapter-6/operationsTriggeredViaContext.png","hash":"d0e8a549362528621fbf9da4876b87262ced0ad3","modified":1586286038919},{"_id":"source/_posts/Netty-in-Action-Chapter-8/bootstrapping_process.png","hash":"05f4cb4508058dbaa8efb96591e7f11aa62db406","modified":1586891801828},{"_id":"source/_posts/Spring-security-notes/image-20200705115533934.png","hash":"a75f1218a14217e1a2cbf0c9df4aefc1a77edad2","modified":1593966065829},{"_id":"source/_posts/Spring-security-notes/image-20200705122105774.png","hash":"1bdca4e9b28e1a21b5277fd5459319a41dde123f","modified":1593966065829},{"_id":"source/_posts/Advanced-Programming-in-Unix-Chapter-3/buffer_size_comparison.png","hash":"a3baad0fc84ac6ff214fb1e988f487349fad3abd","modified":1586011243866},{"_id":"source/_posts/Cryptography-notes/image-20200708153106778.png","hash":"2703a741ef124656770379f74311478bf45dda82","modified":1594236666947},{"_id":"source/_posts/Cryptography-notes/image-20200708113856166.png","hash":"067ba479d20c2758b47b470c3e02de501592ebc4","modified":1594236666947},{"_id":"source/_posts/Netty-in-Action-Chapter-1-1/callback_with_future2.png","hash":"ebaf4a356b9a82d24ed555027b03366ec11c44b1","modified":1585413268884},{"_id":"source/_posts/Netty-in-Action-Chapter-4/OIO_processing_logic.png","hash":"844a5e9ca1b5fe282c44c1efa46db0c4578426a5","modified":1585930187133},{"_id":"source/_posts/Netty-in-Action-Chapter-4/netty_provided_transports.png","hash":"791841f4c21c2d9859a6f2f4b6feff7797d777c2","modified":1585929008457},{"_id":"source/_posts/Netty-in-Action-Chapter-1-1/netty_feature_summary.png","hash":"3567baaa502bb781485731126248c8837993e276","modified":1585413268885},{"_id":"source/_posts/Netty-in-Action-Chapter-4/selector_workflow.png","hash":"f9a473c2078d5b39a416bc8d62ce34ac3ee9c044","modified":1585929800168},{"_id":"source/_posts/Netty-in-Action-Chapter-7/executor_logic.png","hash":"ebb6e87600b479615176293617abf4c5a2aec8b1","modified":1586875437447},{"_id":"source/_posts/Netty-in-Action-Chapter-8/eventLoop_shared_among_channels.png","hash":"2df866ec7ca6a45d50040dbc79ba6f9ee1ee80e1","modified":1586892566754},{"_id":"source/_posts/Netty-in-Action-Chapter-7/eventloop_allocation.png","hash":"8f3f8d33006a6f0ae47b76de9409d44e5ea9c942","modified":1586875437447},{"_id":"source/_posts/Spring-security-notes/image-20200703140104398.png","hash":"656ad1a9f4978f25cabd17895d5ee9e20e742342","modified":1593966065829},{"_id":"source/_posts/Spring-security-notes/image-20200705115002217.png","hash":"d9485436a831ba7f5e2195116dd26506bbf74bbb","modified":1593966065829},{"_id":"source/_posts/Technology-Sharing-May-2020/pyramid.png","hash":"0a2894b3993920a1bc2d29bacd7616fb509227ee","modified":1590958046090},{"_id":"themes/next/layout/_partials/head/head-unique.swig","hash":"000bad572d76ee95d9c0a78f9ccdc8d97cc7d4b4","modified":1588560675884},{"_id":"themes/next/layout/_partials/head/head.swig","hash":"1ea12d4b9490d9065ebf1b8739b90ce5defd6398","modified":1588560675916},{"_id":"themes/next/layout/_partials/header/brand.swig","hash":"60e1da091c0ebb46f462d69812da20b261236a76","modified":1588694037686},{"_id":"themes/next/layout/_partials/header/index.swig","hash":"7dbe93b8297b746afb89700b4d29289556e85267","modified":1588560675984},{"_id":"themes/next/layout/_partials/header/menu-item.swig","hash":"12aeb9ee0d1d49d347f82a91e6bab568e1b59037","modified":1588560676008},{"_id":"themes/next/layout/_partials/header/menu.swig","hash":"958e097790551c9520426a1233add03515034f35","modified":1588560676040},{"_id":"themes/next/layout/_partials/header/sub-menu.swig","hash":"ae2261bea836581918a1c2b0d1028a78718434e0","modified":1588560676074},{"_id":"themes/next/layout/_partials/page/breadcrumb.swig","hash":"c851717497ca64789f2176c9ecd1dedab237b752","modified":1588560676115},{"_id":"themes/next/layout/_partials/page/page-header.swig","hash":"9b7a66791d7822c52117fe167612265356512477","modified":1588560676147},{"_id":"themes/next/layout/_partials/post/post-copyright.swig","hash":"94d54b0c65d504f772af1e62424952e092b6c21d","modified":1588560676186},{"_id":"themes/next/layout/_partials/post/post-followme.swig","hash":"12cd9adb0c33adc484201f9e8a4e64ccf3011bae","modified":1588560676216},{"_id":"themes/next/layout/_partials/post/post-footer.swig","hash":"8f14f3f8a1b2998d5114cc56b680fb5c419a6b07","modified":1588560676246},{"_id":"themes/next/layout/_partials/post/post-reward.swig","hash":"2b1a73556595c37951e39574df5a3f20b2edeaef","modified":1588560676308},{"_id":"themes/next/layout/_partials/search/algolia-search.swig","hash":"48430bd03b8f19c9b8cdb2642005ed67d56c6e0b","modified":1588560676349},{"_id":"themes/next/layout/_partials/post/post-related.swig","hash":"f79c44692451db26efce704813f7a8872b7e63a0","modified":1588560676276},{"_id":"themes/next/layout/_partials/search/index.swig","hash":"2be50f9bfb1c56b85b3b6910a7df27f51143632c","modified":1588560676379},{"_id":"themes/next/layout/_partials/search/localsearch.swig","hash":"f48a6a8eba04eb962470ce76dd731e13074d4c45","modified":1588560676410},{"_id":"themes/next/layout/_partials/sidebar/site-overview.swig","hash":"ec20ff43845723e0ac2a245047c7a7e5aead6e88","modified":1588560676454},{"_id":"themes/next/layout/_scripts/schemes/gemini.swig","hash":"1c910fc066c06d5fbbe9f2b0c47447539e029af7","modified":1588560678120},{"_id":"themes/next/layout/_scripts/schemes/mist.swig","hash":"7f14ef43d9e82bc1efc204c5adf0b1dbfc919a9f","modified":1588560678151},{"_id":"themes/next/layout/_scripts/pages/schedule.swig","hash":"077b5d66f6309f2e7dcf08645058ff2e03143e6c","modified":1588560678080},{"_id":"themes/next/layout/_scripts/schemes/muse.swig","hash":"7f14ef43d9e82bc1efc204c5adf0b1dbfc919a9f","modified":1588560678180},{"_id":"themes/next/layout/_scripts/schemes/pisces.swig","hash":"1c910fc066c06d5fbbe9f2b0c47447539e029af7","modified":1588560678213},{"_id":"themes/next/layout/_third-party/analytics/baidu-analytics.swig","hash":"4790058691b7d36cf6d2d6b4e93795a7b8d608ad","modified":1588560678405},{"_id":"themes/next/layout/_third-party/analytics/google-analytics.swig","hash":"2fa2b51d56bfac6a1ea76d651c93b9c20b01c09b","modified":1588560678437},{"_id":"themes/next/layout/_third-party/analytics/growingio.swig","hash":"5adea065641e8c55994dd2328ddae53215604928","modified":1588560678470},{"_id":"themes/next/layout/_third-party/analytics/index.swig","hash":"1472cabb0181f60a6a0b7fec8899a4d03dfb2040","modified":1588560678500},{"_id":"themes/next/layout/_third-party/chat/chatra.swig","hash":"f910618292c63871ca2e6c6e66c491f344fa7b1f","modified":1588560678544},{"_id":"themes/next/layout/_third-party/chat/tidio.swig","hash":"cba0e6e0fad08568a9e74ba9a5bee5341cfc04c1","modified":1588560678575},{"_id":"themes/next/layout/_third-party/comments/changyan.swig","hash":"f39a5bf3ce9ee9adad282501235e0c588e4356ec","modified":1588560678611},{"_id":"themes/next/layout/_third-party/comments/disqus.swig","hash":"b14908644225d78c864cd0a9b60c52407de56183","modified":1588560678642},{"_id":"themes/next/layout/_third-party/comments/disqusjs.swig","hash":"82f5b6822aa5ec958aa987b101ef860494c6cf1f","modified":1588560678682},{"_id":"themes/next/layout/_third-party/comments/gitalk.swig","hash":"d6ceb70648555338a80ae5724b778c8c58d7060d","modified":1588560678715},{"_id":"themes/next/layout/_third-party/comments/livere.swig","hash":"f7a9eca599a682479e8ca863db59be7c9c7508c8","modified":1588560678754},{"_id":"themes/next/layout/_third-party/comments/valine.swig","hash":"be0a8eccf1f6dc21154af297fc79555343031277","modified":1588560678787},{"_id":"themes/next/layout/_third-party/math/index.swig","hash":"6c5976621efd5db5f7c4c6b4f11bc79d6554885f","modified":1588560678829},{"_id":"themes/next/layout/_third-party/math/katex.swig","hash":"4791c977a730f29c846efcf6c9c15131b9400ead","modified":1588560678861},{"_id":"themes/next/layout/_third-party/math/mathjax.swig","hash":"ecf751321e799f0fb3bf94d049e535130e2547aa","modified":1588560678894},{"_id":"themes/next/layout/_third-party/search/algolia-search.swig","hash":"d35a999d67f4c302f76fdf13744ceef3c6506481","modified":1588560678935},{"_id":"themes/next/layout/_third-party/search/localsearch.swig","hash":"767b6c714c22588bcd26ba70b0fc19b6810cbacd","modified":1588560678965},{"_id":"themes/next/layout/_third-party/search/swiftype.swig","hash":"ba0dbc06b9d244073a1c681ff7a722dcbf920b51","modified":1588560678996},{"_id":"themes/next/layout/_third-party/statistics/cnzz-analytics.swig","hash":"a17ace37876822327a2f9306a472974442c9005d","modified":1588560679073},{"_id":"themes/next/layout/_third-party/statistics/busuanzi-counter.swig","hash":"d7258d02bcf0dac6c0fd8377c0909ddecb09d1d4","modified":1588560679040},{"_id":"themes/next/layout/_third-party/statistics/firestore.swig","hash":"b26ac2bfbe91dd88267f8b96aee6bb222b265b7a","modified":1588560679103},{"_id":"themes/next/layout/_third-party/statistics/index.swig","hash":"5f6a966c509680dbfa70433f9d658cee59c304d7","modified":1588560679128},{"_id":"themes/next/layout/_third-party/statistics/lean-analytics.swig","hash":"d56d5af427cdfecc33a0f62ee62c056b4e33d095","modified":1588560679162},{"_id":"themes/next/layout/_third-party/tags/mermaid.swig","hash":"f3c43664a071ff3c0b28bd7e59b5523446829576","modified":1588560679202},{"_id":"themes/next/layout/_third-party/tags/pdf.swig","hash":"d30b0e255a8092043bac46441243f943ed6fb09b","modified":1588560679236},{"_id":"themes/next/scripts/events/lib/config.js","hash":"d34c6040b13649714939f59be5175e137de65ede","modified":1588560679356},{"_id":"themes/next/scripts/events/lib/injects-point.js","hash":"6661c1c91c7cbdefc6a5e6a034b443b8811235a1","modified":1588560679387},{"_id":"themes/next/scripts/events/lib/injects.js","hash":"f233d8d0103ae7f9b861344aa65c1a3c1de8a845","modified":1588560679420},{"_id":"themes/next/scripts/filters/comment/changyan.js","hash":"1f20213af8da3127701e6bb9da995e5c91be2051","modified":1588560679635},{"_id":"themes/next/scripts/filters/comment/common.js","hash":"0803d4f4d3d02c24417c163ad0b27b60fda79250","modified":1588560679669},{"_id":"themes/next/scripts/filters/comment/default-config.js","hash":"7f2d93af012c1e14b8596fecbfc7febb43d9b7f5","modified":1588560679708},{"_id":"themes/next/scripts/filters/comment/disqus.js","hash":"19cbd24880d0fbbd4d5698cd54da598f03b942da","modified":1588560679741},{"_id":"themes/next/scripts/filters/comment/disqusjs.js","hash":"7f8b92913d21070b489457fa5ed996d2a55f2c32","modified":1588560679776},{"_id":"themes/next/scripts/filters/comment/gitalk.js","hash":"e51dc3072c1ba0ea3008f09ecae8b46242ec6021","modified":1588560679808},{"_id":"themes/next/scripts/filters/comment/livere.js","hash":"d5fefc31fba4ab0188305b1af1feb61da49fdeb0","modified":1588560679839},{"_id":"themes/next/scripts/filters/comment/valine.js","hash":"6a72b5928cdab9526a288177991e4b2aedd028cf","modified":1588560679870},{"_id":"themes/next/source/css/_variables/Gemini.styl","hash":"f4e694e5db81e57442c7e34505a416d818b3044a","modified":1588560683552},{"_id":"themes/next/source/css/_variables/Muse.styl","hash":"62df49459d552bbf73841753da8011a1f5e875c8","modified":1588560683610},{"_id":"themes/next/source/js/schemes/muse.js","hash":"47c4f60eb7f7dc3303e84914b611dc34827069e1","modified":1588560684486},{"_id":"themes/next/source/js/schemes/pisces.js","hash":"3d9d3c14b77044d66be1898a9a934696e9127c82","modified":1588560684557},{"_id":"themes/next/source/lib/font-awesome/.bower.json","hash":"a2aaaf12378db56bd10596ba3daae30950eac051","modified":1588560684696},{"_id":"themes/next/source/css/_variables/base.styl","hash":"dae390efcb5da9c021ad7f25fe2d39ff36938cc6","modified":1588560683674},{"_id":"themes/next/source/lib/font-awesome/.gitignore","hash":"69d152fa46b517141ec3b1114dd6134724494d83","modified":1588560684733},{"_id":"themes/next/source/lib/font-awesome/.npmignore","hash":"dcf470ab3a358103bb896a539cc03caeda10fa8b","modified":1588560684765},{"_id":"themes/next/source/lib/font-awesome/HELP-US-OUT.txt","hash":"4f7bf961f1bed448f6ba99aeb9219fabf930ba96","modified":1588560684826},{"_id":"themes/next/source/lib/font-awesome/bower.json","hash":"279a8a718ab6c930a67c41237f0aac166c1b9440","modified":1588560685485},{"_id":"themes/next/source/lib/velocity/velocity.min.js","hash":"2f1afadc12e4cf59ef3b405308d21baa97e739c6","modified":1588560685800},{"_id":"themes/next/source/lib/velocity/velocity.ui.min.js","hash":"ed5e534cd680a25d8d14429af824f38a2c7d9908","modified":1588560685839},{"_id":"source/_posts/Cryptography-notes/image-20200708110748416.png","hash":"2df470c404c18fae9f8cb85c29a88d840b79a3c5","modified":1594236666947},{"_id":"source/_posts/Netty-in-Action-Chapter-1-1/java_bloking_IO.png","hash":"0ed59979ca0ba1aaa58e1bafe74f0c96d6952273","modified":1585413268884},{"_id":"themes/next/source/css/_variables/Pisces.styl","hash":"799fdf4f258a51d45d1e2b02fb59b337e46b5b3c","modified":1588560683640},{"_id":"themes/next/source/css/_variables/Mist.styl","hash":"f70be8e229da7e1715c11dd0e975a2e71e453ac8","modified":1588560683581},{"_id":"themes/next/source/css/_common/components/back-to-top-sidebar.styl","hash":"ca5e70662dcfb261c25191cc5db5084dcf661c76","modified":1588560680495},{"_id":"themes/next/source/css/_common/components/back-to-top.styl","hash":"a47725574e1bee3bc3b63b0ff2039cc982b17eff","modified":1588560680529},{"_id":"themes/next/source/css/_common/components/components.styl","hash":"8e7b57a72e757cf95278239641726bb2d5b869d1","modified":1588560680560},{"_id":"themes/next/source/css/_common/components/reading-progress.styl","hash":"2e3bf7baf383c9073ec5e67f157d3cb3823c0957","modified":1588560680595},{"_id":"themes/next/source/css/_common/scaffolding/base.styl","hash":"220da37051ed5dac9cf7bd126451f6aba4f94d21","modified":1588560682262},{"_id":"themes/next/source/css/_common/scaffolding/buttons.styl","hash":"a2e9e00962e43e98ec2614d6d248ef1773bb9b78","modified":1588560682295},{"_id":"themes/next/source/css/_common/scaffolding/comments.styl","hash":"b1f0fab7344a20ed6748b04065b141ad423cf4d9","modified":1588560682327},{"_id":"themes/next/source/css/_common/scaffolding/normalize.styl","hash":"b56367ea676ea8e8783ea89cd4ab150c7da7a060","modified":1588560682361},{"_id":"themes/next/source/css/_common/scaffolding/pagination.styl","hash":"8f58570a1bbc34c4989a47a1b7d42a8030f38b06","modified":1588560682392},{"_id":"themes/next/source/css/_common/scaffolding/scaffolding.styl","hash":"523fb7b653b87ae37fc91fc8813e4ffad87b0d7e","modified":1588560682425},{"_id":"themes/next/source/css/_common/scaffolding/tables.styl","hash":"b3bea92eef0e1fe2e7e294dac2184d16b5b8d666","modified":1588560682456},{"_id":"themes/next/source/css/_common/scaffolding/toggles.styl","hash":"179e33b8ac7f4d8a8e76736a7e4f965fe9ab8b42","modified":1588560682488},{"_id":"themes/next/source/css/_common/outline/mobile.styl","hash":"681d33e3bc85bdca407d93b134c089264837378c","modified":1588560681536},{"_id":"themes/next/source/css/_common/outline/outline.styl","hash":"a1690e035b505d28bdef2b4424c13fc6312ab049","modified":1588560681566},{"_id":"themes/next/source/css/_schemes/Gemini/index.styl","hash":"7785bd756e0c4acede3a47fec1ed7b55988385a5","modified":1588560682945},{"_id":"themes/next/source/css/_schemes/Mist/_header.styl","hash":"f6516d0f7d89dc7b6c6e143a5af54b926f585d82","modified":1588560682989},{"_id":"themes/next/source/css/_schemes/Mist/_layout.styl","hash":"bb7ace23345364eb14983e860a7172e1683a4c94","modified":1588560683019},{"_id":"themes/next/source/css/_schemes/Mist/_menu.styl","hash":"7104b9cef90ca3b140d7a7afcf15540a250218fc","modified":1588560683052},{"_id":"themes/next/source/css/_schemes/Mist/_posts-expand.styl","hash":"6136da4bbb7e70cec99f5c7ae8c7e74f5e7c261a","modified":1588560683088},{"_id":"themes/next/source/css/_schemes/Mist/index.styl","hash":"a717969829fa6ef88225095737df3f8ee86c286b","modified":1588560683120},{"_id":"themes/next/source/css/_schemes/Muse/_header.styl","hash":"f0131db6275ceaecae7e1a6a3798b8f89f6c850d","modified":1588560683163},{"_id":"themes/next/source/css/_schemes/Muse/_layout.styl","hash":"4d1c17345d2d39ef7698f7acf82dfc0f59308c34","modified":1588560683194},{"_id":"themes/next/source/css/_schemes/Muse/_menu.styl","hash":"5e644b1303ab6dcd1b65ee0fd6b91309b04ce64d","modified":1588560683225},{"_id":"themes/next/source/css/_schemes/Muse/_sidebar.styl","hash":"2b2e7b5cea7783c9c8bb92655e26a67c266886f0","modified":1588560683257},{"_id":"themes/next/source/css/_schemes/Muse/_sub-menu.styl","hash":"c48ccd8d6651fe1a01faff8f01179456d39ba9b1","modified":1588560683288},{"_id":"themes/next/source/css/_schemes/Muse/index.styl","hash":"6ad168288b213cec357e9b5a97674ff2ef3a910c","modified":1588560683319},{"_id":"themes/next/source/css/_schemes/Pisces/_header.styl","hash":"ea0393f9477b91dbd67d25eaae5943715b8d349e","modified":1588692074020},{"_id":"themes/next/source/css/_schemes/Pisces/_layout.styl","hash":"70a4324b70501132855b5e59029acfc5d3da1ebd","modified":1588560683402},{"_id":"themes/next/source/css/_schemes/Pisces/_menu.styl","hash":"ccb71d732b12acd02ac26ed6bbda4861d027857d","modified":1588560683432},{"_id":"themes/next/source/css/_schemes/Pisces/_sidebar.styl","hash":"e4f958677a75de87ee1caf7e22ba46a0602f22dd","modified":1588560683463},{"_id":"themes/next/source/css/_schemes/Pisces/_sub-menu.styl","hash":"82025c3ad7af12e532e2e81be98deb0a74ff23ac","modified":1588560683486},{"_id":"themes/next/source/css/_schemes/Pisces/index.styl","hash":"6ad168288b213cec357e9b5a97674ff2ef3a910c","modified":1588560683512},{"_id":"themes/next/source/lib/font-awesome/css/font-awesome.css","hash":"0140952c64e3f2b74ef64e050f2fe86eab6624c8","modified":1588560685539},{"_id":"themes/next/source/lib/font-awesome/css/font-awesome.css.map","hash":"0189d278706509412bac4745f96c83984e1d59f4","modified":1588560685579},{"_id":"themes/next/source/lib/font-awesome/css/font-awesome.min.css","hash":"512c7d79033e3028a9be61b540cf1a6870c896f8","modified":1588560685619},{"_id":"themes/next/source/lib/font-awesome/fonts/fontawesome-webfont.woff","hash":"28b782240b3e76db824e12c02754a9731a167527","modified":1588560685703},{"_id":"themes/next/source/lib/font-awesome/fonts/fontawesome-webfont.woff2","hash":"d6f48cba7d076fb6f2fd6ba993a75b9dc1ecbf0c","modified":1588560685739},{"_id":"themes/next/source/css/_common/components/pages/breadcrumb.styl","hash":"fafc96c86926b22afba8bb9418c05e6afbc05a57","modified":1588560680641},{"_id":"themes/next/source/css/_common/components/pages/categories.styl","hash":"2bd0eb1512415325653b26d62a4463e6de83c5ac","modified":1588560680683},{"_id":"themes/next/source/css/_common/components/pages/pages.styl","hash":"7504dbc5c70262b048143b2c37d2b5aa2809afa2","modified":1588560680717},{"_id":"themes/next/source/css/_common/components/pages/schedule.styl","hash":"c1daeb60c23945f745703ac2c3f4bf99d0ea3d95","modified":1588560680750},{"_id":"themes/next/source/css/_common/components/pages/tag-cloud.styl","hash":"7ddb7453bf9b85b01bff136e9d10a7f06baac9e8","modified":1588560680788},{"_id":"themes/next/source/css/_common/components/post/post-collapse.styl","hash":"89f76380091f1be49936c69bac02e984dae5ff87","modified":1588560680837},{"_id":"themes/next/source/css/_common/components/post/post-copyright.styl","hash":"f49ca072b5a800f735e8f01fc3518f885951dd8e","modified":1588560680877},{"_id":"themes/next/source/css/_common/components/post/post-eof.styl","hash":"902569a9dea90548bec21a823dd3efd94ff7c133","modified":1588560680913},{"_id":"themes/next/source/css/_common/components/post/post-expand.styl","hash":"ded41fd9d20a5e8db66aaff7cc50f105f5ef2952","modified":1588560680950},{"_id":"themes/next/source/css/_common/components/post/post-followme.styl","hash":"1e4190c10c9e0c9ce92653b0dbcec21754b0b69d","modified":1588560680982},{"_id":"themes/next/source/css/_common/components/post/post-gallery.styl","hash":"72d495a88f7d6515af425c12cbc67308a57d88ea","modified":1588560681020},{"_id":"themes/next/source/css/_common/components/post/post-header.styl","hash":"66211794e4ed47e779ca81150cef588e0b4f2fc5","modified":1588560681057},{"_id":"themes/next/source/css/_common/components/post/post-nav.styl","hash":"796eb941ba0ca03fd5ca6d15a1f6a56afd9aa174","modified":1588560681093},{"_id":"themes/next/source/css/_common/components/post/post-reward.styl","hash":"eca4d80dd0df1c3b1bc06bd39e6a4bd6c56198df","modified":1588560681126},{"_id":"themes/next/source/css/_common/components/post/post-rtl.styl","hash":"f5c2788a78790aca1a2f37f7149d6058afb539e0","modified":1588560681159},{"_id":"themes/next/source/css/_common/components/post/post-tags.styl","hash":"99e12c9ce3d14d4837e3d3f12fc867ba9c565317","modified":1588560681191},{"_id":"themes/next/source/css/_common/components/post/post-widgets.styl","hash":"5b5649b9749e3fd8b63aef22ceeece0a6e1df605","modified":1588560681225},{"_id":"themes/next/source/css/_common/components/post/post.styl","hash":"a760ee83ba6216871a9f14c5e56dc9bd0d9e2103","modified":1588560681263},{"_id":"themes/next/source/css/_common/components/third-party/gitalk.styl","hash":"8a7fc03a568b95be8d3337195e38bc7ec5ba2b23","modified":1588560681327},{"_id":"themes/next/source/css/_common/components/third-party/math.styl","hash":"b49e9fbd3c182b8fc066b8c2caf248e3eb748619","modified":1588560681372},{"_id":"themes/next/source/css/_common/components/third-party/related-posts.styl","hash":"e2992846b39bf3857b5104675af02ba73e72eed5","modified":1588560681413},{"_id":"themes/next/source/css/_common/components/third-party/search.styl","hash":"9f0b93d109c9aec79450c8a0cf4a4eab717d674d","modified":1588560681452},{"_id":"themes/next/source/css/_common/components/third-party/third-party.styl","hash":"9a878d0119785a2316f42aebcceaa05a120b9a7a","modified":1588560681488},{"_id":"themes/next/source/css/_common/scaffolding/highlight/copy-code.styl","hash":"f71a3e86c05ea668b008cf05a81f67d92b6d65e4","modified":1588560682536},{"_id":"themes/next/source/css/_common/scaffolding/highlight/diff.styl","hash":"d3f73688bb7423e3ab0de1efdf6db46db5e34f80","modified":1588560682567},{"_id":"themes/next/source/css/_common/scaffolding/highlight/highlight.styl","hash":"35c871a809afa8306c8cde13651010e282548bc6","modified":1588560682602},{"_id":"themes/next/source/css/_common/scaffolding/highlight/theme.styl","hash":"3b3acc5caa0b95a2598bef4eeacb21bab21bea56","modified":1588560682636},{"_id":"themes/next/source/css/_common/scaffolding/tags/blockquote-center.styl","hash":"7213e3d0ad7c95717ecd4e701d6ee9248ef2bf9f","modified":1588560682683},{"_id":"themes/next/source/css/_common/scaffolding/tags/group-pictures.styl","hash":"709d10f763e357e1472d6471f8be384ec9e2d983","modified":1588560682715},{"_id":"themes/next/source/css/_common/scaffolding/tags/label.styl","hash":"d7fce4b51b5f4b7c31d93a9edb6c6ce740aa0d6b","modified":1588560682747},{"_id":"themes/next/source/css/_common/scaffolding/tags/note.styl","hash":"9b3cce30c58e57b59e45d3f668a71a4129d3a8e4","modified":1588560682786},{"_id":"themes/next/source/css/_common/scaffolding/tags/pdf.styl","hash":"b49c64f8e9a6ca1c45c0ba98febf1974fdd03616","modified":1588560682818},{"_id":"themes/next/source/css/_common/scaffolding/tags/tabs.styl","hash":"f23670f1d8e749f3e83766d446790d8fd9620278","modified":1588560682856},{"_id":"themes/next/source/css/_common/scaffolding/tags/tags.styl","hash":"9e4c0653cfd3cc6908fa0d97581bcf80861fb1e7","modified":1588560682888},{"_id":"themes/next/source/css/_common/outline/footer/footer.styl","hash":"454a4aebfabb4469b92a8cbb49f46c49ac9bf165","modified":1588560681609},{"_id":"themes/next/source/css/_common/outline/header/bookmark.styl","hash":"e02b1097a72a7d2ddc45ea8d53aa6d77c25ac407","modified":1588560681656},{"_id":"themes/next/source/css/_common/outline/header/github-banner.styl","hash":"e7a9fdb6478b8674b1cdf94de4f8052843fb71d9","modified":1588560681696},{"_id":"themes/next/source/css/_common/outline/header/header.styl","hash":"a793cfff86ad4af818faef04c18013077873f8f0","modified":1588560681730},{"_id":"themes/next/source/css/_common/outline/header/headerband.styl","hash":"0caf32492692ba8e854da43697a2ec8a41612194","modified":1588560681767},{"_id":"themes/next/source/css/_common/outline/header/menu.styl","hash":"555762730f1f31451113e8fdc84ec438ea738d90","modified":1588560681804},{"_id":"themes/next/source/css/_common/outline/header/site-meta.styl","hash":"45a239edca44acecf971d99b04f30a1aafbf6906","modified":1588560681839},{"_id":"themes/next/source/css/_common/outline/header/site-nav.styl","hash":"b2fc519828fe89a1f8f03ff7b809ad68cd46f3d7","modified":1588560681873},{"_id":"themes/next/source/css/_common/outline/sidebar/sidebar-author-links.styl","hash":"2cb1876e9e0c9ac32160888af27b1178dbcb0616","modified":1588560681920},{"_id":"themes/next/source/css/_common/outline/sidebar/sidebar-author.styl","hash":"fa0222197b5eee47e18ac864cdc6eac75678b8fe","modified":1588560681952},{"_id":"themes/next/source/css/_common/outline/sidebar/sidebar-blogroll.styl","hash":"44487d9ab290dc97871fa8dd4487016deb56e123","modified":1588560681986},{"_id":"themes/next/source/css/_common/outline/sidebar/sidebar-button.styl","hash":"a237c290e8934d1a8cbbf22b3f30503d9663021d","modified":1588560682017},{"_id":"themes/next/source/css/_common/outline/sidebar/sidebar-dimmer.styl","hash":"9b479c2f9a9bfed77885e5093b8245cc5d768ec7","modified":1588560682052},{"_id":"themes/next/source/css/_common/outline/sidebar/sidebar-nav.styl","hash":"a960a2dd587b15d3b3fe1b59525d6fa971c6a6ec","modified":1588560682084},{"_id":"themes/next/source/css/_common/outline/sidebar/sidebar-toc.styl","hash":"a05a4031e799bc864a4536f9ef61fe643cd421af","modified":1588560682118},{"_id":"themes/next/source/css/_common/outline/sidebar/sidebar-toggle.styl","hash":"b3220db827e1adbca7880c2bb23e78fa7cbe95cb","modified":1588560682151},{"_id":"themes/next/source/css/_common/outline/sidebar/sidebar.styl","hash":"a9cd93c36bae5af9223e7804963096274e8a4f03","modified":1588560682179},{"_id":"themes/next/source/css/_common/outline/sidebar/site-state.styl","hash":"2a47f8a6bb589c2fb635e6c1e4a2563c7f63c407","modified":1588560682218},{"_id":"themes/next/source/lib/font-awesome/fonts/fontawesome-webfont.eot","hash":"d980c2ce873dc43af460d4d572d441304499f400","modified":1588560685668},{"_id":"source/_posts/Cryptography-notes/image-20200708152328368.png","hash":"c96371ac934d0e88e9e16bcba9a093ad77378fc3","modified":1594236666947},{"_id":"source/_posts/Cryptography-notes/image-20200708104031335.png","hash":"6f2d8995abb6c5958d23a3516c9e9d2718202a4d","modified":1594236666947},{"_id":"themes/next/source/images/samurai.png","hash":"ef8e6e443b1450da9ecf600033055d4ac6936277","modified":1569201111874},{"_id":"public/atom.xml","hash":"c8557d3cfb0fc240214700857423dc860bd255d1","modified":1595451676405},{"_id":"public/baidusitemap.xml","hash":"01341b97394334f28eae9382466a1b9f63b9f692","modified":1595451676407},{"_id":"public/search.xml","hash":"64e65bb0eccb78df9d4c1d0f03bdf4cbc264c865","modified":1595451676407},{"_id":"public/sitemap.xml","hash":"78ad2b8e829c453e98e28daadb7de86b6d97180d","modified":1595451676411},{"_id":"public/404.html","hash":"c63624df44836609cc861eb5c1e64acbda4996ed","modified":1595451677358},{"_id":"public/about/index.html","hash":"5ca208b3b7b1a1f419c48f21db9efcac494b8b0d","modified":1595451677359},{"_id":"public/categories/index.html","hash":"29a2a8c168f4e869b09f54932a800d445658ae98","modified":1595451677361},{"_id":"public/tags/index.html","hash":"d8bc0ef76ec70c5f5f53be578c649fdce219c1fb","modified":1595451677378},{"_id":"public/2020/07/22/the-pragmatic-programmer-chapter-8/index.html","hash":"d1511523dc057289f0475a2e6fec9cfa590906f2","modified":1595451677378},{"_id":"public/2020/07/15/di-si-ge-okr/index.html","hash":"5345b4f9cd8339dd25bdcb2f774cc1396f47a3fc","modified":1595451677379},{"_id":"public/2020/07/01/di-san-ge-okr/index.html","hash":"497db75957f6b6f997c82d96c9f6044491abc4cd","modified":1595451677379},{"_id":"public/2020/07/01/june-1st-half-notes/index.html","hash":"8d52b5d74d6eb6d6b235899f89504147cedffd12","modified":1595451677381},{"_id":"public/2020/06/17/di-er-ge-okr/index.html","hash":"7125750e4c7fa54322fab21b712c65b780531c7a","modified":1595451677381},{"_id":"public/2020/05/31/di-yi-ge-okr/index.html","hash":"0baf1bd98b042104aae9dfc503bd2b655e0ff86a","modified":1595451677381},{"_id":"public/2020/05/08/how-to-read-a-tech-book/index.html","hash":"0edc3001ec68acba7e5800f8ddb0a6fdb785ccfd","modified":1595451677382},{"_id":"public/2020/04/17/netty-in-action-chapter-9/index.html","hash":"5d0db6829bbf82bae3bc02eec0b5e219b5a635bc","modified":1595451677382},{"_id":"public/2020/04/14/netty-in-action-chapter-8/index.html","hash":"008584b7d916b3035f707ee1d796e386ec30c983","modified":1595451677382},{"_id":"public/2020/04/09/netty-in-action-chapter-7/index.html","hash":"79265839e23f4f0fbbc8bb1030f1301ec3ae0c72","modified":1595451677383},{"_id":"public/archives/index.html","hash":"3ee1c4f80b867a8c161e73b8724658f749ac98c9","modified":1595451677384},{"_id":"public/2020/07/17/july-1st-half-notes/index.html","hash":"6288b9bf4837b27dc4b20d0e29a1e48c5515dc20","modified":1595451677384},{"_id":"public/2020/07/14/the-pragmatic-programmer-chapter-7/index.html","hash":"43558f455a5488d40c842bf839f0f9e96bf5ba48","modified":1595451677385},{"_id":"public/2020/07/12/cryptography-notes/index.html","hash":"915ed636438ae98321f7dd19c3d6d96628eb7c27","modified":1595451677385},{"_id":"public/2020/07/12/spring-security-notes/index.html","hash":"76f6bc374f331b547b933139801d6b849843f0cd","modified":1595451677386},{"_id":"public/2020/07/01/june-2nd-half-notes/index.html","hash":"7c6b42f8eaa6cd2791f9955e03ec6d0ae48cd470","modified":1595451677388},{"_id":"public/2020/05/31/technology-sharing-may-2020/index.html","hash":"21388aa2a8cb8d0e4ab0108122278f0b76fb72d6","modified":1595451677389},{"_id":"public/2020/05/25/the-pragmatic-programmer-chapter-2/index.html","hash":"dea93a892622790cea9445c3e5cabf2e92aebcab","modified":1595451677389},{"_id":"public/2020/05/09/the-pragmatic-programmer-chapter-1/index.html","hash":"eb6043728d379cec7b2243505878871c5e626eb6","modified":1595451677390},{"_id":"public/2020/04/27/chuan-qi-cheng-xu-yuan-xiu-lian-zhi-dao-zhi-bo-guan-hou-gan/index.html","hash":"b724014d8331c4097bd5c975049dec31d4a70c33","modified":1595451677390},{"_id":"public/2020/04/23/work-from-home-ti-hui/index.html","hash":"7c68fff3f26b439f8c94c09268be262d1e818e73","modified":1595451677390},{"_id":"public/2020/04/21/java-exception-handling-best-practices/index.html","hash":"0a2ad37b83b96db4ad340432b6726f452cd14885","modified":1595451677390},{"_id":"public/2020/04/07/netty-in-action-chapter-6/index.html","hash":"e016cab70c35134d015d91d33a354f3777b0e699","modified":1595451677390},{"_id":"public/2020/03/31/netty-in-action-chapter-2/index.html","hash":"33a1d510b537c214a8243c6b006f66fb02ee9170","modified":1595451677429},{"_id":"public/archives/page/3/index.html","hash":"13b12cc56c06125fd9cf7ee0da785e927c0cb51e","modified":1595451677429},{"_id":"public/archives/2020/page/3/index.html","hash":"5ceba6c00f63d6ebc2025b65fba2473fc4730f83","modified":1595451677429},{"_id":"public/archives/2020/03/index.html","hash":"f9fd2cf02cd601c4f359331bee2e20944a87adb2","modified":1595451677430},{"_id":"public/archives/2020/04/index.html","hash":"93b174e71ecb7eececdfc60bc429ef33895243e6","modified":1595451677430},{"_id":"public/archives/2020/05/index.html","hash":"e51a793d7cde35eab7bae105b2871d5096c56e1c","modified":1595451677430},{"_id":"public/archives/2020/06/index.html","hash":"61e5c825982368c2c75577cc5a836bcd10e0d128","modified":1595451677430},{"_id":"public/archives/2020/07/index.html","hash":"977f133c1cf21c2f6981876318e055faf4b800e8","modified":1595451677430},{"_id":"public/categories/Tech/page/3/index.html","hash":"d4d632a48433c723c6dc93a8b252e6d04b837659","modified":1595451677430},{"_id":"public/categories/Life/index.html","hash":"984267c7e5cae3ea7788e3a5d93359677a7441f7","modified":1595451677430},{"_id":"public/tags/Operating-System/index.html","hash":"1c09aa23b8e0e3d171b8e063d1ca52bc7520b107","modified":1595451677430},{"_id":"public/tags/Security/index.html","hash":"b925f7d2a3a432a1081ac6531a8418359f9c2eaf","modified":1595451677430},{"_id":"public/tags/Career/index.html","hash":"84b1f49802515d64a1cb43178dca02f5c83718c7","modified":1595451677431},{"_id":"public/tags/Sharing/index.html","hash":"ee8606c2d6b84eb1a2970b16135881362142ecdc","modified":1595451677431},{"_id":"public/tags/Architecture/index.html","hash":"fa7dac0c31f3468bb0145052cab48907dc01dc5a","modified":1595451677431},{"_id":"public/tags/Java/index.html","hash":"3ed5f062ce864037e042e6c4ab2fba26c062201d","modified":1595451677433},{"_id":"public/tags/Netty/index.html","hash":"c3f9136d40865872c0889b82be18803a7dc47640","modified":1595451677433},{"_id":"public/tags/Efficiency/index.html","hash":"3e49ae9e636aa1b61e7c57e087891df6468ad1b9","modified":1595451677433},{"_id":"public/tags/OKR/index.html","hash":"d3d049fdda53e2f32ae69748b42c85fc194cb743","modified":1595451677433},{"_id":"public/2020/04/06/advanced-programming-in-unix-chapter-3/index.html","hash":"0408c98047f9b144ea4aeb1cbf08d4b13142a28e","modified":1595451677434},{"_id":"public/2020/04/03/netty-in-action-chapter-5/index.html","hash":"f88750a09dab69d325285ea9e67457902880e230","modified":1595451677434},{"_id":"public/2020/04/03/netty-in-action-chapter-4/index.html","hash":"be8fed972d6995ab9e31c3bd18f345ef9fcf6934","modified":1595451677434},{"_id":"public/2020/04/02/netty-in-action-chapter-3/index.html","hash":"c008296e49e7cd701adc44167eeaad41b910780a","modified":1595451677434},{"_id":"public/2020/03/30/advanced-programming-in-unix-chapter-2/index.html","hash":"059e707c3788d79c4a743035c661af1825f7f6e5","modified":1595451677434},{"_id":"public/2020/03/29/advanced-programming-in-unix-chapter-1/index.html","hash":"3a64aac4d153485eac4cc25467f7e94c0c569b27","modified":1595451677434},{"_id":"public/2020/03/28/netty-in-action-chapter-1-1/index.html","hash":"8afda18ab0adb58f88f7263fe9736adcbeb6108b","modified":1595451677435},{"_id":"public/2020/03/18/cong-ling-kai-shi-xue-jia-gou-bi-ji-01/index.html","hash":"8cf5625723f1897e988128105400a31fb0ed42ee","modified":1595451677435},{"_id":"public/archives/page/2/index.html","hash":"ccfd6d04300c8d789f3a208d1fe7ff2acf578138","modified":1595451677435},{"_id":"public/archives/2020/index.html","hash":"c7262f9621eec0eccdde523b1b0281549d9d81f8","modified":1595451677437},{"_id":"public/archives/2020/page/2/index.html","hash":"d92438413a45e53e439b3824d6eb91c82dfffd2a","modified":1595451677437},{"_id":"public/categories/Tech/index.html","hash":"5e03120402f604ec71712df0f145d6a00950f6e3","modified":1595451677438},{"_id":"public/categories/Tech/page/2/index.html","hash":"34069f6c54ce63b6dabc9b774b1f6e03b796dd70","modified":1595451677439},{"_id":"public/index.html","hash":"c0eb6eb7473e2df3aee9b8d9f507f182cef0e36e","modified":1595451677439},{"_id":"public/page/2/index.html","hash":"a7f552dba851afe7da0272043f2dfa0625560ea3","modified":1595451677440},{"_id":"public/page/3/index.html","hash":"91b8ec928b473144ddc22ab0a905212ce7a1a6e6","modified":1595451677442},{"_id":"public/CNAME","hash":"620730b9f49132f600c7709bea3cd009ff2dc4dd","modified":1595451677443},{"_id":"public/uploads/android-chrome-192x192.png","hash":"3c6bfab6aedc74d1b318ee1c8efb931c59607cba","modified":1595451677444},{"_id":"public/uploads/apple-touch-icon.png","hash":"86478483206a950f6fbf9e41e4f704b6c281562b","modified":1595451677445},{"_id":"public/uploads/browserconfig.xml","hash":"974aea18bda5a95802c06b80126ab1d96d91d708","modified":1595451677446},{"_id":"public/uploads/favicon-32x32.png","hash":"9bafedc21beec603b3f57aabddd72f424b210a8a","modified":1595451677447},{"_id":"public/uploads/favicon-16x16.png","hash":"f51698a905b7855553ca2e958db76b166983121c","modified":1595451677447},{"_id":"public/uploads/favicon.ico","hash":"4a16edb11b49036d0049ba0615624c209a5f943e","modified":1595451677447},{"_id":"public/uploads/favicon.png","hash":"3c6bfab6aedc74d1b318ee1c8efb931c59607cba","modified":1595451677448},{"_id":"public/uploads/mstile-150x150.png","hash":"50c82f35dba7e06aff680e8d5bd70cccda40910e","modified":1595451677449},{"_id":"public/uploads/safari-pinned-tab.svg","hash":"f2bc648b125a55fdec56142734185b99d91a1aa5","modified":1595451677449},{"_id":"public/uploads/site.webmanifest","hash":"15130c91f2694226943e18267a8c125ea248c298","modified":1595451677449},{"_id":"public/images/algolia_logo.svg","hash":"ec119560b382b2624e00144ae01c137186e91621","modified":1595451677449},{"_id":"public/images/apple-touch-icon-next.png","hash":"2959dbc97f31c80283e67104fe0854e2369e40aa","modified":1595451677450},{"_id":"public/images/avatar.gif","hash":"18c53e15eb0c84b139995f9334ed8522b40aeaf6","modified":1595451677450},{"_id":"public/images/cc-by-nc-nd.svg","hash":"c6524ece3f8039a5f612feaf865d21ec8a794564","modified":1595451677450},{"_id":"public/images/cc-by-nc-sa.svg","hash":"3031be41e8753c70508aa88e84ed8f4f653f157e","modified":1595451677451},{"_id":"public/images/cc-by-nc.svg","hash":"8d39b39d88f8501c0d27f8df9aae47136ebc59b7","modified":1595451677452},{"_id":"public/images/cc-by-nd.svg","hash":"c563508ce9ced1e66948024ba1153400ac0e0621","modified":1595451677452},{"_id":"public/images/cc-by-sa.svg","hash":"aa4742d733c8af8d38d4c183b8adbdcab045872e","modified":1595451677452},{"_id":"public/images/cc-by.svg","hash":"28a0a4fe355a974a5e42f68031652b76798d4f7e","modified":1595451677452},{"_id":"public/images/cc-zero.svg","hash":"87669bf8ac268a91d027a0a4802c92a1473e9030","modified":1595451677452},{"_id":"public/images/favicon-16x16-next.png","hash":"943a0d67a9cdf8c198109b28f9dbd42f761d11c3","modified":1595451677453},{"_id":"public/images/favicon-32x32-next.png","hash":"0749d7b24b0d2fae1c8eb7f671ad4646ee1894b1","modified":1595451677453},{"_id":"public/images/logo.svg","hash":"d29cacbae1bdc4bbccb542107ee0524fe55ad6de","modified":1595451677453},{"_id":"public/images/quote-l.svg","hash":"94e870b4c8c48da61d09522196d4dd40e277a98f","modified":1595451677453},{"_id":"public/images/quote-r.svg","hash":"e60ae504f9d99b712c793c3740c6b100d057d4ec","modified":1595451677453},{"_id":"public/lib/font-awesome/HELP-US-OUT.txt","hash":"4f7bf961f1bed448f6ba99aeb9219fabf930ba96","modified":1595451677453},{"_id":"public/lib/font-awesome/css/font-awesome.css.map","hash":"0189d278706509412bac4745f96c83984e1d59f4","modified":1595451677453},{"_id":"public/2020/04/17/netty-in-action-chapter-9/embedded_channel_workflow.png","hash":"ff4bf86fff11ad8231bf686419b95a26765323ca","modified":1595451677454},{"_id":"public/2020/03/18/cong-ling-kai-shi-xue-jia-gou-bi-ji-01/4+1.jpg","hash":"c8c734f9ba09d17985c76fec9b59f1579e5f36fc","modified":1595451677454},{"_id":"public/2020/04/03/netty-in-action-chapter-5/bytebuf.png","hash":"ac4f67e8217b45a426452cff12b82f998ea90596","modified":1595451677454},{"_id":"public/2020/03/29/advanced-programming-in-unix-chapter-1/systemCallAndLibraryCall.png","hash":"f57529e21a43e58b751026138e15e3d2fa1c2cdf","modified":1595451677454},{"_id":"public/2020/04/02/netty-in-action-chapter-3/channelPipeline.png","hash":"3effa60c1592c5b399043ab82503102cee5d39ec","modified":1595451677454},{"_id":"public/2020/04/06/advanced-programming-in-unix-chapter-3/kernel_data_structure_after_dup.png","hash":"491216badae18f89afa9ed4ce45b37493c72d0bb","modified":1595451677454},{"_id":"public/2020/04/07/netty-in-action-chapter-6/ChannelHandlerAdaptor.png","hash":"bdd2574e6508342b682ade060ea857429c21aa94","modified":1595451677455},{"_id":"public/2020/04/07/netty-in-action-chapter-6/channelPipeline_channelHandlers.png","hash":"7956550a3b5b8868372b67d019e8a37d8815b0c6","modified":1595451677455},{"_id":"public/2020/04/07/netty-in-action-chapter-6/channel_state_model.png","hash":"bec61f920867bd96cbaa90561c96ab7a65ca67a6","modified":1595451677455},{"_id":"public/css/prism-tomorrow.css","hash":"3b99487dfc9b4e51e9105a93743b92a761840e34","modified":1595451677455},{"_id":"public/css/prism-line-numbers.css","hash":"e0db113a99e4a09d2161a539b1652d96e4a22fac","modified":1595451677455},{"_id":"public/lib/font-awesome/fonts/fontawesome-webfont.woff","hash":"28b782240b3e76db824e12c02754a9731a167527","modified":1595451678036},{"_id":"public/lib/font-awesome/fonts/fontawesome-webfont.woff2","hash":"d6f48cba7d076fb6f2fd6ba993a75b9dc1ecbf0c","modified":1595451678038},{"_id":"public/2020/04/03/netty-in-action-chapter-5/bytebuf_internal_segmentation.png","hash":"27574fa8a2157964776abb14c6931c211dee9001","modified":1595451678038},{"_id":"public/2020/04/14/netty-in-action-chapter-8/bootstrapping_process.png","hash":"05f4cb4508058dbaa8efb96591e7f11aa62db406","modified":1595451678038},{"_id":"public/2020/03/29/advanced-programming-in-unix-chapter-1/common_shell.png","hash":"94924d22ff268d09b5b08035b072de8d62be18e4","modified":1595451678038},{"_id":"public/2020/03/29/advanced-programming-in-unix-chapter-1/unix_architecture.png","hash":"c2940ed5b9cf3ff0add60ef37a23cbd5f2046a32","modified":1595451678038},{"_id":"public/2020/04/02/netty-in-action-chapter-3/channel_eventLoop.png","hash":"17d2306c67bfa9043ee80f8fb2fa96c1fa25e688","modified":1595451678038},{"_id":"public/2020/04/02/netty-in-action-chapter-3/eventLoopGroup.png","hash":"c76114185709fcd85a0f62bf86800b45e059683b","modified":1595451678038},{"_id":"public/2020/04/06/advanced-programming-in-unix-chapter-3/kernel_data_structure_for_open_files.png","hash":"91f81342193cfe88654c5a311a159ebfa7ebcd0d","modified":1595451678038},{"_id":"public/2020/04/06/advanced-programming-in-unix-chapter-3/two_processes_one_file.png","hash":"01215d6d6cff5ebab20f83e875fcac233baca62e","modified":1595451678039},{"_id":"public/2020/07/12/spring-security-notes/image-20200705115533934.png","hash":"a75f1218a14217e1a2cbf0c9df4aefc1a77edad2","modified":1595451678039},{"_id":"public/2020/07/12/spring-security-notes/image-20200705122105774.png","hash":"1bdca4e9b28e1a21b5277fd5459319a41dde123f","modified":1595451678039},{"_id":"public/2020/03/28/netty-in-action-chapter-1-1/callback.png","hash":"c8fefab87a90dcae509ca94f82c8e0666f39134f","modified":1595451678039},{"_id":"public/2020/03/28/netty-in-action-chapter-1-1/callback_with_future.png","hash":"2a66b8226803773b1508b5d72d9a75d5883aa850","modified":1595451678039},{"_id":"public/2020/04/07/netty-in-action-chapter-6/channelFutureListenerToChannelFuture.png","hash":"02a1ee4600f5e1907a1a31ad660852ee99dc7b5f","modified":1595451678039},{"_id":"public/2020/04/07/netty-in-action-chapter-6/channelFutureListenerToChannelPromise.png","hash":"85aad23d82949eaea84803e44ebd8048b37c1da1","modified":1595451678039},{"_id":"public/2020/04/07/netty-in-action-chapter-6/operationsTriggeredViaContext.png","hash":"d0e8a549362528621fbf9da4876b87262ced0ad3","modified":1595451678039},{"_id":"public/js/algolia-search.js","hash":"23cc3c013185eb97ef347c3b4c92d928f2f3398f","modified":1595451678106},{"_id":"public/js/bookmark.js","hash":"a00945ff886e9f6f835731cdaf29a3a3727c8877","modified":1595451678106},{"_id":"public/js/local-search.js","hash":"b42bd1c883ce91db8632d96e0f0e062cb6b73adc","modified":1595451678106},{"_id":"public/js/motion.js","hash":"72df86f6dfa29cce22abeff9d814c9dddfcf13a9","modified":1595451678106},{"_id":"public/js/next-boot.js","hash":"a22eeb6048ddd6b9224c8a671cbcfa303a2f7a1a","modified":1595451678106},{"_id":"public/js/utils.js","hash":"95c5d37aa06521675afcf8619cfc5dbba3d2e18a","modified":1595451678106},{"_id":"public/js/schemes/muse.js","hash":"47c4f60eb7f7dc3303e84914b611dc34827069e1","modified":1595451678106},{"_id":"public/js/schemes/pisces.js","hash":"3d9d3c14b77044d66be1898a9a934696e9127c82","modified":1595451678107},{"_id":"public/lib/font-awesome/bower.json","hash":"64394a2a9aa00f8e321d8daa5e51a420f0e96dad","modified":1595451678107},{"_id":"public/lib/velocity/velocity.ui.min.js","hash":"ed5e534cd680a25d8d14429af824f38a2c7d9908","modified":1595451678107},{"_id":"public/css/main.css","hash":"ae6073d98ec7df17323746f4a4819b38fc5bf521","modified":1595451678107},{"_id":"public/lib/anime.min.js","hash":"47cb482a8a488620a793d50ba8f6752324b46af3","modified":1595451678107},{"_id":"public/lib/velocity/velocity.min.js","hash":"2f1afadc12e4cf59ef3b405308d21baa97e739c6","modified":1595451678107},{"_id":"public/lib/font-awesome/css/font-awesome.css","hash":"0140952c64e3f2b74ef64e050f2fe86eab6624c8","modified":1595451678107},{"_id":"public/lib/font-awesome/css/font-awesome.min.css","hash":"512c7d79033e3028a9be61b540cf1a6870c896f8","modified":1595451678107},{"_id":"public/lib/font-awesome/fonts/fontawesome-webfont.eot","hash":"d980c2ce873dc43af460d4d572d441304499f400","modified":1595451678107},{"_id":"public/2020/04/06/advanced-programming-in-unix-chapter-3/buffer_size_comparison.png","hash":"a3baad0fc84ac6ff214fb1e988f487349fad3abd","modified":1595451678108},{"_id":"public/2020/07/12/cryptography-notes/image-20200708153106778.png","hash":"2703a741ef124656770379f74311478bf45dda82","modified":1595451678108},{"_id":"public/2020/07/12/cryptography-notes/image-20200708113856166.png","hash":"067ba479d20c2758b47b470c3e02de501592ebc4","modified":1595451678108},{"_id":"public/2020/05/31/technology-sharing-may-2020/pyramid.png","hash":"0a2894b3993920a1bc2d29bacd7616fb509227ee","modified":1595451678108},{"_id":"public/2020/04/09/netty-in-action-chapter-7/eventloop_allocation.png","hash":"8f3f8d33006a6f0ae47b76de9409d44e5ea9c942","modified":1595451678109},{"_id":"public/2020/04/09/netty-in-action-chapter-7/executor_logic.png","hash":"ebb6e87600b479615176293617abf4c5a2aec8b1","modified":1595451678109},{"_id":"public/2020/04/14/netty-in-action-chapter-8/eventLoop_shared_among_channels.png","hash":"2df866ec7ca6a45d50040dbc79ba6f9ee1ee80e1","modified":1595451678109},{"_id":"public/2020/04/03/netty-in-action-chapter-4/OIO_processing_logic.png","hash":"844a5e9ca1b5fe282c44c1efa46db0c4578426a5","modified":1595451678109},{"_id":"public/2020/04/03/netty-in-action-chapter-4/netty_provided_transports.png","hash":"791841f4c21c2d9859a6f2f4b6feff7797d777c2","modified":1595451678109},{"_id":"public/2020/04/03/netty-in-action-chapter-4/selector_workflow.png","hash":"f9a473c2078d5b39a416bc8d62ce34ac3ee9c044","modified":1595451678109},{"_id":"public/2020/07/12/spring-security-notes/image-20200703140104398.png","hash":"656ad1a9f4978f25cabd17895d5ee9e20e742342","modified":1595451678109},{"_id":"public/2020/07/12/spring-security-notes/image-20200705115002217.png","hash":"d9485436a831ba7f5e2195116dd26506bbf74bbb","modified":1595451678109},{"_id":"public/2020/03/28/netty-in-action-chapter-1-1/callback_with_future2.png","hash":"ebaf4a356b9a82d24ed555027b03366ec11c44b1","modified":1595451678110},{"_id":"public/2020/03/28/netty-in-action-chapter-1-1/netty_feature_summary.png","hash":"3567baaa502bb781485731126248c8837993e276","modified":1595451678110},{"_id":"public/2020/07/12/cryptography-notes/image-20200708110748416.png","hash":"2df470c404c18fae9f8cb85c29a88d840b79a3c5","modified":1595451678117},{"_id":"public/2020/03/28/netty-in-action-chapter-1-1/java_bloking_IO.png","hash":"0ed59979ca0ba1aaa58e1bafe74f0c96d6952273","modified":1595451678117},{"_id":"public/2020/07/12/cryptography-notes/image-20200708152328368.png","hash":"c96371ac934d0e88e9e16bcba9a093ad77378fc3","modified":1595451678161},{"_id":"public/2020/07/12/cryptography-notes/image-20200708104031335.png","hash":"6f2d8995abb6c5958d23a3516c9e9d2718202a4d","modified":1595451678173},{"_id":"public/images/samurai.png","hash":"ef8e6e443b1450da9ecf600033055d4ac6936277","modified":1595451678178}],"Category":[{"name":"Tech","_id":"ckcxuqel30005fkjxer0ga28b"},{"name":"Life","_id":"ckcxuqetq0027fkjxow8dtciy"}],"Data":[{"_id":"next","data":{"override":false,"favicon":{"small":"/uploads/favicon-16x16.png","medium":"/uploads/favicon-32x32.png","apple_touch_icon":"/uploads/apple-touch-icon.png","safari_pinned_tab":"/uploads/favicon.png","ms_browserconfig":"/uploads/browserconfig.xml"},"keywords":"Hexo, NexT","rss":null,"footer":{"icon":"user","copyright":null,"powered":true,"theme":{"enable":true,"version":true}},"canonical":true,"seo":false,"index_with_subtitle":false,"menu":{"home":"/ || home","archives":"/archives/ || archive"},"menu_icons":{"enable":true},"scheme":"Pisces","social_icons":{"enable":true,"icons_only":false,"transition":false},"links_icon":"link","links_title":"Links","links_layout":"block","toc":{"enable":true,"number":true,"wrap":false},"sidebar":{"position":"left","display":"post","offset":12,"b2t":false,"scrollpercent":false,"onmobile":false},"scroll_to_more":true,"save_scroll":false,"excerpt_description":true,"auto_excerpt":{"enable":false,"length":30},"read_more_btn":true,"post_meta":{"item_text":true,"created_at":true,"updated_at":false,"categories":true},"post_wordcount":{"item_text":true,"wordcount":false,"min2read":false,"totalcount":false,"separated_meta":true},"post_copyright":{"enable":false,"license":"CC BY-NC-SA 3.0","license_url":"https://creativecommons.org/licenses/by-nc-sa/3.0/"},"mobile_layout_economy":false,"android_chrome_color":"#222","custom_logo":{"enabled":false,"image":null},"marked":{"smartypants":false},"highlight_theme":"normal","font":{"enable":false,"host":null,"global":{"external":true,"family":"Lato","size":null},"headings":{"external":true,"family":null,"size":null},"posts":{"external":true,"family":null},"logo":{"external":true,"family":null,"size":null},"codes":{"external":true,"family":null,"size":null}},"mathjax":{"enable":false,"per_page":false,"cdn":"//cdn.bootcss.com/mathjax/2.7.1/latest.js?config=TeX-AMS-MML_HTMLorMML"},"han":false,"disqus":{"enable":false,"shortname":null,"count":true},"changyan":{"enable":false,"appid":null,"appkey":null},"valine":{"enable":false,"appid":null,"appkey":null,"notify":false,"verify":false,"placeholder":"Just go go","avatar":"mm","guest_info":"nick,mail,link","pageSize":10},"gitment":{"enable":false,"mint":true,"count":true,"lazy":false,"cleanly":false,"language":null,"github_user":null,"github_repo":null,"client_id":null,"client_secret":null,"proxy_gateway":null,"redirect_protocol":null},"needmoreshare2":{"enable":false,"postbottom":{"enable":false,"options":{"iconStyle":"box","boxForm":"horizontal","position":"bottomCenter","networks":"Weibo,Wechat,Douban,QQZone,Twitter,Facebook"}},"float":{"enable":false,"options":{"iconStyle":"box","boxForm":"horizontal","position":"middleRight","networks":"Weibo,Wechat,Douban,QQZone,Twitter,Facebook"}}},"duoshuo_info":{"ua_enable":true,"admin_enable":false,"user_id":0},"facebook_sdk":{"enable":false,"app_id":null,"fb_admin":null,"like_button":null,"webmaster":null},"facebook_comments_plugin":{"enable":false,"num_of_posts":10,"width":"100%","scheme":"light"},"vkontakte_api":{"enable":false,"app_id":null,"like":true,"comments":true,"num_of_posts":10},"rating":{"enable":false,"id":null,"color":"fc6423"},"leancloud_visitors":{"enable":false,"app_id":null,"app_key":null},"firestore":{"enable":false,"collection":"articles","apiKey":null,"projectId":null,"bluebird":false},"busuanzi_count":{"enable":false,"site_uv":true,"site_uv_header":"<i class=\"fa fa-user\"></i>","site_uv_footer":null,"site_pv":true,"site_pv_header":"<i class=\"fa fa-eye\"></i>","site_pv_footer":null,"page_pv":true,"page_pv_header":"<i class=\"fa fa-file-o\"></i>","page_pv_footer":null},"baidu_push":false,"calendar":{"enable":false,"calendar_id":"<required>","api_key":"<required>","orderBy":"startTime","offsetMax":24,"offsetMin":4,"timeZone":null,"showDeleted":false,"singleEvents":true,"maxResults":250},"algolia_search":{"enable":false,"hits":{"per_page":10},"labels":{"input_placeholder":"Search for Posts","hits_empty":"We didn't find any results for the search: ${query}","hits_stats":"${hits} results found in ${time} ms"}},"local_search":{"enable":false,"trigger":"auto","top_n_per_article":1},"exturl":false,"note":{"style":"simple","icons":false,"border_radius":3,"light_bg_offset":0},"label":true,"tabs":{"enable":true,"transition":{"tabs":false,"labels":true},"border_radius":0},"motion":{"enable":true,"async":false,"transition":{"post_block":"fadeIn","post_header":"slideDownIn","post_body":"slideDownIn","coll_header":"slideLeftIn","sidebar":"slideUpIn"}},"fancybox":true,"pace":false,"pace_theme":"pace-theme-minimal","canvas_nest":false,"three_waves":false,"canvas_lines":false,"canvas_sphere":false,"canvas_ribbon":{"enable":false,"size":300,"alpha":0.6,"zIndex":-1},"vendors":{"_internal":"lib","jquery":null,"fancybox":null,"fancybox_css":null,"fastclick":null,"lazyload":null,"velocity":null,"velocity_ui":null,"ua_parser":null,"fontawesome":null,"algolia_instant_js":null,"algolia_instant_css":null,"pace":null,"pace_css":null,"canvas_nest":null,"three":null,"three_waves":null,"canvas_lines":null,"canvas_sphere":null,"canvas_ribbon":null,"han":null,"needMoreShare2":null},"css":"css","js":"js","images":"images","version":"5.1.4"}}],"Page":[{"title":"404","date":"2020-03-15T18:19:44.554Z","type":"404","layout":"404","description":"404 NOT FOUND","_content":"","source":"404.md","raw":"---\ntitle: 404\ndate: {{ date }}\ntype: \"404\"\nlayout: \"404\"\ndescription: \"404 NOT FOUND\"\n---\n","updated":"2020-03-10T01:05:20.702Z","path":"404.html","comments":1,"_id":"ckcxuqebr0000fkjx0olun897","content":"","site":{"data":{"next":{"override":false,"favicon":{"small":"/uploads/favicon-16x16.png","medium":"/uploads/favicon-32x32.png","apple_touch_icon":"/uploads/apple-touch-icon.png","safari_pinned_tab":"/uploads/favicon.png","ms_browserconfig":"/uploads/browserconfig.xml"},"keywords":"Hexo, NexT","rss":null,"footer":{"icon":"user","copyright":null,"powered":true,"theme":{"enable":true,"version":true}},"canonical":true,"seo":false,"index_with_subtitle":false,"menu":{"home":"/ || home","archives":"/archives/ || archive"},"menu_icons":{"enable":true},"scheme":"Pisces","social_icons":{"enable":true,"icons_only":false,"transition":false},"links_icon":"link","links_title":"Links","links_layout":"block","toc":{"enable":true,"number":true,"wrap":false},"sidebar":{"position":"left","display":"post","offset":12,"b2t":false,"scrollpercent":false,"onmobile":false},"scroll_to_more":true,"save_scroll":false,"excerpt_description":true,"auto_excerpt":{"enable":false,"length":30},"read_more_btn":true,"post_meta":{"item_text":true,"created_at":true,"updated_at":false,"categories":true},"post_wordcount":{"item_text":true,"wordcount":false,"min2read":false,"totalcount":false,"separated_meta":true},"post_copyright":{"enable":false,"license":"CC BY-NC-SA 3.0","license_url":"https://creativecommons.org/licenses/by-nc-sa/3.0/"},"mobile_layout_economy":false,"android_chrome_color":"#222","custom_logo":{"enabled":false,"image":null},"marked":{"smartypants":false},"highlight_theme":"normal","font":{"enable":false,"host":null,"global":{"external":true,"family":"Lato","size":null},"headings":{"external":true,"family":null,"size":null},"posts":{"external":true,"family":null},"logo":{"external":true,"family":null,"size":null},"codes":{"external":true,"family":null,"size":null}},"mathjax":{"enable":false,"per_page":false,"cdn":"//cdn.bootcss.com/mathjax/2.7.1/latest.js?config=TeX-AMS-MML_HTMLorMML"},"han":false,"disqus":{"enable":false,"shortname":null,"count":true},"changyan":{"enable":false,"appid":null,"appkey":null},"valine":{"enable":false,"appid":null,"appkey":null,"notify":false,"verify":false,"placeholder":"Just go go","avatar":"mm","guest_info":"nick,mail,link","pageSize":10},"gitment":{"enable":false,"mint":true,"count":true,"lazy":false,"cleanly":false,"language":null,"github_user":null,"github_repo":null,"client_id":null,"client_secret":null,"proxy_gateway":null,"redirect_protocol":null},"needmoreshare2":{"enable":false,"postbottom":{"enable":false,"options":{"iconStyle":"box","boxForm":"horizontal","position":"bottomCenter","networks":"Weibo,Wechat,Douban,QQZone,Twitter,Facebook"}},"float":{"enable":false,"options":{"iconStyle":"box","boxForm":"horizontal","position":"middleRight","networks":"Weibo,Wechat,Douban,QQZone,Twitter,Facebook"}}},"duoshuo_info":{"ua_enable":true,"admin_enable":false,"user_id":0},"facebook_sdk":{"enable":false,"app_id":null,"fb_admin":null,"like_button":null,"webmaster":null},"facebook_comments_plugin":{"enable":false,"num_of_posts":10,"width":"100%","scheme":"light"},"vkontakte_api":{"enable":false,"app_id":null,"like":true,"comments":true,"num_of_posts":10},"rating":{"enable":false,"id":null,"color":"fc6423"},"leancloud_visitors":{"enable":false,"app_id":null,"app_key":null},"firestore":{"enable":false,"collection":"articles","apiKey":null,"projectId":null,"bluebird":false},"busuanzi_count":{"enable":false,"site_uv":true,"site_uv_header":"<i class=\"fa fa-user\"></i>","site_uv_footer":null,"site_pv":true,"site_pv_header":"<i class=\"fa fa-eye\"></i>","site_pv_footer":null,"page_pv":true,"page_pv_header":"<i class=\"fa fa-file-o\"></i>","page_pv_footer":null},"baidu_push":false,"calendar":{"enable":false,"calendar_id":"<required>","api_key":"<required>","orderBy":"startTime","offsetMax":24,"offsetMin":4,"timeZone":null,"showDeleted":false,"singleEvents":true,"maxResults":250},"algolia_search":{"enable":false,"hits":{"per_page":10},"labels":{"input_placeholder":"Search for Posts","hits_empty":"We didn't find any results for the search: ${query}","hits_stats":"${hits} results found in ${time} ms"}},"local_search":{"enable":false,"trigger":"auto","top_n_per_article":1},"exturl":false,"note":{"style":"simple","icons":false,"border_radius":3,"light_bg_offset":0},"label":true,"tabs":{"enable":true,"transition":{"tabs":false,"labels":true},"border_radius":0},"motion":{"enable":true,"async":false,"transition":{"post_block":"fadeIn","post_header":"slideDownIn","post_body":"slideDownIn","coll_header":"slideLeftIn","sidebar":"slideUpIn"}},"fancybox":true,"pace":false,"pace_theme":"pace-theme-minimal","canvas_nest":false,"three_waves":false,"canvas_lines":false,"canvas_sphere":false,"canvas_ribbon":{"enable":false,"size":300,"alpha":0.6,"zIndex":-1},"vendors":{"_internal":"lib","jquery":null,"fancybox":null,"fancybox_css":null,"fastclick":null,"lazyload":null,"velocity":null,"velocity_ui":null,"ua_parser":null,"fontawesome":null,"algolia_instant_js":null,"algolia_instant_css":null,"pace":null,"pace_css":null,"canvas_nest":null,"three":null,"three_waves":null,"canvas_lines":null,"canvas_sphere":null,"canvas_ribbon":null,"han":null,"needMoreShare2":null},"css":"css","js":"js","images":"images","version":"5.1.4"}}},"excerpt":"","more":""},{"title":"about","date":"2020-03-10T01:30:10.000Z","type":"about","layout":"about","_content":"\n\n# Education\n\n# Work\n\n\n* <b>Email</b>\n\n* <b>Github</b>\n\n* <b>LinkedIn</b>\n\n","source":"about/index.md","raw":"---\ntitle: about\ndate: 2020-03-09 21:30:10\ntype: \"about\"\nlayout: \"about\"\n---\n\n\n# Education\n\n# Work\n\n\n* <b>Email</b>\n\n* <b>Github</b>\n\n* <b>LinkedIn</b>\n\n","updated":"2020-03-15T20:30:49.185Z","path":"about/index.html","comments":1,"_id":"ckcxuqekt0002fkjxbn4xg5cn","content":"<h1 id=\"Education\"><a href=\"#Education\" class=\"headerlink\" title=\"Education\"></a>Education</h1><h1 id=\"Work\"><a href=\"#Work\" class=\"headerlink\" title=\"Work\"></a>Work</h1><ul>\n<li><p><b>Email</b></p>\n</li>\n<li><p><b>Github</b></p>\n</li>\n<li><p><b>LinkedIn</b></p>\n</li>\n</ul>\n","site":{"data":{"next":{"override":false,"favicon":{"small":"/uploads/favicon-16x16.png","medium":"/uploads/favicon-32x32.png","apple_touch_icon":"/uploads/apple-touch-icon.png","safari_pinned_tab":"/uploads/favicon.png","ms_browserconfig":"/uploads/browserconfig.xml"},"keywords":"Hexo, NexT","rss":null,"footer":{"icon":"user","copyright":null,"powered":true,"theme":{"enable":true,"version":true}},"canonical":true,"seo":false,"index_with_subtitle":false,"menu":{"home":"/ || home","archives":"/archives/ || archive"},"menu_icons":{"enable":true},"scheme":"Pisces","social_icons":{"enable":true,"icons_only":false,"transition":false},"links_icon":"link","links_title":"Links","links_layout":"block","toc":{"enable":true,"number":true,"wrap":false},"sidebar":{"position":"left","display":"post","offset":12,"b2t":false,"scrollpercent":false,"onmobile":false},"scroll_to_more":true,"save_scroll":false,"excerpt_description":true,"auto_excerpt":{"enable":false,"length":30},"read_more_btn":true,"post_meta":{"item_text":true,"created_at":true,"updated_at":false,"categories":true},"post_wordcount":{"item_text":true,"wordcount":false,"min2read":false,"totalcount":false,"separated_meta":true},"post_copyright":{"enable":false,"license":"CC BY-NC-SA 3.0","license_url":"https://creativecommons.org/licenses/by-nc-sa/3.0/"},"mobile_layout_economy":false,"android_chrome_color":"#222","custom_logo":{"enabled":false,"image":null},"marked":{"smartypants":false},"highlight_theme":"normal","font":{"enable":false,"host":null,"global":{"external":true,"family":"Lato","size":null},"headings":{"external":true,"family":null,"size":null},"posts":{"external":true,"family":null},"logo":{"external":true,"family":null,"size":null},"codes":{"external":true,"family":null,"size":null}},"mathjax":{"enable":false,"per_page":false,"cdn":"//cdn.bootcss.com/mathjax/2.7.1/latest.js?config=TeX-AMS-MML_HTMLorMML"},"han":false,"disqus":{"enable":false,"shortname":null,"count":true},"changyan":{"enable":false,"appid":null,"appkey":null},"valine":{"enable":false,"appid":null,"appkey":null,"notify":false,"verify":false,"placeholder":"Just go go","avatar":"mm","guest_info":"nick,mail,link","pageSize":10},"gitment":{"enable":false,"mint":true,"count":true,"lazy":false,"cleanly":false,"language":null,"github_user":null,"github_repo":null,"client_id":null,"client_secret":null,"proxy_gateway":null,"redirect_protocol":null},"needmoreshare2":{"enable":false,"postbottom":{"enable":false,"options":{"iconStyle":"box","boxForm":"horizontal","position":"bottomCenter","networks":"Weibo,Wechat,Douban,QQZone,Twitter,Facebook"}},"float":{"enable":false,"options":{"iconStyle":"box","boxForm":"horizontal","position":"middleRight","networks":"Weibo,Wechat,Douban,QQZone,Twitter,Facebook"}}},"duoshuo_info":{"ua_enable":true,"admin_enable":false,"user_id":0},"facebook_sdk":{"enable":false,"app_id":null,"fb_admin":null,"like_button":null,"webmaster":null},"facebook_comments_plugin":{"enable":false,"num_of_posts":10,"width":"100%","scheme":"light"},"vkontakte_api":{"enable":false,"app_id":null,"like":true,"comments":true,"num_of_posts":10},"rating":{"enable":false,"id":null,"color":"fc6423"},"leancloud_visitors":{"enable":false,"app_id":null,"app_key":null},"firestore":{"enable":false,"collection":"articles","apiKey":null,"projectId":null,"bluebird":false},"busuanzi_count":{"enable":false,"site_uv":true,"site_uv_header":"<i class=\"fa fa-user\"></i>","site_uv_footer":null,"site_pv":true,"site_pv_header":"<i class=\"fa fa-eye\"></i>","site_pv_footer":null,"page_pv":true,"page_pv_header":"<i class=\"fa fa-file-o\"></i>","page_pv_footer":null},"baidu_push":false,"calendar":{"enable":false,"calendar_id":"<required>","api_key":"<required>","orderBy":"startTime","offsetMax":24,"offsetMin":4,"timeZone":null,"showDeleted":false,"singleEvents":true,"maxResults":250},"algolia_search":{"enable":false,"hits":{"per_page":10},"labels":{"input_placeholder":"Search for Posts","hits_empty":"We didn't find any results for the search: ${query}","hits_stats":"${hits} results found in ${time} ms"}},"local_search":{"enable":false,"trigger":"auto","top_n_per_article":1},"exturl":false,"note":{"style":"simple","icons":false,"border_radius":3,"light_bg_offset":0},"label":true,"tabs":{"enable":true,"transition":{"tabs":false,"labels":true},"border_radius":0},"motion":{"enable":true,"async":false,"transition":{"post_block":"fadeIn","post_header":"slideDownIn","post_body":"slideDownIn","coll_header":"slideLeftIn","sidebar":"slideUpIn"}},"fancybox":true,"pace":false,"pace_theme":"pace-theme-minimal","canvas_nest":false,"three_waves":false,"canvas_lines":false,"canvas_sphere":false,"canvas_ribbon":{"enable":false,"size":300,"alpha":0.6,"zIndex":-1},"vendors":{"_internal":"lib","jquery":null,"fancybox":null,"fancybox_css":null,"fastclick":null,"lazyload":null,"velocity":null,"velocity_ui":null,"ua_parser":null,"fontawesome":null,"algolia_instant_js":null,"algolia_instant_css":null,"pace":null,"pace_css":null,"canvas_nest":null,"three":null,"three_waves":null,"canvas_lines":null,"canvas_sphere":null,"canvas_ribbon":null,"han":null,"needMoreShare2":null},"css":"css","js":"js","images":"images","version":"5.1.4"}}},"excerpt":"","more":"<h1 id=\"Education\"><a href=\"#Education\" class=\"headerlink\" title=\"Education\"></a>Education</h1><h1 id=\"Work\"><a href=\"#Work\" class=\"headerlink\" title=\"Work\"></a>Work</h1><ul>\n<li><p><b>Email</b></p>\n</li>\n<li><p><b>Github</b></p>\n</li>\n<li><p><b>LinkedIn</b></p>\n</li>\n</ul>\n"},{"title":"categories","type":"categories","layout":"categories","date":"2020-05-01T02:26:27.000Z","_content":"\ntitle: All tags\ndate: 2014-12-22 12:39:04\ntype: \"tags\"","source":"categories/index.md","raw":"---\ntitle: categories\ntype: categories\nlayout: categories\ndate: 2020-04-30 22:26:27\n---\n\ntitle: All tags\ndate: 2014-12-22 12:39:04\ntype: \"tags\"","updated":"2020-05-01T02:28:55.581Z","path":"categories/index.html","comments":1,"_id":"ckcxuqeky0004fkjxgrpjmbyi","content":"<p>title: All tags<br>date: 2014-12-22 12:39:04<br>type: &quot;tags&quot;</p>\n","site":{"data":{"next":{"override":false,"favicon":{"small":"/uploads/favicon-16x16.png","medium":"/uploads/favicon-32x32.png","apple_touch_icon":"/uploads/apple-touch-icon.png","safari_pinned_tab":"/uploads/favicon.png","ms_browserconfig":"/uploads/browserconfig.xml"},"keywords":"Hexo, NexT","rss":null,"footer":{"icon":"user","copyright":null,"powered":true,"theme":{"enable":true,"version":true}},"canonical":true,"seo":false,"index_with_subtitle":false,"menu":{"home":"/ || home","archives":"/archives/ || archive"},"menu_icons":{"enable":true},"scheme":"Pisces","social_icons":{"enable":true,"icons_only":false,"transition":false},"links_icon":"link","links_title":"Links","links_layout":"block","toc":{"enable":true,"number":true,"wrap":false},"sidebar":{"position":"left","display":"post","offset":12,"b2t":false,"scrollpercent":false,"onmobile":false},"scroll_to_more":true,"save_scroll":false,"excerpt_description":true,"auto_excerpt":{"enable":false,"length":30},"read_more_btn":true,"post_meta":{"item_text":true,"created_at":true,"updated_at":false,"categories":true},"post_wordcount":{"item_text":true,"wordcount":false,"min2read":false,"totalcount":false,"separated_meta":true},"post_copyright":{"enable":false,"license":"CC BY-NC-SA 3.0","license_url":"https://creativecommons.org/licenses/by-nc-sa/3.0/"},"mobile_layout_economy":false,"android_chrome_color":"#222","custom_logo":{"enabled":false,"image":null},"marked":{"smartypants":false},"highlight_theme":"normal","font":{"enable":false,"host":null,"global":{"external":true,"family":"Lato","size":null},"headings":{"external":true,"family":null,"size":null},"posts":{"external":true,"family":null},"logo":{"external":true,"family":null,"size":null},"codes":{"external":true,"family":null,"size":null}},"mathjax":{"enable":false,"per_page":false,"cdn":"//cdn.bootcss.com/mathjax/2.7.1/latest.js?config=TeX-AMS-MML_HTMLorMML"},"han":false,"disqus":{"enable":false,"shortname":null,"count":true},"changyan":{"enable":false,"appid":null,"appkey":null},"valine":{"enable":false,"appid":null,"appkey":null,"notify":false,"verify":false,"placeholder":"Just go go","avatar":"mm","guest_info":"nick,mail,link","pageSize":10},"gitment":{"enable":false,"mint":true,"count":true,"lazy":false,"cleanly":false,"language":null,"github_user":null,"github_repo":null,"client_id":null,"client_secret":null,"proxy_gateway":null,"redirect_protocol":null},"needmoreshare2":{"enable":false,"postbottom":{"enable":false,"options":{"iconStyle":"box","boxForm":"horizontal","position":"bottomCenter","networks":"Weibo,Wechat,Douban,QQZone,Twitter,Facebook"}},"float":{"enable":false,"options":{"iconStyle":"box","boxForm":"horizontal","position":"middleRight","networks":"Weibo,Wechat,Douban,QQZone,Twitter,Facebook"}}},"duoshuo_info":{"ua_enable":true,"admin_enable":false,"user_id":0},"facebook_sdk":{"enable":false,"app_id":null,"fb_admin":null,"like_button":null,"webmaster":null},"facebook_comments_plugin":{"enable":false,"num_of_posts":10,"width":"100%","scheme":"light"},"vkontakte_api":{"enable":false,"app_id":null,"like":true,"comments":true,"num_of_posts":10},"rating":{"enable":false,"id":null,"color":"fc6423"},"leancloud_visitors":{"enable":false,"app_id":null,"app_key":null},"firestore":{"enable":false,"collection":"articles","apiKey":null,"projectId":null,"bluebird":false},"busuanzi_count":{"enable":false,"site_uv":true,"site_uv_header":"<i class=\"fa fa-user\"></i>","site_uv_footer":null,"site_pv":true,"site_pv_header":"<i class=\"fa fa-eye\"></i>","site_pv_footer":null,"page_pv":true,"page_pv_header":"<i class=\"fa fa-file-o\"></i>","page_pv_footer":null},"baidu_push":false,"calendar":{"enable":false,"calendar_id":"<required>","api_key":"<required>","orderBy":"startTime","offsetMax":24,"offsetMin":4,"timeZone":null,"showDeleted":false,"singleEvents":true,"maxResults":250},"algolia_search":{"enable":false,"hits":{"per_page":10},"labels":{"input_placeholder":"Search for Posts","hits_empty":"We didn't find any results for the search: ${query}","hits_stats":"${hits} results found in ${time} ms"}},"local_search":{"enable":false,"trigger":"auto","top_n_per_article":1},"exturl":false,"note":{"style":"simple","icons":false,"border_radius":3,"light_bg_offset":0},"label":true,"tabs":{"enable":true,"transition":{"tabs":false,"labels":true},"border_radius":0},"motion":{"enable":true,"async":false,"transition":{"post_block":"fadeIn","post_header":"slideDownIn","post_body":"slideDownIn","coll_header":"slideLeftIn","sidebar":"slideUpIn"}},"fancybox":true,"pace":false,"pace_theme":"pace-theme-minimal","canvas_nest":false,"three_waves":false,"canvas_lines":false,"canvas_sphere":false,"canvas_ribbon":{"enable":false,"size":300,"alpha":0.6,"zIndex":-1},"vendors":{"_internal":"lib","jquery":null,"fancybox":null,"fancybox_css":null,"fastclick":null,"lazyload":null,"velocity":null,"velocity_ui":null,"ua_parser":null,"fontawesome":null,"algolia_instant_js":null,"algolia_instant_css":null,"pace":null,"pace_css":null,"canvas_nest":null,"three":null,"three_waves":null,"canvas_lines":null,"canvas_sphere":null,"canvas_ribbon":null,"han":null,"needMoreShare2":null},"css":"css","js":"js","images":"images","version":"5.1.4"}}},"excerpt":"","more":"<p>title: All tags<br>date: 2014-12-22 12:39:04<br>type: &quot;tags&quot;</p>\n"},{"title":"archives","date":"2020-03-15T20:39:20.000Z","type":"archives","layout":"archives","_content":"","source":"archives/index.md","raw":"---\ntitle: archives\ndate: 2020-03-15 16:39:20\ntype: \"archives\"\nlayout: \"archives\"\n---","updated":"2020-03-15T18:41:37.012Z","path":"archives/index.html","comments":1,"_id":"ckcxuqele0008fkjxe7z591qc","content":"","site":{"data":{"next":{"override":false,"favicon":{"small":"/uploads/favicon-16x16.png","medium":"/uploads/favicon-32x32.png","apple_touch_icon":"/uploads/apple-touch-icon.png","safari_pinned_tab":"/uploads/favicon.png","ms_browserconfig":"/uploads/browserconfig.xml"},"keywords":"Hexo, NexT","rss":null,"footer":{"icon":"user","copyright":null,"powered":true,"theme":{"enable":true,"version":true}},"canonical":true,"seo":false,"index_with_subtitle":false,"menu":{"home":"/ || home","archives":"/archives/ || archive"},"menu_icons":{"enable":true},"scheme":"Pisces","social_icons":{"enable":true,"icons_only":false,"transition":false},"links_icon":"link","links_title":"Links","links_layout":"block","toc":{"enable":true,"number":true,"wrap":false},"sidebar":{"position":"left","display":"post","offset":12,"b2t":false,"scrollpercent":false,"onmobile":false},"scroll_to_more":true,"save_scroll":false,"excerpt_description":true,"auto_excerpt":{"enable":false,"length":30},"read_more_btn":true,"post_meta":{"item_text":true,"created_at":true,"updated_at":false,"categories":true},"post_wordcount":{"item_text":true,"wordcount":false,"min2read":false,"totalcount":false,"separated_meta":true},"post_copyright":{"enable":false,"license":"CC BY-NC-SA 3.0","license_url":"https://creativecommons.org/licenses/by-nc-sa/3.0/"},"mobile_layout_economy":false,"android_chrome_color":"#222","custom_logo":{"enabled":false,"image":null},"marked":{"smartypants":false},"highlight_theme":"normal","font":{"enable":false,"host":null,"global":{"external":true,"family":"Lato","size":null},"headings":{"external":true,"family":null,"size":null},"posts":{"external":true,"family":null},"logo":{"external":true,"family":null,"size":null},"codes":{"external":true,"family":null,"size":null}},"mathjax":{"enable":false,"per_page":false,"cdn":"//cdn.bootcss.com/mathjax/2.7.1/latest.js?config=TeX-AMS-MML_HTMLorMML"},"han":false,"disqus":{"enable":false,"shortname":null,"count":true},"changyan":{"enable":false,"appid":null,"appkey":null},"valine":{"enable":false,"appid":null,"appkey":null,"notify":false,"verify":false,"placeholder":"Just go go","avatar":"mm","guest_info":"nick,mail,link","pageSize":10},"gitment":{"enable":false,"mint":true,"count":true,"lazy":false,"cleanly":false,"language":null,"github_user":null,"github_repo":null,"client_id":null,"client_secret":null,"proxy_gateway":null,"redirect_protocol":null},"needmoreshare2":{"enable":false,"postbottom":{"enable":false,"options":{"iconStyle":"box","boxForm":"horizontal","position":"bottomCenter","networks":"Weibo,Wechat,Douban,QQZone,Twitter,Facebook"}},"float":{"enable":false,"options":{"iconStyle":"box","boxForm":"horizontal","position":"middleRight","networks":"Weibo,Wechat,Douban,QQZone,Twitter,Facebook"}}},"duoshuo_info":{"ua_enable":true,"admin_enable":false,"user_id":0},"facebook_sdk":{"enable":false,"app_id":null,"fb_admin":null,"like_button":null,"webmaster":null},"facebook_comments_plugin":{"enable":false,"num_of_posts":10,"width":"100%","scheme":"light"},"vkontakte_api":{"enable":false,"app_id":null,"like":true,"comments":true,"num_of_posts":10},"rating":{"enable":false,"id":null,"color":"fc6423"},"leancloud_visitors":{"enable":false,"app_id":null,"app_key":null},"firestore":{"enable":false,"collection":"articles","apiKey":null,"projectId":null,"bluebird":false},"busuanzi_count":{"enable":false,"site_uv":true,"site_uv_header":"<i class=\"fa fa-user\"></i>","site_uv_footer":null,"site_pv":true,"site_pv_header":"<i class=\"fa fa-eye\"></i>","site_pv_footer":null,"page_pv":true,"page_pv_header":"<i class=\"fa fa-file-o\"></i>","page_pv_footer":null},"baidu_push":false,"calendar":{"enable":false,"calendar_id":"<required>","api_key":"<required>","orderBy":"startTime","offsetMax":24,"offsetMin":4,"timeZone":null,"showDeleted":false,"singleEvents":true,"maxResults":250},"algolia_search":{"enable":false,"hits":{"per_page":10},"labels":{"input_placeholder":"Search for Posts","hits_empty":"We didn't find any results for the search: ${query}","hits_stats":"${hits} results found in ${time} ms"}},"local_search":{"enable":false,"trigger":"auto","top_n_per_article":1},"exturl":false,"note":{"style":"simple","icons":false,"border_radius":3,"light_bg_offset":0},"label":true,"tabs":{"enable":true,"transition":{"tabs":false,"labels":true},"border_radius":0},"motion":{"enable":true,"async":false,"transition":{"post_block":"fadeIn","post_header":"slideDownIn","post_body":"slideDownIn","coll_header":"slideLeftIn","sidebar":"slideUpIn"}},"fancybox":true,"pace":false,"pace_theme":"pace-theme-minimal","canvas_nest":false,"three_waves":false,"canvas_lines":false,"canvas_sphere":false,"canvas_ribbon":{"enable":false,"size":300,"alpha":0.6,"zIndex":-1},"vendors":{"_internal":"lib","jquery":null,"fancybox":null,"fancybox_css":null,"fastclick":null,"lazyload":null,"velocity":null,"velocity_ui":null,"ua_parser":null,"fontawesome":null,"algolia_instant_js":null,"algolia_instant_css":null,"pace":null,"pace_css":null,"canvas_nest":null,"three":null,"three_waves":null,"canvas_lines":null,"canvas_sphere":null,"canvas_ribbon":null,"han":null,"needMoreShare2":null},"css":"css","js":"js","images":"images","version":"5.1.4"}}},"excerpt":"","more":""},{"title":"tags","type":"tags","layout":"tags","date":"2020-05-01T02:26:46.000Z","_content":"","source":"tags/index.md","raw":"---\ntitle: tags\ntype: tags\nlayout: tags\ndate: 2020-04-30 22:26:46\n---","updated":"2020-05-01T02:29:30.333Z","path":"tags/index.html","comments":1,"_id":"ckcxuqelx000afkjxyjqrbp62","content":"","site":{"data":{"next":{"override":false,"favicon":{"small":"/uploads/favicon-16x16.png","medium":"/uploads/favicon-32x32.png","apple_touch_icon":"/uploads/apple-touch-icon.png","safari_pinned_tab":"/uploads/favicon.png","ms_browserconfig":"/uploads/browserconfig.xml"},"keywords":"Hexo, NexT","rss":null,"footer":{"icon":"user","copyright":null,"powered":true,"theme":{"enable":true,"version":true}},"canonical":true,"seo":false,"index_with_subtitle":false,"menu":{"home":"/ || home","archives":"/archives/ || archive"},"menu_icons":{"enable":true},"scheme":"Pisces","social_icons":{"enable":true,"icons_only":false,"transition":false},"links_icon":"link","links_title":"Links","links_layout":"block","toc":{"enable":true,"number":true,"wrap":false},"sidebar":{"position":"left","display":"post","offset":12,"b2t":false,"scrollpercent":false,"onmobile":false},"scroll_to_more":true,"save_scroll":false,"excerpt_description":true,"auto_excerpt":{"enable":false,"length":30},"read_more_btn":true,"post_meta":{"item_text":true,"created_at":true,"updated_at":false,"categories":true},"post_wordcount":{"item_text":true,"wordcount":false,"min2read":false,"totalcount":false,"separated_meta":true},"post_copyright":{"enable":false,"license":"CC BY-NC-SA 3.0","license_url":"https://creativecommons.org/licenses/by-nc-sa/3.0/"},"mobile_layout_economy":false,"android_chrome_color":"#222","custom_logo":{"enabled":false,"image":null},"marked":{"smartypants":false},"highlight_theme":"normal","font":{"enable":false,"host":null,"global":{"external":true,"family":"Lato","size":null},"headings":{"external":true,"family":null,"size":null},"posts":{"external":true,"family":null},"logo":{"external":true,"family":null,"size":null},"codes":{"external":true,"family":null,"size":null}},"mathjax":{"enable":false,"per_page":false,"cdn":"//cdn.bootcss.com/mathjax/2.7.1/latest.js?config=TeX-AMS-MML_HTMLorMML"},"han":false,"disqus":{"enable":false,"shortname":null,"count":true},"changyan":{"enable":false,"appid":null,"appkey":null},"valine":{"enable":false,"appid":null,"appkey":null,"notify":false,"verify":false,"placeholder":"Just go go","avatar":"mm","guest_info":"nick,mail,link","pageSize":10},"gitment":{"enable":false,"mint":true,"count":true,"lazy":false,"cleanly":false,"language":null,"github_user":null,"github_repo":null,"client_id":null,"client_secret":null,"proxy_gateway":null,"redirect_protocol":null},"needmoreshare2":{"enable":false,"postbottom":{"enable":false,"options":{"iconStyle":"box","boxForm":"horizontal","position":"bottomCenter","networks":"Weibo,Wechat,Douban,QQZone,Twitter,Facebook"}},"float":{"enable":false,"options":{"iconStyle":"box","boxForm":"horizontal","position":"middleRight","networks":"Weibo,Wechat,Douban,QQZone,Twitter,Facebook"}}},"duoshuo_info":{"ua_enable":true,"admin_enable":false,"user_id":0},"facebook_sdk":{"enable":false,"app_id":null,"fb_admin":null,"like_button":null,"webmaster":null},"facebook_comments_plugin":{"enable":false,"num_of_posts":10,"width":"100%","scheme":"light"},"vkontakte_api":{"enable":false,"app_id":null,"like":true,"comments":true,"num_of_posts":10},"rating":{"enable":false,"id":null,"color":"fc6423"},"leancloud_visitors":{"enable":false,"app_id":null,"app_key":null},"firestore":{"enable":false,"collection":"articles","apiKey":null,"projectId":null,"bluebird":false},"busuanzi_count":{"enable":false,"site_uv":true,"site_uv_header":"<i class=\"fa fa-user\"></i>","site_uv_footer":null,"site_pv":true,"site_pv_header":"<i class=\"fa fa-eye\"></i>","site_pv_footer":null,"page_pv":true,"page_pv_header":"<i class=\"fa fa-file-o\"></i>","page_pv_footer":null},"baidu_push":false,"calendar":{"enable":false,"calendar_id":"<required>","api_key":"<required>","orderBy":"startTime","offsetMax":24,"offsetMin":4,"timeZone":null,"showDeleted":false,"singleEvents":true,"maxResults":250},"algolia_search":{"enable":false,"hits":{"per_page":10},"labels":{"input_placeholder":"Search for Posts","hits_empty":"We didn't find any results for the search: ${query}","hits_stats":"${hits} results found in ${time} ms"}},"local_search":{"enable":false,"trigger":"auto","top_n_per_article":1},"exturl":false,"note":{"style":"simple","icons":false,"border_radius":3,"light_bg_offset":0},"label":true,"tabs":{"enable":true,"transition":{"tabs":false,"labels":true},"border_radius":0},"motion":{"enable":true,"async":false,"transition":{"post_block":"fadeIn","post_header":"slideDownIn","post_body":"slideDownIn","coll_header":"slideLeftIn","sidebar":"slideUpIn"}},"fancybox":true,"pace":false,"pace_theme":"pace-theme-minimal","canvas_nest":false,"three_waves":false,"canvas_lines":false,"canvas_sphere":false,"canvas_ribbon":{"enable":false,"size":300,"alpha":0.6,"zIndex":-1},"vendors":{"_internal":"lib","jquery":null,"fancybox":null,"fancybox_css":null,"fastclick":null,"lazyload":null,"velocity":null,"velocity_ui":null,"ua_parser":null,"fontawesome":null,"algolia_instant_js":null,"algolia_instant_css":null,"pace":null,"pace_css":null,"canvas_nest":null,"three":null,"three_waves":null,"canvas_lines":null,"canvas_sphere":null,"canvas_ribbon":null,"han":null,"needMoreShare2":null},"css":"css","js":"js","images":"images","version":"5.1.4"}}},"excerpt":"","more":""}],"Post":[{"title":"Advanced Programming in Unix - Chapter 1","summary":"Reading notes for Chapter 1 of &laquo;Advanced Programming in Unix&raquo;","top":false,"cover":false,"date":"2020-03-29T18:58:45.000Z","toc":true,"mathjax":true,"password":null,"_content":"\n# UNIX System Overview\n\n\n\n## UNIX Architecture\nan operating system can be defined as the software that controls the hardware resources of the computer and provides an environment under which programs can run. We call it the kernel.\n<!--more-->\n\n![Unix Architecture](unix_architecture.png)\n\nInterface to the kernel is a layer of software called the system calls.\nLibraries of common functions are built on top of the system call interface.\nThe shell is a special application that provides an interface for running other applications.\n\n\n\n## Logging In\n### Login Name\nsar: x: 205:105:Stephen Rago:/home/sar:/bin/ksh\nloginName:encryptedPwd:userID:groupID:commentField:homeDirectory:shellProgram\n\nThe system knows which shell to execute based on the last field.\n### Shells\nA shell is a command-line interpreter that reads user input and executes commands.\n\n![Common Shell](common_shell.png)\n\n## Files and Directories\n### File System\nA directory is a file that contains directory entries. \n### Pathname\nA pathname that begins with a slash is called an absolute pathname; otherwise, it's called a relative pathname. Relative pathnames refer to files relative to the current directory.\n\n\n## Input and Output\n### Unbuffered I/O\nUnbuffered I/O is provided by the function `open`, `read`, `write`, `lseek` and `close`\t\n### Standard I/O\nThis prevents us from worrying about choosing optimal buffer sizes. \nThe most common function is `printf`.\n`fgets` reads an entire line\n`getc` reads one character at a time\n`putc` writes one character at a time\n\n## Programs and Process Control\n\n### Process Control\nThere are three primary functions for process control: `fork`, `exec` and `waitpid`\n### Threads and Thread IDs\nThread of control - one set of machine instructions executing at a time.\nAll the threads within a process share the same address space, file descriptors, stacks and process-related attributes.\n\n\n## Error Handling\n\nWhen an error occurs in UNIX system functions, a negative value is returned and an integer `errno` is set to a value that gives additional information.\n**Note**: \n1. The value of `errno` is never cleared even if there is no error occurred. Therefore we should make sure it's only returned when a function indicates that an error occurred. \n2. The value of `errno` is never set to 0 by any of the functions.\n\nErrors could be fatal (non-recoverable) and nonfatal (recoverable)\n\n## User Identification\n\nStarting with 4.2 BSD, most of UNIX systems allow a user to belong to up to 16 additional user groups.\n\n## Time Values\n\nUNIX system maintains three values for a process: \n\t1. Clock time\n\t2. User CPU time\n\t3. System CPU time\nThe user CPU time is the CPU time attributed to user instructions. The system CPU time is the CPU time attributed to the kernel when it executes on behalf of the process.\n\n## System calls and library functions\nWe should realize, that we can replace the library functions, if desired, whereas the system calls usually cannot be replaced\n\n![System Call and Library Call](systemCallAndLibraryCall.png)\nSystem calls usually provide a minimal interface, whereas library functions often provide more elaborate functionality\n\n\n\n\n","source":"_posts/Advanced-Programming-in-Unix-Chapter-1.md","raw":"---\ntitle: Advanced Programming in Unix - Chapter 1\nsummary: Reading notes for Chapter 1 of &laquo;Advanced Programming in Unix&raquo;\ncategories: Tech\ntags:\n    - Operating System\ntop: false\ncover: false\ndate: 2020-03-29 14:58:45\ntoc: true\nmathjax: true\npassword:\n---\n\n# UNIX System Overview\n\n\n\n## UNIX Architecture\nan operating system can be defined as the software that controls the hardware resources of the computer and provides an environment under which programs can run. We call it the kernel.\n<!--more-->\n\n![Unix Architecture](unix_architecture.png)\n\nInterface to the kernel is a layer of software called the system calls.\nLibraries of common functions are built on top of the system call interface.\nThe shell is a special application that provides an interface for running other applications.\n\n\n\n## Logging In\n### Login Name\nsar: x: 205:105:Stephen Rago:/home/sar:/bin/ksh\nloginName:encryptedPwd:userID:groupID:commentField:homeDirectory:shellProgram\n\nThe system knows which shell to execute based on the last field.\n### Shells\nA shell is a command-line interpreter that reads user input and executes commands.\n\n![Common Shell](common_shell.png)\n\n## Files and Directories\n### File System\nA directory is a file that contains directory entries. \n### Pathname\nA pathname that begins with a slash is called an absolute pathname; otherwise, it's called a relative pathname. Relative pathnames refer to files relative to the current directory.\n\n\n## Input and Output\n### Unbuffered I/O\nUnbuffered I/O is provided by the function `open`, `read`, `write`, `lseek` and `close`\t\n### Standard I/O\nThis prevents us from worrying about choosing optimal buffer sizes. \nThe most common function is `printf`.\n`fgets` reads an entire line\n`getc` reads one character at a time\n`putc` writes one character at a time\n\n## Programs and Process Control\n\n### Process Control\nThere are three primary functions for process control: `fork`, `exec` and `waitpid`\n### Threads and Thread IDs\nThread of control - one set of machine instructions executing at a time.\nAll the threads within a process share the same address space, file descriptors, stacks and process-related attributes.\n\n\n## Error Handling\n\nWhen an error occurs in UNIX system functions, a negative value is returned and an integer `errno` is set to a value that gives additional information.\n**Note**: \n1. The value of `errno` is never cleared even if there is no error occurred. Therefore we should make sure it's only returned when a function indicates that an error occurred. \n2. The value of `errno` is never set to 0 by any of the functions.\n\nErrors could be fatal (non-recoverable) and nonfatal (recoverable)\n\n## User Identification\n\nStarting with 4.2 BSD, most of UNIX systems allow a user to belong to up to 16 additional user groups.\n\n## Time Values\n\nUNIX system maintains three values for a process: \n\t1. Clock time\n\t2. User CPU time\n\t3. System CPU time\nThe user CPU time is the CPU time attributed to user instructions. The system CPU time is the CPU time attributed to the kernel when it executes on behalf of the process.\n\n## System calls and library functions\nWe should realize, that we can replace the library functions, if desired, whereas the system calls usually cannot be replaced\n\n![System Call and Library Call](systemCallAndLibraryCall.png)\nSystem calls usually provide a minimal interface, whereas library functions often provide more elaborate functionality\n\n\n\n\n","slug":"Advanced-Programming-in-Unix-Chapter-1","published":1,"updated":"2020-05-08T19:13:42.323Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ckcxuqekf0001fkjxqzebspmq","content":"<h1 id=\"UNIX-System-Overview\"><a href=\"#UNIX-System-Overview\" class=\"headerlink\" title=\"UNIX System Overview\"></a>UNIX System Overview</h1><h2 id=\"UNIX-Architecture\"><a href=\"#UNIX-Architecture\" class=\"headerlink\" title=\"UNIX Architecture\"></a>UNIX Architecture</h2><p>an operating system can be defined as the software that controls the hardware resources of the computer and provides an environment under which programs can run. We call it the kernel.</p>\n<a id=\"more\"></a>\n\n<p><img src=\"unix_architecture.png\" alt=\"Unix Architecture\"></p>\n<p>Interface to the kernel is a layer of software called the system calls.<br>Libraries of common functions are built on top of the system call interface.<br>The shell is a special application that provides an interface for running other applications.</p>\n<h2 id=\"Logging-In\"><a href=\"#Logging-In\" class=\"headerlink\" title=\"Logging In\"></a>Logging In</h2><h3 id=\"Login-Name\"><a href=\"#Login-Name\" class=\"headerlink\" title=\"Login Name\"></a>Login Name</h3><p>sar: x: 205:105:Stephen Rago:/home/sar:/bin/ksh<br>loginName:encryptedPwd:userID:groupID:commentField:homeDirectory:shellProgram</p>\n<p>The system knows which shell to execute based on the last field.</p>\n<h3 id=\"Shells\"><a href=\"#Shells\" class=\"headerlink\" title=\"Shells\"></a>Shells</h3><p>A shell is a command-line interpreter that reads user input and executes commands.</p>\n<p><img src=\"common_shell.png\" alt=\"Common Shell\"></p>\n<h2 id=\"Files-and-Directories\"><a href=\"#Files-and-Directories\" class=\"headerlink\" title=\"Files and Directories\"></a>Files and Directories</h2><h3 id=\"File-System\"><a href=\"#File-System\" class=\"headerlink\" title=\"File System\"></a>File System</h3><p>A directory is a file that contains directory entries. </p>\n<h3 id=\"Pathname\"><a href=\"#Pathname\" class=\"headerlink\" title=\"Pathname\"></a>Pathname</h3><p>A pathname that begins with a slash is called an absolute pathname; otherwise, it&#39;s called a relative pathname. Relative pathnames refer to files relative to the current directory.</p>\n<h2 id=\"Input-and-Output\"><a href=\"#Input-and-Output\" class=\"headerlink\" title=\"Input and Output\"></a>Input and Output</h2><h3 id=\"Unbuffered-I-O\"><a href=\"#Unbuffered-I-O\" class=\"headerlink\" title=\"Unbuffered I/O\"></a>Unbuffered I/O</h3><p>Unbuffered I/O is provided by the function <code>open</code>, <code>read</code>, <code>write</code>, <code>lseek</code> and <code>close</code>    </p>\n<h3 id=\"Standard-I-O\"><a href=\"#Standard-I-O\" class=\"headerlink\" title=\"Standard I/O\"></a>Standard I/O</h3><p>This prevents us from worrying about choosing optimal buffer sizes.<br>The most common function is <code>printf</code>.<br><code>fgets</code> reads an entire line<br><code>getc</code> reads one character at a time<br><code>putc</code> writes one character at a time</p>\n<h2 id=\"Programs-and-Process-Control\"><a href=\"#Programs-and-Process-Control\" class=\"headerlink\" title=\"Programs and Process Control\"></a>Programs and Process Control</h2><h3 id=\"Process-Control\"><a href=\"#Process-Control\" class=\"headerlink\" title=\"Process Control\"></a>Process Control</h3><p>There are three primary functions for process control: <code>fork</code>, <code>exec</code> and <code>waitpid</code></p>\n<h3 id=\"Threads-and-Thread-IDs\"><a href=\"#Threads-and-Thread-IDs\" class=\"headerlink\" title=\"Threads and Thread IDs\"></a>Threads and Thread IDs</h3><p>Thread of control - one set of machine instructions executing at a time.<br>All the threads within a process share the same address space, file descriptors, stacks and process-related attributes.</p>\n<h2 id=\"Error-Handling\"><a href=\"#Error-Handling\" class=\"headerlink\" title=\"Error Handling\"></a>Error Handling</h2><p>When an error occurs in UNIX system functions, a negative value is returned and an integer <code>errno</code> is set to a value that gives additional information.<br><strong>Note</strong>: </p>\n<ol>\n<li>The value of <code>errno</code> is never cleared even if there is no error occurred. Therefore we should make sure it&#39;s only returned when a function indicates that an error occurred. </li>\n<li>The value of <code>errno</code> is never set to 0 by any of the functions.</li>\n</ol>\n<p>Errors could be fatal (non-recoverable) and nonfatal (recoverable)</p>\n<h2 id=\"User-Identification\"><a href=\"#User-Identification\" class=\"headerlink\" title=\"User Identification\"></a>User Identification</h2><p>Starting with 4.2 BSD, most of UNIX systems allow a user to belong to up to 16 additional user groups.</p>\n<h2 id=\"Time-Values\"><a href=\"#Time-Values\" class=\"headerlink\" title=\"Time Values\"></a>Time Values</h2><p>UNIX system maintains three values for a process:<br>    1. Clock time<br>    2. User CPU time<br>    3. System CPU time<br>The user CPU time is the CPU time attributed to user instructions. The system CPU time is the CPU time attributed to the kernel when it executes on behalf of the process.</p>\n<h2 id=\"System-calls-and-library-functions\"><a href=\"#System-calls-and-library-functions\" class=\"headerlink\" title=\"System calls and library functions\"></a>System calls and library functions</h2><p>We should realize, that we can replace the library functions, if desired, whereas the system calls usually cannot be replaced</p>\n<p><img src=\"systemCallAndLibraryCall.png\" alt=\"System Call and Library Call\"><br>System calls usually provide a minimal interface, whereas library functions often provide more elaborate functionality</p>\n","site":{"data":{"next":{"override":false,"favicon":{"small":"/uploads/favicon-16x16.png","medium":"/uploads/favicon-32x32.png","apple_touch_icon":"/uploads/apple-touch-icon.png","safari_pinned_tab":"/uploads/favicon.png","ms_browserconfig":"/uploads/browserconfig.xml"},"keywords":"Hexo, NexT","rss":null,"footer":{"icon":"user","copyright":null,"powered":true,"theme":{"enable":true,"version":true}},"canonical":true,"seo":false,"index_with_subtitle":false,"menu":{"home":"/ || home","archives":"/archives/ || archive"},"menu_icons":{"enable":true},"scheme":"Pisces","social_icons":{"enable":true,"icons_only":false,"transition":false},"links_icon":"link","links_title":"Links","links_layout":"block","toc":{"enable":true,"number":true,"wrap":false},"sidebar":{"position":"left","display":"post","offset":12,"b2t":false,"scrollpercent":false,"onmobile":false},"scroll_to_more":true,"save_scroll":false,"excerpt_description":true,"auto_excerpt":{"enable":false,"length":30},"read_more_btn":true,"post_meta":{"item_text":true,"created_at":true,"updated_at":false,"categories":true},"post_wordcount":{"item_text":true,"wordcount":false,"min2read":false,"totalcount":false,"separated_meta":true},"post_copyright":{"enable":false,"license":"CC BY-NC-SA 3.0","license_url":"https://creativecommons.org/licenses/by-nc-sa/3.0/"},"mobile_layout_economy":false,"android_chrome_color":"#222","custom_logo":{"enabled":false,"image":null},"marked":{"smartypants":false},"highlight_theme":"normal","font":{"enable":false,"host":null,"global":{"external":true,"family":"Lato","size":null},"headings":{"external":true,"family":null,"size":null},"posts":{"external":true,"family":null},"logo":{"external":true,"family":null,"size":null},"codes":{"external":true,"family":null,"size":null}},"mathjax":{"enable":false,"per_page":false,"cdn":"//cdn.bootcss.com/mathjax/2.7.1/latest.js?config=TeX-AMS-MML_HTMLorMML"},"han":false,"disqus":{"enable":false,"shortname":null,"count":true},"changyan":{"enable":false,"appid":null,"appkey":null},"valine":{"enable":false,"appid":null,"appkey":null,"notify":false,"verify":false,"placeholder":"Just go go","avatar":"mm","guest_info":"nick,mail,link","pageSize":10},"gitment":{"enable":false,"mint":true,"count":true,"lazy":false,"cleanly":false,"language":null,"github_user":null,"github_repo":null,"client_id":null,"client_secret":null,"proxy_gateway":null,"redirect_protocol":null},"needmoreshare2":{"enable":false,"postbottom":{"enable":false,"options":{"iconStyle":"box","boxForm":"horizontal","position":"bottomCenter","networks":"Weibo,Wechat,Douban,QQZone,Twitter,Facebook"}},"float":{"enable":false,"options":{"iconStyle":"box","boxForm":"horizontal","position":"middleRight","networks":"Weibo,Wechat,Douban,QQZone,Twitter,Facebook"}}},"duoshuo_info":{"ua_enable":true,"admin_enable":false,"user_id":0},"facebook_sdk":{"enable":false,"app_id":null,"fb_admin":null,"like_button":null,"webmaster":null},"facebook_comments_plugin":{"enable":false,"num_of_posts":10,"width":"100%","scheme":"light"},"vkontakte_api":{"enable":false,"app_id":null,"like":true,"comments":true,"num_of_posts":10},"rating":{"enable":false,"id":null,"color":"fc6423"},"leancloud_visitors":{"enable":false,"app_id":null,"app_key":null},"firestore":{"enable":false,"collection":"articles","apiKey":null,"projectId":null,"bluebird":false},"busuanzi_count":{"enable":false,"site_uv":true,"site_uv_header":"<i class=\"fa fa-user\"></i>","site_uv_footer":null,"site_pv":true,"site_pv_header":"<i class=\"fa fa-eye\"></i>","site_pv_footer":null,"page_pv":true,"page_pv_header":"<i class=\"fa fa-file-o\"></i>","page_pv_footer":null},"baidu_push":false,"calendar":{"enable":false,"calendar_id":"<required>","api_key":"<required>","orderBy":"startTime","offsetMax":24,"offsetMin":4,"timeZone":null,"showDeleted":false,"singleEvents":true,"maxResults":250},"algolia_search":{"enable":false,"hits":{"per_page":10},"labels":{"input_placeholder":"Search for Posts","hits_empty":"We didn't find any results for the search: ${query}","hits_stats":"${hits} results found in ${time} ms"}},"local_search":{"enable":false,"trigger":"auto","top_n_per_article":1},"exturl":false,"note":{"style":"simple","icons":false,"border_radius":3,"light_bg_offset":0},"label":true,"tabs":{"enable":true,"transition":{"tabs":false,"labels":true},"border_radius":0},"motion":{"enable":true,"async":false,"transition":{"post_block":"fadeIn","post_header":"slideDownIn","post_body":"slideDownIn","coll_header":"slideLeftIn","sidebar":"slideUpIn"}},"fancybox":true,"pace":false,"pace_theme":"pace-theme-minimal","canvas_nest":false,"three_waves":false,"canvas_lines":false,"canvas_sphere":false,"canvas_ribbon":{"enable":false,"size":300,"alpha":0.6,"zIndex":-1},"vendors":{"_internal":"lib","jquery":null,"fancybox":null,"fancybox_css":null,"fastclick":null,"lazyload":null,"velocity":null,"velocity_ui":null,"ua_parser":null,"fontawesome":null,"algolia_instant_js":null,"algolia_instant_css":null,"pace":null,"pace_css":null,"canvas_nest":null,"three":null,"three_waves":null,"canvas_lines":null,"canvas_sphere":null,"canvas_ribbon":null,"han":null,"needMoreShare2":null},"css":"css","js":"js","images":"images","version":"5.1.4"}}},"excerpt":"<h1 id=\"UNIX-System-Overview\"><a href=\"#UNIX-System-Overview\" class=\"headerlink\" title=\"UNIX System Overview\"></a>UNIX System Overview</h1><h2 id=\"UNIX-Architecture\"><a href=\"#UNIX-Architecture\" class=\"headerlink\" title=\"UNIX Architecture\"></a>UNIX Architecture</h2><p>an operating system can be defined as the software that controls the hardware resources of the computer and provides an environment under which programs can run. We call it the kernel.</p>","more":"<p><img src=\"unix_architecture.png\" alt=\"Unix Architecture\"></p>\n<p>Interface to the kernel is a layer of software called the system calls.<br>Libraries of common functions are built on top of the system call interface.<br>The shell is a special application that provides an interface for running other applications.</p>\n<h2 id=\"Logging-In\"><a href=\"#Logging-In\" class=\"headerlink\" title=\"Logging In\"></a>Logging In</h2><h3 id=\"Login-Name\"><a href=\"#Login-Name\" class=\"headerlink\" title=\"Login Name\"></a>Login Name</h3><p>sar: x: 205:105:Stephen Rago:/home/sar:/bin/ksh<br>loginName:encryptedPwd:userID:groupID:commentField:homeDirectory:shellProgram</p>\n<p>The system knows which shell to execute based on the last field.</p>\n<h3 id=\"Shells\"><a href=\"#Shells\" class=\"headerlink\" title=\"Shells\"></a>Shells</h3><p>A shell is a command-line interpreter that reads user input and executes commands.</p>\n<p><img src=\"common_shell.png\" alt=\"Common Shell\"></p>\n<h2 id=\"Files-and-Directories\"><a href=\"#Files-and-Directories\" class=\"headerlink\" title=\"Files and Directories\"></a>Files and Directories</h2><h3 id=\"File-System\"><a href=\"#File-System\" class=\"headerlink\" title=\"File System\"></a>File System</h3><p>A directory is a file that contains directory entries. </p>\n<h3 id=\"Pathname\"><a href=\"#Pathname\" class=\"headerlink\" title=\"Pathname\"></a>Pathname</h3><p>A pathname that begins with a slash is called an absolute pathname; otherwise, it&#39;s called a relative pathname. Relative pathnames refer to files relative to the current directory.</p>\n<h2 id=\"Input-and-Output\"><a href=\"#Input-and-Output\" class=\"headerlink\" title=\"Input and Output\"></a>Input and Output</h2><h3 id=\"Unbuffered-I-O\"><a href=\"#Unbuffered-I-O\" class=\"headerlink\" title=\"Unbuffered I/O\"></a>Unbuffered I/O</h3><p>Unbuffered I/O is provided by the function <code>open</code>, <code>read</code>, <code>write</code>, <code>lseek</code> and <code>close</code>    </p>\n<h3 id=\"Standard-I-O\"><a href=\"#Standard-I-O\" class=\"headerlink\" title=\"Standard I/O\"></a>Standard I/O</h3><p>This prevents us from worrying about choosing optimal buffer sizes.<br>The most common function is <code>printf</code>.<br><code>fgets</code> reads an entire line<br><code>getc</code> reads one character at a time<br><code>putc</code> writes one character at a time</p>\n<h2 id=\"Programs-and-Process-Control\"><a href=\"#Programs-and-Process-Control\" class=\"headerlink\" title=\"Programs and Process Control\"></a>Programs and Process Control</h2><h3 id=\"Process-Control\"><a href=\"#Process-Control\" class=\"headerlink\" title=\"Process Control\"></a>Process Control</h3><p>There are three primary functions for process control: <code>fork</code>, <code>exec</code> and <code>waitpid</code></p>\n<h3 id=\"Threads-and-Thread-IDs\"><a href=\"#Threads-and-Thread-IDs\" class=\"headerlink\" title=\"Threads and Thread IDs\"></a>Threads and Thread IDs</h3><p>Thread of control - one set of machine instructions executing at a time.<br>All the threads within a process share the same address space, file descriptors, stacks and process-related attributes.</p>\n<h2 id=\"Error-Handling\"><a href=\"#Error-Handling\" class=\"headerlink\" title=\"Error Handling\"></a>Error Handling</h2><p>When an error occurs in UNIX system functions, a negative value is returned and an integer <code>errno</code> is set to a value that gives additional information.<br><strong>Note</strong>: </p>\n<ol>\n<li>The value of <code>errno</code> is never cleared even if there is no error occurred. Therefore we should make sure it&#39;s only returned when a function indicates that an error occurred. </li>\n<li>The value of <code>errno</code> is never set to 0 by any of the functions.</li>\n</ol>\n<p>Errors could be fatal (non-recoverable) and nonfatal (recoverable)</p>\n<h2 id=\"User-Identification\"><a href=\"#User-Identification\" class=\"headerlink\" title=\"User Identification\"></a>User Identification</h2><p>Starting with 4.2 BSD, most of UNIX systems allow a user to belong to up to 16 additional user groups.</p>\n<h2 id=\"Time-Values\"><a href=\"#Time-Values\" class=\"headerlink\" title=\"Time Values\"></a>Time Values</h2><p>UNIX system maintains three values for a process:<br>    1. Clock time<br>    2. User CPU time<br>    3. System CPU time<br>The user CPU time is the CPU time attributed to user instructions. The system CPU time is the CPU time attributed to the kernel when it executes on behalf of the process.</p>\n<h2 id=\"System-calls-and-library-functions\"><a href=\"#System-calls-and-library-functions\" class=\"headerlink\" title=\"System calls and library functions\"></a>System calls and library functions</h2><p>We should realize, that we can replace the library functions, if desired, whereas the system calls usually cannot be replaced</p>\n<p><img src=\"systemCallAndLibraryCall.png\" alt=\"System Call and Library Call\"><br>System calls usually provide a minimal interface, whereas library functions often provide more elaborate functionality</p>"},{"title":"Advanced Programming in Unix - Chapter 2","top":false,"cover":false,"toc":true,"mathjax":true,"date":"2020-03-30T18:58:45.000Z","summary":"Reading notes for Chapter 2 of &laquo;Advanced Programming in Unix&raquo;","password":null,"_content":"\n# UNIX Standardization and Implementations\n\n<!--more-->\n\n\n\n## Unix Standardization\n\n#### FIPS\n\nFIPS stands for Federal Information Processing Standard.\n\n## Unix System Implementations\n\n#### Linux\n\nLinux is an OS that provides rich UNIX programming environment, and is freely available under the GPU Public License. \nLinux is distributed by often being the first OS that supports new hardware.\n\n## Limits\n\nThere are two types of limits: \n\t1. Runtime limits (`how many characters in a filename`)\n\t2. Compile-time limits (`what's the largest value of a short integer`)\n\n\nNOTE: a particular value may not be included in the header if the actual value depends on the available memory on the system, POSIX.1 provides sysconf, pathconf and fpathconf for us to call during runtime. There is a problem: some values do not have upper bound.\n\n## sysconf, pathconf and fpathconf\n\nThey return `-1` and set `errno` to EINVAL if the name isn't one of the appropriate constants. \nSome names can return either the value of the variable or an indication that it's indefinite, where return value is `-1` but no change on `errno`.\n\n\n## Differences between Standards\n\nThere are differences between ISO C standard and POSIX.1. If it happens, POSIX.1 defers to the ISO C standard. \n\nExample: \n\t1. `clock_t`, where ISO C does not provide unit, but POSIX.1 does.\n    2. ISO C standards specifies a function but not as strongly as POSIX.1","source":"_posts/Advanced-Programming-in-Unix-Chapter-2.md","raw":"---\ntitle: Advanced Programming in Unix - Chapter 2\ntop: false\ncover: false\ntoc: true\nmathjax: true\ndate: 2020-03-30 14:58:45\nsummary: Reading notes for Chapter 2 of &laquo;Advanced Programming in Unix&raquo;\ncategories: Tech\ntags:\n    - Operating System\npassword:\n---\n\n# UNIX Standardization and Implementations\n\n<!--more-->\n\n\n\n## Unix Standardization\n\n#### FIPS\n\nFIPS stands for Federal Information Processing Standard.\n\n## Unix System Implementations\n\n#### Linux\n\nLinux is an OS that provides rich UNIX programming environment, and is freely available under the GPU Public License. \nLinux is distributed by often being the first OS that supports new hardware.\n\n## Limits\n\nThere are two types of limits: \n\t1. Runtime limits (`how many characters in a filename`)\n\t2. Compile-time limits (`what's the largest value of a short integer`)\n\n\nNOTE: a particular value may not be included in the header if the actual value depends on the available memory on the system, POSIX.1 provides sysconf, pathconf and fpathconf for us to call during runtime. There is a problem: some values do not have upper bound.\n\n## sysconf, pathconf and fpathconf\n\nThey return `-1` and set `errno` to EINVAL if the name isn't one of the appropriate constants. \nSome names can return either the value of the variable or an indication that it's indefinite, where return value is `-1` but no change on `errno`.\n\n\n## Differences between Standards\n\nThere are differences between ISO C standard and POSIX.1. If it happens, POSIX.1 defers to the ISO C standard. \n\nExample: \n\t1. `clock_t`, where ISO C does not provide unit, but POSIX.1 does.\n    2. ISO C standards specifies a function but not as strongly as POSIX.1","slug":"Advanced-Programming-in-Unix-Chapter-2","published":1,"updated":"2020-05-05T15:11:09.713Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ckcxuqekv0003fkjx10rt9v9a","content":"<h1 id=\"UNIX-Standardization-and-Implementations\"><a href=\"#UNIX-Standardization-and-Implementations\" class=\"headerlink\" title=\"UNIX Standardization and Implementations\"></a>UNIX Standardization and Implementations</h1><a id=\"more\"></a>\n\n\n\n<h2 id=\"Unix-Standardization\"><a href=\"#Unix-Standardization\" class=\"headerlink\" title=\"Unix Standardization\"></a>Unix Standardization</h2><h4 id=\"FIPS\"><a href=\"#FIPS\" class=\"headerlink\" title=\"FIPS\"></a>FIPS</h4><p>FIPS stands for Federal Information Processing Standard.</p>\n<h2 id=\"Unix-System-Implementations\"><a href=\"#Unix-System-Implementations\" class=\"headerlink\" title=\"Unix System Implementations\"></a>Unix System Implementations</h2><h4 id=\"Linux\"><a href=\"#Linux\" class=\"headerlink\" title=\"Linux\"></a>Linux</h4><p>Linux is an OS that provides rich UNIX programming environment, and is freely available under the GPU Public License.<br>Linux is distributed by often being the first OS that supports new hardware.</p>\n<h2 id=\"Limits\"><a href=\"#Limits\" class=\"headerlink\" title=\"Limits\"></a>Limits</h2><p>There are two types of limits:<br>    1. Runtime limits (<code>how many characters in a filename</code>)<br>    2. Compile-time limits (<code>what&#39;s the largest value of a short integer</code>)</p>\n<p>NOTE: a particular value may not be included in the header if the actual value depends on the available memory on the system, POSIX.1 provides sysconf, pathconf and fpathconf for us to call during runtime. There is a problem: some values do not have upper bound.</p>\n<h2 id=\"sysconf-pathconf-and-fpathconf\"><a href=\"#sysconf-pathconf-and-fpathconf\" class=\"headerlink\" title=\"sysconf, pathconf and fpathconf\"></a>sysconf, pathconf and fpathconf</h2><p>They return <code>-1</code> and set <code>errno</code> to EINVAL if the name isn&#39;t one of the appropriate constants.<br>Some names can return either the value of the variable or an indication that it&#39;s indefinite, where return value is <code>-1</code> but no change on <code>errno</code>.</p>\n<h2 id=\"Differences-between-Standards\"><a href=\"#Differences-between-Standards\" class=\"headerlink\" title=\"Differences between Standards\"></a>Differences between Standards</h2><p>There are differences between ISO C standard and POSIX.1. If it happens, POSIX.1 defers to the ISO C standard. </p>\n<p>Example:<br>    1. <code>clock_t</code>, where ISO C does not provide unit, but POSIX.1 does.<br>    2. ISO C standards specifies a function but not as strongly as POSIX.1</p>\n","site":{"data":{"next":{"override":false,"favicon":{"small":"/uploads/favicon-16x16.png","medium":"/uploads/favicon-32x32.png","apple_touch_icon":"/uploads/apple-touch-icon.png","safari_pinned_tab":"/uploads/favicon.png","ms_browserconfig":"/uploads/browserconfig.xml"},"keywords":"Hexo, NexT","rss":null,"footer":{"icon":"user","copyright":null,"powered":true,"theme":{"enable":true,"version":true}},"canonical":true,"seo":false,"index_with_subtitle":false,"menu":{"home":"/ || home","archives":"/archives/ || archive"},"menu_icons":{"enable":true},"scheme":"Pisces","social_icons":{"enable":true,"icons_only":false,"transition":false},"links_icon":"link","links_title":"Links","links_layout":"block","toc":{"enable":true,"number":true,"wrap":false},"sidebar":{"position":"left","display":"post","offset":12,"b2t":false,"scrollpercent":false,"onmobile":false},"scroll_to_more":true,"save_scroll":false,"excerpt_description":true,"auto_excerpt":{"enable":false,"length":30},"read_more_btn":true,"post_meta":{"item_text":true,"created_at":true,"updated_at":false,"categories":true},"post_wordcount":{"item_text":true,"wordcount":false,"min2read":false,"totalcount":false,"separated_meta":true},"post_copyright":{"enable":false,"license":"CC BY-NC-SA 3.0","license_url":"https://creativecommons.org/licenses/by-nc-sa/3.0/"},"mobile_layout_economy":false,"android_chrome_color":"#222","custom_logo":{"enabled":false,"image":null},"marked":{"smartypants":false},"highlight_theme":"normal","font":{"enable":false,"host":null,"global":{"external":true,"family":"Lato","size":null},"headings":{"external":true,"family":null,"size":null},"posts":{"external":true,"family":null},"logo":{"external":true,"family":null,"size":null},"codes":{"external":true,"family":null,"size":null}},"mathjax":{"enable":false,"per_page":false,"cdn":"//cdn.bootcss.com/mathjax/2.7.1/latest.js?config=TeX-AMS-MML_HTMLorMML"},"han":false,"disqus":{"enable":false,"shortname":null,"count":true},"changyan":{"enable":false,"appid":null,"appkey":null},"valine":{"enable":false,"appid":null,"appkey":null,"notify":false,"verify":false,"placeholder":"Just go go","avatar":"mm","guest_info":"nick,mail,link","pageSize":10},"gitment":{"enable":false,"mint":true,"count":true,"lazy":false,"cleanly":false,"language":null,"github_user":null,"github_repo":null,"client_id":null,"client_secret":null,"proxy_gateway":null,"redirect_protocol":null},"needmoreshare2":{"enable":false,"postbottom":{"enable":false,"options":{"iconStyle":"box","boxForm":"horizontal","position":"bottomCenter","networks":"Weibo,Wechat,Douban,QQZone,Twitter,Facebook"}},"float":{"enable":false,"options":{"iconStyle":"box","boxForm":"horizontal","position":"middleRight","networks":"Weibo,Wechat,Douban,QQZone,Twitter,Facebook"}}},"duoshuo_info":{"ua_enable":true,"admin_enable":false,"user_id":0},"facebook_sdk":{"enable":false,"app_id":null,"fb_admin":null,"like_button":null,"webmaster":null},"facebook_comments_plugin":{"enable":false,"num_of_posts":10,"width":"100%","scheme":"light"},"vkontakte_api":{"enable":false,"app_id":null,"like":true,"comments":true,"num_of_posts":10},"rating":{"enable":false,"id":null,"color":"fc6423"},"leancloud_visitors":{"enable":false,"app_id":null,"app_key":null},"firestore":{"enable":false,"collection":"articles","apiKey":null,"projectId":null,"bluebird":false},"busuanzi_count":{"enable":false,"site_uv":true,"site_uv_header":"<i class=\"fa fa-user\"></i>","site_uv_footer":null,"site_pv":true,"site_pv_header":"<i class=\"fa fa-eye\"></i>","site_pv_footer":null,"page_pv":true,"page_pv_header":"<i class=\"fa fa-file-o\"></i>","page_pv_footer":null},"baidu_push":false,"calendar":{"enable":false,"calendar_id":"<required>","api_key":"<required>","orderBy":"startTime","offsetMax":24,"offsetMin":4,"timeZone":null,"showDeleted":false,"singleEvents":true,"maxResults":250},"algolia_search":{"enable":false,"hits":{"per_page":10},"labels":{"input_placeholder":"Search for Posts","hits_empty":"We didn't find any results for the search: ${query}","hits_stats":"${hits} results found in ${time} ms"}},"local_search":{"enable":false,"trigger":"auto","top_n_per_article":1},"exturl":false,"note":{"style":"simple","icons":false,"border_radius":3,"light_bg_offset":0},"label":true,"tabs":{"enable":true,"transition":{"tabs":false,"labels":true},"border_radius":0},"motion":{"enable":true,"async":false,"transition":{"post_block":"fadeIn","post_header":"slideDownIn","post_body":"slideDownIn","coll_header":"slideLeftIn","sidebar":"slideUpIn"}},"fancybox":true,"pace":false,"pace_theme":"pace-theme-minimal","canvas_nest":false,"three_waves":false,"canvas_lines":false,"canvas_sphere":false,"canvas_ribbon":{"enable":false,"size":300,"alpha":0.6,"zIndex":-1},"vendors":{"_internal":"lib","jquery":null,"fancybox":null,"fancybox_css":null,"fastclick":null,"lazyload":null,"velocity":null,"velocity_ui":null,"ua_parser":null,"fontawesome":null,"algolia_instant_js":null,"algolia_instant_css":null,"pace":null,"pace_css":null,"canvas_nest":null,"three":null,"three_waves":null,"canvas_lines":null,"canvas_sphere":null,"canvas_ribbon":null,"han":null,"needMoreShare2":null},"css":"css","js":"js","images":"images","version":"5.1.4"}}},"excerpt":"<h1 id=\"UNIX-Standardization-and-Implementations\"><a href=\"#UNIX-Standardization-and-Implementations\" class=\"headerlink\" title=\"UNIX Standardization and Implementations\"></a>UNIX Standardization and Implementations</h1>","more":"<h2 id=\"Unix-Standardization\"><a href=\"#Unix-Standardization\" class=\"headerlink\" title=\"Unix Standardization\"></a>Unix Standardization</h2><h4 id=\"FIPS\"><a href=\"#FIPS\" class=\"headerlink\" title=\"FIPS\"></a>FIPS</h4><p>FIPS stands for Federal Information Processing Standard.</p>\n<h2 id=\"Unix-System-Implementations\"><a href=\"#Unix-System-Implementations\" class=\"headerlink\" title=\"Unix System Implementations\"></a>Unix System Implementations</h2><h4 id=\"Linux\"><a href=\"#Linux\" class=\"headerlink\" title=\"Linux\"></a>Linux</h4><p>Linux is an OS that provides rich UNIX programming environment, and is freely available under the GPU Public License.<br>Linux is distributed by often being the first OS that supports new hardware.</p>\n<h2 id=\"Limits\"><a href=\"#Limits\" class=\"headerlink\" title=\"Limits\"></a>Limits</h2><p>There are two types of limits:<br>    1. Runtime limits (<code>how many characters in a filename</code>)<br>    2. Compile-time limits (<code>what&#39;s the largest value of a short integer</code>)</p>\n<p>NOTE: a particular value may not be included in the header if the actual value depends on the available memory on the system, POSIX.1 provides sysconf, pathconf and fpathconf for us to call during runtime. There is a problem: some values do not have upper bound.</p>\n<h2 id=\"sysconf-pathconf-and-fpathconf\"><a href=\"#sysconf-pathconf-and-fpathconf\" class=\"headerlink\" title=\"sysconf, pathconf and fpathconf\"></a>sysconf, pathconf and fpathconf</h2><p>They return <code>-1</code> and set <code>errno</code> to EINVAL if the name isn&#39;t one of the appropriate constants.<br>Some names can return either the value of the variable or an indication that it&#39;s indefinite, where return value is <code>-1</code> but no change on <code>errno</code>.</p>\n<h2 id=\"Differences-between-Standards\"><a href=\"#Differences-between-Standards\" class=\"headerlink\" title=\"Differences between Standards\"></a>Differences between Standards</h2><p>There are differences between ISO C standard and POSIX.1. If it happens, POSIX.1 defers to the ISO C standard. </p>\n<p>Example:<br>    1. <code>clock_t</code>, where ISO C does not provide unit, but POSIX.1 does.<br>    2. ISO C standards specifies a function but not as strongly as POSIX.1</p>"},{"title":"Advanced Programming in Unix - Chapter 3","top":false,"cover":false,"toc":true,"mathjax":true,"date":"2020-04-06T18:45:59.000Z","summary":"Reading notes for Chapter 2 of &laquo;Advanced Programming in Unix&raquo;","password":null,"_content":"\n\n# File I/O\n<!--more-->\n## 3.1 Introduction\n\nThe term *unbuffered* means each *read* or *write* invokes a system call in the kernel.\n\nThe unbuffered I/O functions are not part of ISO C but are part of POSIX.1 and Single UNIX Specification.\n\n## 3.2 File descriptors\n\nFile descriptor is a non-negative integer, it's returned if we open or create a file.\n\nFile descriptor 0 is with standard input of a process, 1 is output, and 2 is standard error.\n\nAlthough they should be replaced by symbolic constants **STDIN_FILENO**, **STDOUT_FILENO**, and **STDERR_FILENO** to improve readability.\n\n## 3.3 open and openat\n\nThe file descriptor returned by *open* and *openat* is guaranteed to be the lowest numbered unused descriptor.\n\nThe *fd* parameter distinguishes the *openat* from the *open* function.\n\nThe *openat* is to address two problems:\n\n1. Allow different threads in same process to access different files from different locations.\n\n2. Provides a way to avoid time-of-check-to-time-of-use errors (TOCTTOU).\n\n## 3.6 lseek\n\n*lseek* is to set an open file's offset.\n\nthe parameter *whence* can have three values: **SEEK_SET**, **SEEK_CUR** and **SEEK_END**.\n\nThe offset can be greater than the file's current size, where the next *write* to the file will extend the file. There is no need to allocate disk space for the data between the old end of the file and the location where you start writing.\n\n## 3.9 I/O Efficienty\n\n![Buffer size comparison](buffer_size_comparison.png)\n\nThe file system used for this test was the Linux ext4 file system with 4096-byte blocks. This accounts for the minimum in the system time occurring at the few timing measurements starting around 4096. Increasing the buffer size beyond this limit has little positive effect.\n\nMost file systems support **read-ahead** to improve performance.\n\n## 3.10 File Sharing\n\n1. Every process has an entry in the process table. Within that table entry is a table of open file descriptors. There are *fd flags* and *pointer to a file table entry*\n\n2. The kernel maintains a file table for all open files, each file table entry contains: *fd flag, current offset*, and *pointer to the v-node table entry for the file*\n\n3. Each open file has a v-node structure that contains information about the type of file and pointers to functions that operate on the file. They always contains the i-node for the file. The i-node contains the owner of the file, size, pointers to where the actual data blocks for the file are located on disk, and so on.\n\n**Note**: Linux has no v-node, instead a generic i-node structure is used.\n\n![Kernel data structure for open files](kernel_data_structure_for_open_files.png)\n\n![Two processes with the same file open](two_processes_one_file.png)\n\nIt's also possible for more than one file descriptor entry to point to the same file table entry. *dup, fork*.\n\n## 3.11 Atomic Operations\n\nIf we call *lseek* and then *write* to achieve appending a message, it's possible two different processes conflict with each other. Thus we have **O_APPEND** to do it atomically.\n\n**pread** is equivalent to calling *lseek* and then *read*, except that there is no way to interrupt the two operations, and the current file offset is not updated.\n\n**pwrite** is equivalent to calling *lseek* and then *write*.\n\nThe term *atomic operation* refers to an operation that might be composed of multiple steps, either all the steps are performed or none are performed. It's not possible that only a subset of all to be performed.\n\n## 3.12 dup and dup2 Functions\n\nWith dup2, we specify the value of the new descriptor.\n\n![Kernel data structure after dup()](kernel_data_structure_after_dup.png)\n\n## 3.13 sync, fsync and fdatasync Functions\n\nUNIX systems have a buffer cache or page cache in the kernel. When we write data to a file, the data is normally copied by the kernel into the buffer and queued for writing to disk at some later time. This is called *delayed write*.\n\n*sync* function simply queues all the modified block buffers for writing and returns, it does not wait for the disk writes to take place. It's called periodically to guarantee regular flushing of the kernel's buffer.\n\n*fsync* refers only to a single file, and waits for the disk writes to complete before returning. This is used when an application, like database needs to be sure that the blocks have been written to the disk.\n\n*fdatasync* is similar to *fsync*, but it affects only the data portion of a file, while *fsync* also update the file's attributes synchronously.\n\n## 3.14 fcntl Function\n\nThe **fcntl** function is used for five different purposes: \n1. Duplicate an existing descriptor (cmd = **F_DUPFD** or **F_DUPFD_CLOEXEC**) \n2. Get/set file descriptor flags (cmd = **F_GETFD** or **F_SETFD**) \n3. Get/set file status flags (cmd = **F_GETFL** or **F_SETFL**) \n4. Get/set asynchronous I/O ownership (cmd = **F_GETOWN** or **F_SETOWN**) \n5. Get/set record locks (cmd = **F_GETLK**, **F_SETLK**, or **F_SETLKW**)\n\n **F_DUPFD**, **F_GETFD**, **F_GETFL** and **F_GETOWN** have special return values. The first command returns the new file descriptor, the next two return the corresponding flags, and the final command returns a positive process ID or a negative process group ID.\n\nWith **fcntl**, we can modify the file descriptor without opening that file, even if the file has been opened.\n\n","source":"_posts/Advanced-Programming-in-Unix-Chapter-3.md","raw":"---\ntitle: Advanced Programming in Unix - Chapter 3\ntop: false\ncover: false\ntoc: true\nmathjax: true\ndate: 2020-04-06 14:45:59\nsummary: Reading notes for Chapter 2 of &laquo;Advanced Programming in Unix&raquo;\ncategories: Tech\ntags:\n    - Operating System\npassword:\n---\n\n\n# File I/O\n<!--more-->\n## 3.1 Introduction\n\nThe term *unbuffered* means each *read* or *write* invokes a system call in the kernel.\n\nThe unbuffered I/O functions are not part of ISO C but are part of POSIX.1 and Single UNIX Specification.\n\n## 3.2 File descriptors\n\nFile descriptor is a non-negative integer, it's returned if we open or create a file.\n\nFile descriptor 0 is with standard input of a process, 1 is output, and 2 is standard error.\n\nAlthough they should be replaced by symbolic constants **STDIN_FILENO**, **STDOUT_FILENO**, and **STDERR_FILENO** to improve readability.\n\n## 3.3 open and openat\n\nThe file descriptor returned by *open* and *openat* is guaranteed to be the lowest numbered unused descriptor.\n\nThe *fd* parameter distinguishes the *openat* from the *open* function.\n\nThe *openat* is to address two problems:\n\n1. Allow different threads in same process to access different files from different locations.\n\n2. Provides a way to avoid time-of-check-to-time-of-use errors (TOCTTOU).\n\n## 3.6 lseek\n\n*lseek* is to set an open file's offset.\n\nthe parameter *whence* can have three values: **SEEK_SET**, **SEEK_CUR** and **SEEK_END**.\n\nThe offset can be greater than the file's current size, where the next *write* to the file will extend the file. There is no need to allocate disk space for the data between the old end of the file and the location where you start writing.\n\n## 3.9 I/O Efficienty\n\n![Buffer size comparison](buffer_size_comparison.png)\n\nThe file system used for this test was the Linux ext4 file system with 4096-byte blocks. This accounts for the minimum in the system time occurring at the few timing measurements starting around 4096. Increasing the buffer size beyond this limit has little positive effect.\n\nMost file systems support **read-ahead** to improve performance.\n\n## 3.10 File Sharing\n\n1. Every process has an entry in the process table. Within that table entry is a table of open file descriptors. There are *fd flags* and *pointer to a file table entry*\n\n2. The kernel maintains a file table for all open files, each file table entry contains: *fd flag, current offset*, and *pointer to the v-node table entry for the file*\n\n3. Each open file has a v-node structure that contains information about the type of file and pointers to functions that operate on the file. They always contains the i-node for the file. The i-node contains the owner of the file, size, pointers to where the actual data blocks for the file are located on disk, and so on.\n\n**Note**: Linux has no v-node, instead a generic i-node structure is used.\n\n![Kernel data structure for open files](kernel_data_structure_for_open_files.png)\n\n![Two processes with the same file open](two_processes_one_file.png)\n\nIt's also possible for more than one file descriptor entry to point to the same file table entry. *dup, fork*.\n\n## 3.11 Atomic Operations\n\nIf we call *lseek* and then *write* to achieve appending a message, it's possible two different processes conflict with each other. Thus we have **O_APPEND** to do it atomically.\n\n**pread** is equivalent to calling *lseek* and then *read*, except that there is no way to interrupt the two operations, and the current file offset is not updated.\n\n**pwrite** is equivalent to calling *lseek* and then *write*.\n\nThe term *atomic operation* refers to an operation that might be composed of multiple steps, either all the steps are performed or none are performed. It's not possible that only a subset of all to be performed.\n\n## 3.12 dup and dup2 Functions\n\nWith dup2, we specify the value of the new descriptor.\n\n![Kernel data structure after dup()](kernel_data_structure_after_dup.png)\n\n## 3.13 sync, fsync and fdatasync Functions\n\nUNIX systems have a buffer cache or page cache in the kernel. When we write data to a file, the data is normally copied by the kernel into the buffer and queued for writing to disk at some later time. This is called *delayed write*.\n\n*sync* function simply queues all the modified block buffers for writing and returns, it does not wait for the disk writes to take place. It's called periodically to guarantee regular flushing of the kernel's buffer.\n\n*fsync* refers only to a single file, and waits for the disk writes to complete before returning. This is used when an application, like database needs to be sure that the blocks have been written to the disk.\n\n*fdatasync* is similar to *fsync*, but it affects only the data portion of a file, while *fsync* also update the file's attributes synchronously.\n\n## 3.14 fcntl Function\n\nThe **fcntl** function is used for five different purposes: \n1. Duplicate an existing descriptor (cmd = **F_DUPFD** or **F_DUPFD_CLOEXEC**) \n2. Get/set file descriptor flags (cmd = **F_GETFD** or **F_SETFD**) \n3. Get/set file status flags (cmd = **F_GETFL** or **F_SETFL**) \n4. Get/set asynchronous I/O ownership (cmd = **F_GETOWN** or **F_SETOWN**) \n5. Get/set record locks (cmd = **F_GETLK**, **F_SETLK**, or **F_SETLKW**)\n\n **F_DUPFD**, **F_GETFD**, **F_GETFL** and **F_GETOWN** have special return values. The first command returns the new file descriptor, the next two return the corresponding flags, and the final command returns a positive process ID or a negative process group ID.\n\nWith **fcntl**, we can modify the file descriptor without opening that file, even if the file has been opened.\n\n","slug":"Advanced-Programming-in-Unix-Chapter-3","published":1,"updated":"2020-05-05T15:11:23.065Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ckcxuqelc0007fkjxujztm5rg","content":"<h1 id=\"File-I-O\"><a href=\"#File-I-O\" class=\"headerlink\" title=\"File I/O\"></a>File I/O</h1><a id=\"more\"></a>\n<h2 id=\"3-1-Introduction\"><a href=\"#3-1-Introduction\" class=\"headerlink\" title=\"3.1 Introduction\"></a>3.1 Introduction</h2><p>The term <em>unbuffered</em> means each <em>read</em> or <em>write</em> invokes a system call in the kernel.</p>\n<p>The unbuffered I/O functions are not part of ISO C but are part of POSIX.1 and Single UNIX Specification.</p>\n<h2 id=\"3-2-File-descriptors\"><a href=\"#3-2-File-descriptors\" class=\"headerlink\" title=\"3.2 File descriptors\"></a>3.2 File descriptors</h2><p>File descriptor is a non-negative integer, it&#39;s returned if we open or create a file.</p>\n<p>File descriptor 0 is with standard input of a process, 1 is output, and 2 is standard error.</p>\n<p>Although they should be replaced by symbolic constants <strong>STDIN_FILENO</strong>, <strong>STDOUT_FILENO</strong>, and <strong>STDERR_FILENO</strong> to improve readability.</p>\n<h2 id=\"3-3-open-and-openat\"><a href=\"#3-3-open-and-openat\" class=\"headerlink\" title=\"3.3 open and openat\"></a>3.3 open and openat</h2><p>The file descriptor returned by <em>open</em> and <em>openat</em> is guaranteed to be the lowest numbered unused descriptor.</p>\n<p>The <em>fd</em> parameter distinguishes the <em>openat</em> from the <em>open</em> function.</p>\n<p>The <em>openat</em> is to address two problems:</p>\n<ol>\n<li><p>Allow different threads in same process to access different files from different locations.</p>\n</li>\n<li><p>Provides a way to avoid time-of-check-to-time-of-use errors (TOCTTOU).</p>\n</li>\n</ol>\n<h2 id=\"3-6-lseek\"><a href=\"#3-6-lseek\" class=\"headerlink\" title=\"3.6 lseek\"></a>3.6 lseek</h2><p><em>lseek</em> is to set an open file&#39;s offset.</p>\n<p>the parameter <em>whence</em> can have three values: <strong>SEEK_SET</strong>, <strong>SEEK_CUR</strong> and <strong>SEEK_END</strong>.</p>\n<p>The offset can be greater than the file&#39;s current size, where the next <em>write</em> to the file will extend the file. There is no need to allocate disk space for the data between the old end of the file and the location where you start writing.</p>\n<h2 id=\"3-9-I-O-Efficienty\"><a href=\"#3-9-I-O-Efficienty\" class=\"headerlink\" title=\"3.9 I/O Efficienty\"></a>3.9 I/O Efficienty</h2><p><img src=\"buffer_size_comparison.png\" alt=\"Buffer size comparison\"></p>\n<p>The file system used for this test was the Linux ext4 file system with 4096-byte blocks. This accounts for the minimum in the system time occurring at the few timing measurements starting around 4096. Increasing the buffer size beyond this limit has little positive effect.</p>\n<p>Most file systems support <strong>read-ahead</strong> to improve performance.</p>\n<h2 id=\"3-10-File-Sharing\"><a href=\"#3-10-File-Sharing\" class=\"headerlink\" title=\"3.10 File Sharing\"></a>3.10 File Sharing</h2><ol>\n<li><p>Every process has an entry in the process table. Within that table entry is a table of open file descriptors. There are <em>fd flags</em> and <em>pointer to a file table entry</em></p>\n</li>\n<li><p>The kernel maintains a file table for all open files, each file table entry contains: <em>fd flag, current offset</em>, and <em>pointer to the v-node table entry for the file</em></p>\n</li>\n<li><p>Each open file has a v-node structure that contains information about the type of file and pointers to functions that operate on the file. They always contains the i-node for the file. The i-node contains the owner of the file, size, pointers to where the actual data blocks for the file are located on disk, and so on.</p>\n</li>\n</ol>\n<p><strong>Note</strong>: Linux has no v-node, instead a generic i-node structure is used.</p>\n<p><img src=\"kernel_data_structure_for_open_files.png\" alt=\"Kernel data structure for open files\"></p>\n<p><img src=\"two_processes_one_file.png\" alt=\"Two processes with the same file open\"></p>\n<p>It&#39;s also possible for more than one file descriptor entry to point to the same file table entry. <em>dup, fork</em>.</p>\n<h2 id=\"3-11-Atomic-Operations\"><a href=\"#3-11-Atomic-Operations\" class=\"headerlink\" title=\"3.11 Atomic Operations\"></a>3.11 Atomic Operations</h2><p>If we call <em>lseek</em> and then <em>write</em> to achieve appending a message, it&#39;s possible two different processes conflict with each other. Thus we have <strong>O_APPEND</strong> to do it atomically.</p>\n<p><strong>pread</strong> is equivalent to calling <em>lseek</em> and then <em>read</em>, except that there is no way to interrupt the two operations, and the current file offset is not updated.</p>\n<p><strong>pwrite</strong> is equivalent to calling <em>lseek</em> and then <em>write</em>.</p>\n<p>The term <em>atomic operation</em> refers to an operation that might be composed of multiple steps, either all the steps are performed or none are performed. It&#39;s not possible that only a subset of all to be performed.</p>\n<h2 id=\"3-12-dup-and-dup2-Functions\"><a href=\"#3-12-dup-and-dup2-Functions\" class=\"headerlink\" title=\"3.12 dup and dup2 Functions\"></a>3.12 dup and dup2 Functions</h2><p>With dup2, we specify the value of the new descriptor.</p>\n<p><img src=\"kernel_data_structure_after_dup.png\" alt=\"Kernel data structure after dup()\"></p>\n<h2 id=\"3-13-sync-fsync-and-fdatasync-Functions\"><a href=\"#3-13-sync-fsync-and-fdatasync-Functions\" class=\"headerlink\" title=\"3.13 sync, fsync and fdatasync Functions\"></a>3.13 sync, fsync and fdatasync Functions</h2><p>UNIX systems have a buffer cache or page cache in the kernel. When we write data to a file, the data is normally copied by the kernel into the buffer and queued for writing to disk at some later time. This is called <em>delayed write</em>.</p>\n<p><em>sync</em> function simply queues all the modified block buffers for writing and returns, it does not wait for the disk writes to take place. It&#39;s called periodically to guarantee regular flushing of the kernel&#39;s buffer.</p>\n<p><em>fsync</em> refers only to a single file, and waits for the disk writes to complete before returning. This is used when an application, like database needs to be sure that the blocks have been written to the disk.</p>\n<p><em>fdatasync</em> is similar to <em>fsync</em>, but it affects only the data portion of a file, while <em>fsync</em> also update the file&#39;s attributes synchronously.</p>\n<h2 id=\"3-14-fcntl-Function\"><a href=\"#3-14-fcntl-Function\" class=\"headerlink\" title=\"3.14 fcntl Function\"></a>3.14 fcntl Function</h2><p>The <strong>fcntl</strong> function is used for five different purposes: </p>\n<ol>\n<li><p>Duplicate an existing descriptor (cmd = <strong>F_DUPFD</strong> or <strong>F_DUPFD_CLOEXEC</strong>) </p>\n</li>\n<li><p>Get/set file descriptor flags (cmd = <strong>F_GETFD</strong> or <strong>F_SETFD</strong>) </p>\n</li>\n<li><p>Get/set file status flags (cmd = <strong>F_GETFL</strong> or <strong>F_SETFL</strong>) </p>\n</li>\n<li><p>Get/set asynchronous I/O ownership (cmd = <strong>F_GETOWN</strong> or <strong>F_SETOWN</strong>) </p>\n</li>\n<li><p>Get/set record locks (cmd = <strong>F_GETLK</strong>, <strong>F_SETLK</strong>, or <strong>F_SETLKW</strong>)</p>\n<p><strong>F_DUPFD</strong>, <strong>F_GETFD</strong>, <strong>F_GETFL</strong> and <strong>F_GETOWN</strong> have special return values. The first command returns the new file descriptor, the next two return the corresponding flags, and the final command returns a positive process ID or a negative process group ID.</p>\n</li>\n</ol>\n<p>With <strong>fcntl</strong>, we can modify the file descriptor without opening that file, even if the file has been opened.</p>\n","site":{"data":{"next":{"override":false,"favicon":{"small":"/uploads/favicon-16x16.png","medium":"/uploads/favicon-32x32.png","apple_touch_icon":"/uploads/apple-touch-icon.png","safari_pinned_tab":"/uploads/favicon.png","ms_browserconfig":"/uploads/browserconfig.xml"},"keywords":"Hexo, NexT","rss":null,"footer":{"icon":"user","copyright":null,"powered":true,"theme":{"enable":true,"version":true}},"canonical":true,"seo":false,"index_with_subtitle":false,"menu":{"home":"/ || home","archives":"/archives/ || archive"},"menu_icons":{"enable":true},"scheme":"Pisces","social_icons":{"enable":true,"icons_only":false,"transition":false},"links_icon":"link","links_title":"Links","links_layout":"block","toc":{"enable":true,"number":true,"wrap":false},"sidebar":{"position":"left","display":"post","offset":12,"b2t":false,"scrollpercent":false,"onmobile":false},"scroll_to_more":true,"save_scroll":false,"excerpt_description":true,"auto_excerpt":{"enable":false,"length":30},"read_more_btn":true,"post_meta":{"item_text":true,"created_at":true,"updated_at":false,"categories":true},"post_wordcount":{"item_text":true,"wordcount":false,"min2read":false,"totalcount":false,"separated_meta":true},"post_copyright":{"enable":false,"license":"CC BY-NC-SA 3.0","license_url":"https://creativecommons.org/licenses/by-nc-sa/3.0/"},"mobile_layout_economy":false,"android_chrome_color":"#222","custom_logo":{"enabled":false,"image":null},"marked":{"smartypants":false},"highlight_theme":"normal","font":{"enable":false,"host":null,"global":{"external":true,"family":"Lato","size":null},"headings":{"external":true,"family":null,"size":null},"posts":{"external":true,"family":null},"logo":{"external":true,"family":null,"size":null},"codes":{"external":true,"family":null,"size":null}},"mathjax":{"enable":false,"per_page":false,"cdn":"//cdn.bootcss.com/mathjax/2.7.1/latest.js?config=TeX-AMS-MML_HTMLorMML"},"han":false,"disqus":{"enable":false,"shortname":null,"count":true},"changyan":{"enable":false,"appid":null,"appkey":null},"valine":{"enable":false,"appid":null,"appkey":null,"notify":false,"verify":false,"placeholder":"Just go go","avatar":"mm","guest_info":"nick,mail,link","pageSize":10},"gitment":{"enable":false,"mint":true,"count":true,"lazy":false,"cleanly":false,"language":null,"github_user":null,"github_repo":null,"client_id":null,"client_secret":null,"proxy_gateway":null,"redirect_protocol":null},"needmoreshare2":{"enable":false,"postbottom":{"enable":false,"options":{"iconStyle":"box","boxForm":"horizontal","position":"bottomCenter","networks":"Weibo,Wechat,Douban,QQZone,Twitter,Facebook"}},"float":{"enable":false,"options":{"iconStyle":"box","boxForm":"horizontal","position":"middleRight","networks":"Weibo,Wechat,Douban,QQZone,Twitter,Facebook"}}},"duoshuo_info":{"ua_enable":true,"admin_enable":false,"user_id":0},"facebook_sdk":{"enable":false,"app_id":null,"fb_admin":null,"like_button":null,"webmaster":null},"facebook_comments_plugin":{"enable":false,"num_of_posts":10,"width":"100%","scheme":"light"},"vkontakte_api":{"enable":false,"app_id":null,"like":true,"comments":true,"num_of_posts":10},"rating":{"enable":false,"id":null,"color":"fc6423"},"leancloud_visitors":{"enable":false,"app_id":null,"app_key":null},"firestore":{"enable":false,"collection":"articles","apiKey":null,"projectId":null,"bluebird":false},"busuanzi_count":{"enable":false,"site_uv":true,"site_uv_header":"<i class=\"fa fa-user\"></i>","site_uv_footer":null,"site_pv":true,"site_pv_header":"<i class=\"fa fa-eye\"></i>","site_pv_footer":null,"page_pv":true,"page_pv_header":"<i class=\"fa fa-file-o\"></i>","page_pv_footer":null},"baidu_push":false,"calendar":{"enable":false,"calendar_id":"<required>","api_key":"<required>","orderBy":"startTime","offsetMax":24,"offsetMin":4,"timeZone":null,"showDeleted":false,"singleEvents":true,"maxResults":250},"algolia_search":{"enable":false,"hits":{"per_page":10},"labels":{"input_placeholder":"Search for Posts","hits_empty":"We didn't find any results for the search: ${query}","hits_stats":"${hits} results found in ${time} ms"}},"local_search":{"enable":false,"trigger":"auto","top_n_per_article":1},"exturl":false,"note":{"style":"simple","icons":false,"border_radius":3,"light_bg_offset":0},"label":true,"tabs":{"enable":true,"transition":{"tabs":false,"labels":true},"border_radius":0},"motion":{"enable":true,"async":false,"transition":{"post_block":"fadeIn","post_header":"slideDownIn","post_body":"slideDownIn","coll_header":"slideLeftIn","sidebar":"slideUpIn"}},"fancybox":true,"pace":false,"pace_theme":"pace-theme-minimal","canvas_nest":false,"three_waves":false,"canvas_lines":false,"canvas_sphere":false,"canvas_ribbon":{"enable":false,"size":300,"alpha":0.6,"zIndex":-1},"vendors":{"_internal":"lib","jquery":null,"fancybox":null,"fancybox_css":null,"fastclick":null,"lazyload":null,"velocity":null,"velocity_ui":null,"ua_parser":null,"fontawesome":null,"algolia_instant_js":null,"algolia_instant_css":null,"pace":null,"pace_css":null,"canvas_nest":null,"three":null,"three_waves":null,"canvas_lines":null,"canvas_sphere":null,"canvas_ribbon":null,"han":null,"needMoreShare2":null},"css":"css","js":"js","images":"images","version":"5.1.4"}}},"excerpt":"<h1 id=\"File-I-O\"><a href=\"#File-I-O\" class=\"headerlink\" title=\"File I/O\"></a>File I/O</h1>","more":"<h2 id=\"3-1-Introduction\"><a href=\"#3-1-Introduction\" class=\"headerlink\" title=\"3.1 Introduction\"></a>3.1 Introduction</h2><p>The term <em>unbuffered</em> means each <em>read</em> or <em>write</em> invokes a system call in the kernel.</p>\n<p>The unbuffered I/O functions are not part of ISO C but are part of POSIX.1 and Single UNIX Specification.</p>\n<h2 id=\"3-2-File-descriptors\"><a href=\"#3-2-File-descriptors\" class=\"headerlink\" title=\"3.2 File descriptors\"></a>3.2 File descriptors</h2><p>File descriptor is a non-negative integer, it&#39;s returned if we open or create a file.</p>\n<p>File descriptor 0 is with standard input of a process, 1 is output, and 2 is standard error.</p>\n<p>Although they should be replaced by symbolic constants <strong>STDIN_FILENO</strong>, <strong>STDOUT_FILENO</strong>, and <strong>STDERR_FILENO</strong> to improve readability.</p>\n<h2 id=\"3-3-open-and-openat\"><a href=\"#3-3-open-and-openat\" class=\"headerlink\" title=\"3.3 open and openat\"></a>3.3 open and openat</h2><p>The file descriptor returned by <em>open</em> and <em>openat</em> is guaranteed to be the lowest numbered unused descriptor.</p>\n<p>The <em>fd</em> parameter distinguishes the <em>openat</em> from the <em>open</em> function.</p>\n<p>The <em>openat</em> is to address two problems:</p>\n<ol>\n<li><p>Allow different threads in same process to access different files from different locations.</p>\n</li>\n<li><p>Provides a way to avoid time-of-check-to-time-of-use errors (TOCTTOU).</p>\n</li>\n</ol>\n<h2 id=\"3-6-lseek\"><a href=\"#3-6-lseek\" class=\"headerlink\" title=\"3.6 lseek\"></a>3.6 lseek</h2><p><em>lseek</em> is to set an open file&#39;s offset.</p>\n<p>the parameter <em>whence</em> can have three values: <strong>SEEK_SET</strong>, <strong>SEEK_CUR</strong> and <strong>SEEK_END</strong>.</p>\n<p>The offset can be greater than the file&#39;s current size, where the next <em>write</em> to the file will extend the file. There is no need to allocate disk space for the data between the old end of the file and the location where you start writing.</p>\n<h2 id=\"3-9-I-O-Efficienty\"><a href=\"#3-9-I-O-Efficienty\" class=\"headerlink\" title=\"3.9 I/O Efficienty\"></a>3.9 I/O Efficienty</h2><p><img src=\"buffer_size_comparison.png\" alt=\"Buffer size comparison\"></p>\n<p>The file system used for this test was the Linux ext4 file system with 4096-byte blocks. This accounts for the minimum in the system time occurring at the few timing measurements starting around 4096. Increasing the buffer size beyond this limit has little positive effect.</p>\n<p>Most file systems support <strong>read-ahead</strong> to improve performance.</p>\n<h2 id=\"3-10-File-Sharing\"><a href=\"#3-10-File-Sharing\" class=\"headerlink\" title=\"3.10 File Sharing\"></a>3.10 File Sharing</h2><ol>\n<li><p>Every process has an entry in the process table. Within that table entry is a table of open file descriptors. There are <em>fd flags</em> and <em>pointer to a file table entry</em></p>\n</li>\n<li><p>The kernel maintains a file table for all open files, each file table entry contains: <em>fd flag, current offset</em>, and <em>pointer to the v-node table entry for the file</em></p>\n</li>\n<li><p>Each open file has a v-node structure that contains information about the type of file and pointers to functions that operate on the file. They always contains the i-node for the file. The i-node contains the owner of the file, size, pointers to where the actual data blocks for the file are located on disk, and so on.</p>\n</li>\n</ol>\n<p><strong>Note</strong>: Linux has no v-node, instead a generic i-node structure is used.</p>\n<p><img src=\"kernel_data_structure_for_open_files.png\" alt=\"Kernel data structure for open files\"></p>\n<p><img src=\"two_processes_one_file.png\" alt=\"Two processes with the same file open\"></p>\n<p>It&#39;s also possible for more than one file descriptor entry to point to the same file table entry. <em>dup, fork</em>.</p>\n<h2 id=\"3-11-Atomic-Operations\"><a href=\"#3-11-Atomic-Operations\" class=\"headerlink\" title=\"3.11 Atomic Operations\"></a>3.11 Atomic Operations</h2><p>If we call <em>lseek</em> and then <em>write</em> to achieve appending a message, it&#39;s possible two different processes conflict with each other. Thus we have <strong>O_APPEND</strong> to do it atomically.</p>\n<p><strong>pread</strong> is equivalent to calling <em>lseek</em> and then <em>read</em>, except that there is no way to interrupt the two operations, and the current file offset is not updated.</p>\n<p><strong>pwrite</strong> is equivalent to calling <em>lseek</em> and then <em>write</em>.</p>\n<p>The term <em>atomic operation</em> refers to an operation that might be composed of multiple steps, either all the steps are performed or none are performed. It&#39;s not possible that only a subset of all to be performed.</p>\n<h2 id=\"3-12-dup-and-dup2-Functions\"><a href=\"#3-12-dup-and-dup2-Functions\" class=\"headerlink\" title=\"3.12 dup and dup2 Functions\"></a>3.12 dup and dup2 Functions</h2><p>With dup2, we specify the value of the new descriptor.</p>\n<p><img src=\"kernel_data_structure_after_dup.png\" alt=\"Kernel data structure after dup()\"></p>\n<h2 id=\"3-13-sync-fsync-and-fdatasync-Functions\"><a href=\"#3-13-sync-fsync-and-fdatasync-Functions\" class=\"headerlink\" title=\"3.13 sync, fsync and fdatasync Functions\"></a>3.13 sync, fsync and fdatasync Functions</h2><p>UNIX systems have a buffer cache or page cache in the kernel. When we write data to a file, the data is normally copied by the kernel into the buffer and queued for writing to disk at some later time. This is called <em>delayed write</em>.</p>\n<p><em>sync</em> function simply queues all the modified block buffers for writing and returns, it does not wait for the disk writes to take place. It&#39;s called periodically to guarantee regular flushing of the kernel&#39;s buffer.</p>\n<p><em>fsync</em> refers only to a single file, and waits for the disk writes to complete before returning. This is used when an application, like database needs to be sure that the blocks have been written to the disk.</p>\n<p><em>fdatasync</em> is similar to <em>fsync</em>, but it affects only the data portion of a file, while <em>fsync</em> also update the file&#39;s attributes synchronously.</p>\n<h2 id=\"3-14-fcntl-Function\"><a href=\"#3-14-fcntl-Function\" class=\"headerlink\" title=\"3.14 fcntl Function\"></a>3.14 fcntl Function</h2><p>The <strong>fcntl</strong> function is used for five different purposes: </p>\n<ol>\n<li><p>Duplicate an existing descriptor (cmd = <strong>F_DUPFD</strong> or <strong>F_DUPFD_CLOEXEC</strong>) </p>\n</li>\n<li><p>Get/set file descriptor flags (cmd = <strong>F_GETFD</strong> or <strong>F_SETFD</strong>) </p>\n</li>\n<li><p>Get/set file status flags (cmd = <strong>F_GETFL</strong> or <strong>F_SETFL</strong>) </p>\n</li>\n<li><p>Get/set asynchronous I/O ownership (cmd = <strong>F_GETOWN</strong> or <strong>F_SETOWN</strong>) </p>\n</li>\n<li><p>Get/set record locks (cmd = <strong>F_GETLK</strong>, <strong>F_SETLK</strong>, or <strong>F_SETLKW</strong>)</p>\n<p><strong>F_DUPFD</strong>, <strong>F_GETFD</strong>, <strong>F_GETFL</strong> and <strong>F_GETOWN</strong> have special return values. The first command returns the new file descriptor, the next two return the corresponding flags, and the final command returns a positive process ID or a negative process group ID.</p>\n</li>\n</ol>\n<p>With <strong>fcntl</strong>, we can modify the file descriptor without opening that file, even if the file has been opened.</p>"},{"title":"Cryptography notes","top":false,"cover":false,"toc":true,"mathjax":true,"date":"2020-07-13T03:19:52.000Z","password":null,"_content":"\n## Digital signature\n<!--more-->\n\n![](image-20200708104031335.png)\n\n1. Bob has private key and public key, and sends the public key to Alice.\n2. Bob generates a plaintext memo, and uses hash algorithm on it to have a digest.\n3. Then Bob encrypts the digest using his private key and gets a digital signature.\n4. Bob then sends the digital signature along with the memo (**Note: the memo is not encrypted**) to Alice.\n5. Alice uses Bob's public key and decrypt the digital signature to gets the digest.\n6. Alice then uses the same hash algorithm on the plaintext memo and gets another digest.\n7. Alice compares both digests, if they are same, then Alice can be confident that the memo has not been changed.\n\n**NOTE: ** using digital signature does not encrypt the message itself, if Bob wants to encrypt the message, he will need to use Alice's public key to encrypt it.\n\n## Digital Certificate\n\nDitital cert is issued by a third party, and it's based on trust and it verifies that the digital signature is truly signed by the claims singer. It contains information as:\n\n1. Certificate owner's name;\n2. Owner's public key and its expiration date;\n3. Certificate issuer's name;\n4. Certificate issuer's digital signature\n\n![](image-20200708110748416.png)\n\n##　SSL Certificate\n\n![](image-20200708113856166.png)\n\n**SSL certificate** is a web server's digital certificate, issued by a third party, and verifies the identity of web server and it's public key.\n\nFor example, I want to go to https://yahoo.com and I want to make sure all communications are secure.\n\n1. Browser requests secure pages from a yahoo web server;\n2. Yahoo server sends its public key with the SSL certificate, signed by a third party (CA);\n3. Client check with CA for the to make sure the cert is valid (common browser already got public keys installed from many popular CAs);\n4. Exchange the secret: client browser creates symmetric key, it uses web server's public key to encrypt the secret and sends it;\n5. Server uses its private key to decrypt the secret, now the server gets the shared key;\n6. From now on, the messages between client and server will be encrypted and decrypted using the shared key.\n\n\n\n## PKI (Public Key Infrastructure)\n\nA framework for managing digital certificates and public key encryption\n\n![](image-20200708152328368.png)\n\n\n\n\n\n\n\n## SSL/TLS handshaking protocol\n\n1. Client sends \"ClientHello\" with SSL/TLS version, cryptographic algorithms and data compression methods that it supports;\n2. Server responds with \"ServerHello\" with cryptographic algorithm agreement, session ID, digital cert and its public key;\n3. Client checks with server's CA to confirm and establish trust;\n4. ClientKeyExchange - client sends a shared secret key encrypted by the server's public key;\n5. Client sends a \"Finished\" message with the shared secret key - handshake complete;\n6. Server responds with a \"Finished\" message indicating handshake is completed.\n\n![](image-20200708153106778.png)\n\n\n\n## Self signed certificate\n\nSelf signed SSL certificate does not mean it's necessarily less secure than purchased SSL certificates\n\nAll SSL certificates just ensure that the identity of the website is certified and the traffic between your browser and the web server are encrypted. They won't ensure your data won't be stolen.\n\n\n\n## Revocation of certificates\n\n\n\nSituation causes revocation: \n\n1. Certificate is no longer used;\n2. Details of certificate are changed;\n3. The certificate owner's private key was compromised;\n4. Certificates were stolen from CA\n\n\n\n","source":"_posts/Cryptography-notes.md","raw":"---\ntitle: Cryptography notes\ntop: false\ncover: false\ntoc: true\nmathjax: true\ndate: 2020-07-12 23:19:52\ncategories: Tech\ntags: \n    - Security\npassword:\n---\n\n## Digital signature\n<!--more-->\n\n![](image-20200708104031335.png)\n\n1. Bob has private key and public key, and sends the public key to Alice.\n2. Bob generates a plaintext memo, and uses hash algorithm on it to have a digest.\n3. Then Bob encrypts the digest using his private key and gets a digital signature.\n4. Bob then sends the digital signature along with the memo (**Note: the memo is not encrypted**) to Alice.\n5. Alice uses Bob's public key and decrypt the digital signature to gets the digest.\n6. Alice then uses the same hash algorithm on the plaintext memo and gets another digest.\n7. Alice compares both digests, if they are same, then Alice can be confident that the memo has not been changed.\n\n**NOTE: ** using digital signature does not encrypt the message itself, if Bob wants to encrypt the message, he will need to use Alice's public key to encrypt it.\n\n## Digital Certificate\n\nDitital cert is issued by a third party, and it's based on trust and it verifies that the digital signature is truly signed by the claims singer. It contains information as:\n\n1. Certificate owner's name;\n2. Owner's public key and its expiration date;\n3. Certificate issuer's name;\n4. Certificate issuer's digital signature\n\n![](image-20200708110748416.png)\n\n##　SSL Certificate\n\n![](image-20200708113856166.png)\n\n**SSL certificate** is a web server's digital certificate, issued by a third party, and verifies the identity of web server and it's public key.\n\nFor example, I want to go to https://yahoo.com and I want to make sure all communications are secure.\n\n1. Browser requests secure pages from a yahoo web server;\n2. Yahoo server sends its public key with the SSL certificate, signed by a third party (CA);\n3. Client check with CA for the to make sure the cert is valid (common browser already got public keys installed from many popular CAs);\n4. Exchange the secret: client browser creates symmetric key, it uses web server's public key to encrypt the secret and sends it;\n5. Server uses its private key to decrypt the secret, now the server gets the shared key;\n6. From now on, the messages between client and server will be encrypted and decrypted using the shared key.\n\n\n\n## PKI (Public Key Infrastructure)\n\nA framework for managing digital certificates and public key encryption\n\n![](image-20200708152328368.png)\n\n\n\n\n\n\n\n## SSL/TLS handshaking protocol\n\n1. Client sends \"ClientHello\" with SSL/TLS version, cryptographic algorithms and data compression methods that it supports;\n2. Server responds with \"ServerHello\" with cryptographic algorithm agreement, session ID, digital cert and its public key;\n3. Client checks with server's CA to confirm and establish trust;\n4. ClientKeyExchange - client sends a shared secret key encrypted by the server's public key;\n5. Client sends a \"Finished\" message with the shared secret key - handshake complete;\n6. Server responds with a \"Finished\" message indicating handshake is completed.\n\n![](image-20200708153106778.png)\n\n\n\n## Self signed certificate\n\nSelf signed SSL certificate does not mean it's necessarily less secure than purchased SSL certificates\n\nAll SSL certificates just ensure that the identity of the website is certified and the traffic between your browser and the web server are encrypted. They won't ensure your data won't be stolen.\n\n\n\n## Revocation of certificates\n\n\n\nSituation causes revocation: \n\n1. Certificate is no longer used;\n2. Details of certificate are changed;\n3. The certificate owner's private key was compromised;\n4. Certificates were stolen from CA\n\n\n\n","slug":"Cryptography-notes","published":1,"updated":"2020-07-13T03:22:52.906Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ckcxuqelt0009fkjxsczs9c01","content":"<h2 id=\"Digital-signature\"><a href=\"#Digital-signature\" class=\"headerlink\" title=\"Digital signature\"></a>Digital signature</h2><a id=\"more\"></a>\n\n<p><img src=\"image-20200708104031335.png\" alt></p>\n<ol>\n<li>Bob has private key and public key, and sends the public key to Alice.</li>\n<li>Bob generates a plaintext memo, and uses hash algorithm on it to have a digest.</li>\n<li>Then Bob encrypts the digest using his private key and gets a digital signature.</li>\n<li>Bob then sends the digital signature along with the memo (<strong>Note: the memo is not encrypted</strong>) to Alice.</li>\n<li>Alice uses Bob&#39;s public key and decrypt the digital signature to gets the digest.</li>\n<li>Alice then uses the same hash algorithm on the plaintext memo and gets another digest.</li>\n<li>Alice compares both digests, if they are same, then Alice can be confident that the memo has not been changed.</li>\n</ol>\n<p><em><em>NOTE: </em></em> using digital signature does not encrypt the message itself, if Bob wants to encrypt the message, he will need to use Alice&#39;s public key to encrypt it.</p>\n<h2 id=\"Digital-Certificate\"><a href=\"#Digital-Certificate\" class=\"headerlink\" title=\"Digital Certificate\"></a>Digital Certificate</h2><p>Ditital cert is issued by a third party, and it&#39;s based on trust and it verifies that the digital signature is truly signed by the claims singer. It contains information as:</p>\n<ol>\n<li>Certificate owner&#39;s name;</li>\n<li>Owner&#39;s public key and its expiration date;</li>\n<li>Certificate issuer&#39;s name;</li>\n<li>Certificate issuer&#39;s digital signature</li>\n</ol>\n<p><img src=\"image-20200708110748416.png\" alt></p>\n<p>##　SSL Certificate</p>\n<p><img src=\"image-20200708113856166.png\" alt></p>\n<p><strong>SSL certificate</strong> is a web server&#39;s digital certificate, issued by a third party, and verifies the identity of web server and it&#39;s public key.</p>\n<p>For example, I want to go to <a href=\"https://yahoo.com\" target=\"_blank\" rel=\"noopener\">https://yahoo.com</a> and I want to make sure all communications are secure.</p>\n<ol>\n<li>Browser requests secure pages from a yahoo web server;</li>\n<li>Yahoo server sends its public key with the SSL certificate, signed by a third party (CA);</li>\n<li>Client check with CA for the to make sure the cert is valid (common browser already got public keys installed from many popular CAs);</li>\n<li>Exchange the secret: client browser creates symmetric key, it uses web server&#39;s public key to encrypt the secret and sends it;</li>\n<li>Server uses its private key to decrypt the secret, now the server gets the shared key;</li>\n<li>From now on, the messages between client and server will be encrypted and decrypted using the shared key.</li>\n</ol>\n<h2 id=\"PKI-Public-Key-Infrastructure\"><a href=\"#PKI-Public-Key-Infrastructure\" class=\"headerlink\" title=\"PKI (Public Key Infrastructure)\"></a>PKI (Public Key Infrastructure)</h2><p>A framework for managing digital certificates and public key encryption</p>\n<p><img src=\"image-20200708152328368.png\" alt></p>\n<h2 id=\"SSL-TLS-handshaking-protocol\"><a href=\"#SSL-TLS-handshaking-protocol\" class=\"headerlink\" title=\"SSL/TLS handshaking protocol\"></a>SSL/TLS handshaking protocol</h2><ol>\n<li>Client sends &quot;ClientHello&quot; with SSL/TLS version, cryptographic algorithms and data compression methods that it supports;</li>\n<li>Server responds with &quot;ServerHello&quot; with cryptographic algorithm agreement, session ID, digital cert and its public key;</li>\n<li>Client checks with server&#39;s CA to confirm and establish trust;</li>\n<li>ClientKeyExchange - client sends a shared secret key encrypted by the server&#39;s public key;</li>\n<li>Client sends a &quot;Finished&quot; message with the shared secret key - handshake complete;</li>\n<li>Server responds with a &quot;Finished&quot; message indicating handshake is completed.</li>\n</ol>\n<p><img src=\"image-20200708153106778.png\" alt></p>\n<h2 id=\"Self-signed-certificate\"><a href=\"#Self-signed-certificate\" class=\"headerlink\" title=\"Self signed certificate\"></a>Self signed certificate</h2><p>Self signed SSL certificate does not mean it&#39;s necessarily less secure than purchased SSL certificates</p>\n<p>All SSL certificates just ensure that the identity of the website is certified and the traffic between your browser and the web server are encrypted. They won&#39;t ensure your data won&#39;t be stolen.</p>\n<h2 id=\"Revocation-of-certificates\"><a href=\"#Revocation-of-certificates\" class=\"headerlink\" title=\"Revocation of certificates\"></a>Revocation of certificates</h2><p>Situation causes revocation: </p>\n<ol>\n<li>Certificate is no longer used;</li>\n<li>Details of certificate are changed;</li>\n<li>The certificate owner&#39;s private key was compromised;</li>\n<li>Certificates were stolen from CA</li>\n</ol>\n","site":{"data":{"next":{"override":false,"favicon":{"small":"/uploads/favicon-16x16.png","medium":"/uploads/favicon-32x32.png","apple_touch_icon":"/uploads/apple-touch-icon.png","safari_pinned_tab":"/uploads/favicon.png","ms_browserconfig":"/uploads/browserconfig.xml"},"keywords":"Hexo, NexT","rss":null,"footer":{"icon":"user","copyright":null,"powered":true,"theme":{"enable":true,"version":true}},"canonical":true,"seo":false,"index_with_subtitle":false,"menu":{"home":"/ || home","archives":"/archives/ || archive"},"menu_icons":{"enable":true},"scheme":"Pisces","social_icons":{"enable":true,"icons_only":false,"transition":false},"links_icon":"link","links_title":"Links","links_layout":"block","toc":{"enable":true,"number":true,"wrap":false},"sidebar":{"position":"left","display":"post","offset":12,"b2t":false,"scrollpercent":false,"onmobile":false},"scroll_to_more":true,"save_scroll":false,"excerpt_description":true,"auto_excerpt":{"enable":false,"length":30},"read_more_btn":true,"post_meta":{"item_text":true,"created_at":true,"updated_at":false,"categories":true},"post_wordcount":{"item_text":true,"wordcount":false,"min2read":false,"totalcount":false,"separated_meta":true},"post_copyright":{"enable":false,"license":"CC BY-NC-SA 3.0","license_url":"https://creativecommons.org/licenses/by-nc-sa/3.0/"},"mobile_layout_economy":false,"android_chrome_color":"#222","custom_logo":{"enabled":false,"image":null},"marked":{"smartypants":false},"highlight_theme":"normal","font":{"enable":false,"host":null,"global":{"external":true,"family":"Lato","size":null},"headings":{"external":true,"family":null,"size":null},"posts":{"external":true,"family":null},"logo":{"external":true,"family":null,"size":null},"codes":{"external":true,"family":null,"size":null}},"mathjax":{"enable":false,"per_page":false,"cdn":"//cdn.bootcss.com/mathjax/2.7.1/latest.js?config=TeX-AMS-MML_HTMLorMML"},"han":false,"disqus":{"enable":false,"shortname":null,"count":true},"changyan":{"enable":false,"appid":null,"appkey":null},"valine":{"enable":false,"appid":null,"appkey":null,"notify":false,"verify":false,"placeholder":"Just go go","avatar":"mm","guest_info":"nick,mail,link","pageSize":10},"gitment":{"enable":false,"mint":true,"count":true,"lazy":false,"cleanly":false,"language":null,"github_user":null,"github_repo":null,"client_id":null,"client_secret":null,"proxy_gateway":null,"redirect_protocol":null},"needmoreshare2":{"enable":false,"postbottom":{"enable":false,"options":{"iconStyle":"box","boxForm":"horizontal","position":"bottomCenter","networks":"Weibo,Wechat,Douban,QQZone,Twitter,Facebook"}},"float":{"enable":false,"options":{"iconStyle":"box","boxForm":"horizontal","position":"middleRight","networks":"Weibo,Wechat,Douban,QQZone,Twitter,Facebook"}}},"duoshuo_info":{"ua_enable":true,"admin_enable":false,"user_id":0},"facebook_sdk":{"enable":false,"app_id":null,"fb_admin":null,"like_button":null,"webmaster":null},"facebook_comments_plugin":{"enable":false,"num_of_posts":10,"width":"100%","scheme":"light"},"vkontakte_api":{"enable":false,"app_id":null,"like":true,"comments":true,"num_of_posts":10},"rating":{"enable":false,"id":null,"color":"fc6423"},"leancloud_visitors":{"enable":false,"app_id":null,"app_key":null},"firestore":{"enable":false,"collection":"articles","apiKey":null,"projectId":null,"bluebird":false},"busuanzi_count":{"enable":false,"site_uv":true,"site_uv_header":"<i class=\"fa fa-user\"></i>","site_uv_footer":null,"site_pv":true,"site_pv_header":"<i class=\"fa fa-eye\"></i>","site_pv_footer":null,"page_pv":true,"page_pv_header":"<i class=\"fa fa-file-o\"></i>","page_pv_footer":null},"baidu_push":false,"calendar":{"enable":false,"calendar_id":"<required>","api_key":"<required>","orderBy":"startTime","offsetMax":24,"offsetMin":4,"timeZone":null,"showDeleted":false,"singleEvents":true,"maxResults":250},"algolia_search":{"enable":false,"hits":{"per_page":10},"labels":{"input_placeholder":"Search for Posts","hits_empty":"We didn't find any results for the search: ${query}","hits_stats":"${hits} results found in ${time} ms"}},"local_search":{"enable":false,"trigger":"auto","top_n_per_article":1},"exturl":false,"note":{"style":"simple","icons":false,"border_radius":3,"light_bg_offset":0},"label":true,"tabs":{"enable":true,"transition":{"tabs":false,"labels":true},"border_radius":0},"motion":{"enable":true,"async":false,"transition":{"post_block":"fadeIn","post_header":"slideDownIn","post_body":"slideDownIn","coll_header":"slideLeftIn","sidebar":"slideUpIn"}},"fancybox":true,"pace":false,"pace_theme":"pace-theme-minimal","canvas_nest":false,"three_waves":false,"canvas_lines":false,"canvas_sphere":false,"canvas_ribbon":{"enable":false,"size":300,"alpha":0.6,"zIndex":-1},"vendors":{"_internal":"lib","jquery":null,"fancybox":null,"fancybox_css":null,"fastclick":null,"lazyload":null,"velocity":null,"velocity_ui":null,"ua_parser":null,"fontawesome":null,"algolia_instant_js":null,"algolia_instant_css":null,"pace":null,"pace_css":null,"canvas_nest":null,"three":null,"three_waves":null,"canvas_lines":null,"canvas_sphere":null,"canvas_ribbon":null,"han":null,"needMoreShare2":null},"css":"css","js":"js","images":"images","version":"5.1.4"}}},"excerpt":"<h2 id=\"Digital-signature\"><a href=\"#Digital-signature\" class=\"headerlink\" title=\"Digital signature\"></a>Digital signature</h2>","more":"<p><img src=\"image-20200708104031335.png\" alt></p>\n<ol>\n<li>Bob has private key and public key, and sends the public key to Alice.</li>\n<li>Bob generates a plaintext memo, and uses hash algorithm on it to have a digest.</li>\n<li>Then Bob encrypts the digest using his private key and gets a digital signature.</li>\n<li>Bob then sends the digital signature along with the memo (<strong>Note: the memo is not encrypted</strong>) to Alice.</li>\n<li>Alice uses Bob&#39;s public key and decrypt the digital signature to gets the digest.</li>\n<li>Alice then uses the same hash algorithm on the plaintext memo and gets another digest.</li>\n<li>Alice compares both digests, if they are same, then Alice can be confident that the memo has not been changed.</li>\n</ol>\n<p><em><em>NOTE: </em></em> using digital signature does not encrypt the message itself, if Bob wants to encrypt the message, he will need to use Alice&#39;s public key to encrypt it.</p>\n<h2 id=\"Digital-Certificate\"><a href=\"#Digital-Certificate\" class=\"headerlink\" title=\"Digital Certificate\"></a>Digital Certificate</h2><p>Ditital cert is issued by a third party, and it&#39;s based on trust and it verifies that the digital signature is truly signed by the claims singer. It contains information as:</p>\n<ol>\n<li>Certificate owner&#39;s name;</li>\n<li>Owner&#39;s public key and its expiration date;</li>\n<li>Certificate issuer&#39;s name;</li>\n<li>Certificate issuer&#39;s digital signature</li>\n</ol>\n<p><img src=\"image-20200708110748416.png\" alt></p>\n<p>##　SSL Certificate</p>\n<p><img src=\"image-20200708113856166.png\" alt></p>\n<p><strong>SSL certificate</strong> is a web server&#39;s digital certificate, issued by a third party, and verifies the identity of web server and it&#39;s public key.</p>\n<p>For example, I want to go to <a href=\"https://yahoo.com\" target=\"_blank\" rel=\"noopener\">https://yahoo.com</a> and I want to make sure all communications are secure.</p>\n<ol>\n<li>Browser requests secure pages from a yahoo web server;</li>\n<li>Yahoo server sends its public key with the SSL certificate, signed by a third party (CA);</li>\n<li>Client check with CA for the to make sure the cert is valid (common browser already got public keys installed from many popular CAs);</li>\n<li>Exchange the secret: client browser creates symmetric key, it uses web server&#39;s public key to encrypt the secret and sends it;</li>\n<li>Server uses its private key to decrypt the secret, now the server gets the shared key;</li>\n<li>From now on, the messages between client and server will be encrypted and decrypted using the shared key.</li>\n</ol>\n<h2 id=\"PKI-Public-Key-Infrastructure\"><a href=\"#PKI-Public-Key-Infrastructure\" class=\"headerlink\" title=\"PKI (Public Key Infrastructure)\"></a>PKI (Public Key Infrastructure)</h2><p>A framework for managing digital certificates and public key encryption</p>\n<p><img src=\"image-20200708152328368.png\" alt></p>\n<h2 id=\"SSL-TLS-handshaking-protocol\"><a href=\"#SSL-TLS-handshaking-protocol\" class=\"headerlink\" title=\"SSL/TLS handshaking protocol\"></a>SSL/TLS handshaking protocol</h2><ol>\n<li>Client sends &quot;ClientHello&quot; with SSL/TLS version, cryptographic algorithms and data compression methods that it supports;</li>\n<li>Server responds with &quot;ServerHello&quot; with cryptographic algorithm agreement, session ID, digital cert and its public key;</li>\n<li>Client checks with server&#39;s CA to confirm and establish trust;</li>\n<li>ClientKeyExchange - client sends a shared secret key encrypted by the server&#39;s public key;</li>\n<li>Client sends a &quot;Finished&quot; message with the shared secret key - handshake complete;</li>\n<li>Server responds with a &quot;Finished&quot; message indicating handshake is completed.</li>\n</ol>\n<p><img src=\"image-20200708153106778.png\" alt></p>\n<h2 id=\"Self-signed-certificate\"><a href=\"#Self-signed-certificate\" class=\"headerlink\" title=\"Self signed certificate\"></a>Self signed certificate</h2><p>Self signed SSL certificate does not mean it&#39;s necessarily less secure than purchased SSL certificates</p>\n<p>All SSL certificates just ensure that the identity of the website is certified and the traffic between your browser and the web server are encrypted. They won&#39;t ensure your data won&#39;t be stolen.</p>\n<h2 id=\"Revocation-of-certificates\"><a href=\"#Revocation-of-certificates\" class=\"headerlink\" title=\"Revocation of certificates\"></a>Revocation of certificates</h2><p>Situation causes revocation: </p>\n<ol>\n<li>Certificate is no longer used;</li>\n<li>Details of certificate are changed;</li>\n<li>The certificate owner&#39;s private key was compromised;</li>\n<li>Certificates were stolen from CA</li>\n</ol>"},{"title":"How to read a tech book","top":false,"cover":false,"toc":true,"mathjax":true,"date":"2020-05-08T19:10:25.000Z","summary":"Tips on how to read a tech book","password":null,"_content":"\n\n# How to read a tech book\n<!--more-->\nOriginal article is [here](https://www.cnblogs.com/yudao/p/4391194.html).\n\nThere are three types of tech books:  \n\n1. Books on languages, java, C, Python, etc...\n2. Books on algorithms\n3. Books on certain topics, OS, Linux, networking, etc....\n\n\nFor books on languages, the key is to **practice**. It's much less efficient to just read or listen how to code because it's passive learning. When you finish a Java book, you should write code based on examples in the book, for more than one time.\n\nFor books on algorithms, the key is to **understand**. It's naturally harder to understand how algorithms work because they are abstract, and even if you think you understand them, after couple months you will forget most of it. Thus, we need to use it in real examples. Try some ACM OJ so you can leverage algorithms you learned into real examples, which strenthen your understanding of those algorithms.\n\nFor books that are very theoretical, **read it three times**. \n\nFor the first time, read it fast, don't fall into a specific detail, as the main goal is to get the overall structure and key information of the each chapter.\n\nFor the second time, read it slowly, try to understand every single aspect without any care on progress. If there is something really hard to understand, mark it and deal with it later (you can always go back to it, and search online, or ask other people). It's not recommended to write notes as you read it, instead, when you finish a chapter, think about what you learned from it, and record them. Writting blogs is a good way to keep track of your summaries of knowledge.\n\nFor the third time, presumably it will be easier to read now. You can strengthen your understanding of topics and may even have new ideas. Also, it's useful to practice based on the examples in the book, and read some source codes.","source":"_posts/How-to-read-a-tech-book.md","raw":"---\ntitle: How to read a tech book\ntop: false\ncover: false\ntoc: true\nmathjax: true\ndate: 2020-05-08 15:10:25\nsummary: Tips on how to read a tech book\ntags: [Career]\ncategories: [Tech]\npassword:\n---\n\n\n# How to read a tech book\n<!--more-->\nOriginal article is [here](https://www.cnblogs.com/yudao/p/4391194.html).\n\nThere are three types of tech books:  \n\n1. Books on languages, java, C, Python, etc...\n2. Books on algorithms\n3. Books on certain topics, OS, Linux, networking, etc....\n\n\nFor books on languages, the key is to **practice**. It's much less efficient to just read or listen how to code because it's passive learning. When you finish a Java book, you should write code based on examples in the book, for more than one time.\n\nFor books on algorithms, the key is to **understand**. It's naturally harder to understand how algorithms work because they are abstract, and even if you think you understand them, after couple months you will forget most of it. Thus, we need to use it in real examples. Try some ACM OJ so you can leverage algorithms you learned into real examples, which strenthen your understanding of those algorithms.\n\nFor books that are very theoretical, **read it three times**. \n\nFor the first time, read it fast, don't fall into a specific detail, as the main goal is to get the overall structure and key information of the each chapter.\n\nFor the second time, read it slowly, try to understand every single aspect without any care on progress. If there is something really hard to understand, mark it and deal with it later (you can always go back to it, and search online, or ask other people). It's not recommended to write notes as you read it, instead, when you finish a chapter, think about what you learned from it, and record them. Writting blogs is a good way to keep track of your summaries of knowledge.\n\nFor the third time, presumably it will be easier to read now. You can strengthen your understanding of topics and may even have new ideas. Also, it's useful to practice based on the examples in the book, and read some source codes.","slug":"How-to-read-a-tech-book","published":1,"updated":"2020-05-09T16:01:09.520Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ckcxuqem7000bfkjx9xdp3o2s","content":"<h1 id=\"How-to-read-a-tech-book\"><a href=\"#How-to-read-a-tech-book\" class=\"headerlink\" title=\"How to read a tech book\"></a>How to read a tech book</h1><a id=\"more\"></a>\n<p>Original article is <a href=\"https://www.cnblogs.com/yudao/p/4391194.html\" target=\"_blank\" rel=\"noopener\">here</a>.</p>\n<p>There are three types of tech books:  </p>\n<ol>\n<li>Books on languages, java, C, Python, etc...</li>\n<li>Books on algorithms</li>\n<li>Books on certain topics, OS, Linux, networking, etc....</li>\n</ol>\n<p>For books on languages, the key is to <strong>practice</strong>. It&#39;s much less efficient to just read or listen how to code because it&#39;s passive learning. When you finish a Java book, you should write code based on examples in the book, for more than one time.</p>\n<p>For books on algorithms, the key is to <strong>understand</strong>. It&#39;s naturally harder to understand how algorithms work because they are abstract, and even if you think you understand them, after couple months you will forget most of it. Thus, we need to use it in real examples. Try some ACM OJ so you can leverage algorithms you learned into real examples, which strenthen your understanding of those algorithms.</p>\n<p>For books that are very theoretical, <strong>read it three times</strong>. </p>\n<p>For the first time, read it fast, don&#39;t fall into a specific detail, as the main goal is to get the overall structure and key information of the each chapter.</p>\n<p>For the second time, read it slowly, try to understand every single aspect without any care on progress. If there is something really hard to understand, mark it and deal with it later (you can always go back to it, and search online, or ask other people). It&#39;s not recommended to write notes as you read it, instead, when you finish a chapter, think about what you learned from it, and record them. Writting blogs is a good way to keep track of your summaries of knowledge.</p>\n<p>For the third time, presumably it will be easier to read now. You can strengthen your understanding of topics and may even have new ideas. Also, it&#39;s useful to practice based on the examples in the book, and read some source codes.</p>\n","site":{"data":{"next":{"override":false,"favicon":{"small":"/uploads/favicon-16x16.png","medium":"/uploads/favicon-32x32.png","apple_touch_icon":"/uploads/apple-touch-icon.png","safari_pinned_tab":"/uploads/favicon.png","ms_browserconfig":"/uploads/browserconfig.xml"},"keywords":"Hexo, NexT","rss":null,"footer":{"icon":"user","copyright":null,"powered":true,"theme":{"enable":true,"version":true}},"canonical":true,"seo":false,"index_with_subtitle":false,"menu":{"home":"/ || home","archives":"/archives/ || archive"},"menu_icons":{"enable":true},"scheme":"Pisces","social_icons":{"enable":true,"icons_only":false,"transition":false},"links_icon":"link","links_title":"Links","links_layout":"block","toc":{"enable":true,"number":true,"wrap":false},"sidebar":{"position":"left","display":"post","offset":12,"b2t":false,"scrollpercent":false,"onmobile":false},"scroll_to_more":true,"save_scroll":false,"excerpt_description":true,"auto_excerpt":{"enable":false,"length":30},"read_more_btn":true,"post_meta":{"item_text":true,"created_at":true,"updated_at":false,"categories":true},"post_wordcount":{"item_text":true,"wordcount":false,"min2read":false,"totalcount":false,"separated_meta":true},"post_copyright":{"enable":false,"license":"CC BY-NC-SA 3.0","license_url":"https://creativecommons.org/licenses/by-nc-sa/3.0/"},"mobile_layout_economy":false,"android_chrome_color":"#222","custom_logo":{"enabled":false,"image":null},"marked":{"smartypants":false},"highlight_theme":"normal","font":{"enable":false,"host":null,"global":{"external":true,"family":"Lato","size":null},"headings":{"external":true,"family":null,"size":null},"posts":{"external":true,"family":null},"logo":{"external":true,"family":null,"size":null},"codes":{"external":true,"family":null,"size":null}},"mathjax":{"enable":false,"per_page":false,"cdn":"//cdn.bootcss.com/mathjax/2.7.1/latest.js?config=TeX-AMS-MML_HTMLorMML"},"han":false,"disqus":{"enable":false,"shortname":null,"count":true},"changyan":{"enable":false,"appid":null,"appkey":null},"valine":{"enable":false,"appid":null,"appkey":null,"notify":false,"verify":false,"placeholder":"Just go go","avatar":"mm","guest_info":"nick,mail,link","pageSize":10},"gitment":{"enable":false,"mint":true,"count":true,"lazy":false,"cleanly":false,"language":null,"github_user":null,"github_repo":null,"client_id":null,"client_secret":null,"proxy_gateway":null,"redirect_protocol":null},"needmoreshare2":{"enable":false,"postbottom":{"enable":false,"options":{"iconStyle":"box","boxForm":"horizontal","position":"bottomCenter","networks":"Weibo,Wechat,Douban,QQZone,Twitter,Facebook"}},"float":{"enable":false,"options":{"iconStyle":"box","boxForm":"horizontal","position":"middleRight","networks":"Weibo,Wechat,Douban,QQZone,Twitter,Facebook"}}},"duoshuo_info":{"ua_enable":true,"admin_enable":false,"user_id":0},"facebook_sdk":{"enable":false,"app_id":null,"fb_admin":null,"like_button":null,"webmaster":null},"facebook_comments_plugin":{"enable":false,"num_of_posts":10,"width":"100%","scheme":"light"},"vkontakte_api":{"enable":false,"app_id":null,"like":true,"comments":true,"num_of_posts":10},"rating":{"enable":false,"id":null,"color":"fc6423"},"leancloud_visitors":{"enable":false,"app_id":null,"app_key":null},"firestore":{"enable":false,"collection":"articles","apiKey":null,"projectId":null,"bluebird":false},"busuanzi_count":{"enable":false,"site_uv":true,"site_uv_header":"<i class=\"fa fa-user\"></i>","site_uv_footer":null,"site_pv":true,"site_pv_header":"<i class=\"fa fa-eye\"></i>","site_pv_footer":null,"page_pv":true,"page_pv_header":"<i class=\"fa fa-file-o\"></i>","page_pv_footer":null},"baidu_push":false,"calendar":{"enable":false,"calendar_id":"<required>","api_key":"<required>","orderBy":"startTime","offsetMax":24,"offsetMin":4,"timeZone":null,"showDeleted":false,"singleEvents":true,"maxResults":250},"algolia_search":{"enable":false,"hits":{"per_page":10},"labels":{"input_placeholder":"Search for Posts","hits_empty":"We didn't find any results for the search: ${query}","hits_stats":"${hits} results found in ${time} ms"}},"local_search":{"enable":false,"trigger":"auto","top_n_per_article":1},"exturl":false,"note":{"style":"simple","icons":false,"border_radius":3,"light_bg_offset":0},"label":true,"tabs":{"enable":true,"transition":{"tabs":false,"labels":true},"border_radius":0},"motion":{"enable":true,"async":false,"transition":{"post_block":"fadeIn","post_header":"slideDownIn","post_body":"slideDownIn","coll_header":"slideLeftIn","sidebar":"slideUpIn"}},"fancybox":true,"pace":false,"pace_theme":"pace-theme-minimal","canvas_nest":false,"three_waves":false,"canvas_lines":false,"canvas_sphere":false,"canvas_ribbon":{"enable":false,"size":300,"alpha":0.6,"zIndex":-1},"vendors":{"_internal":"lib","jquery":null,"fancybox":null,"fancybox_css":null,"fastclick":null,"lazyload":null,"velocity":null,"velocity_ui":null,"ua_parser":null,"fontawesome":null,"algolia_instant_js":null,"algolia_instant_css":null,"pace":null,"pace_css":null,"canvas_nest":null,"three":null,"three_waves":null,"canvas_lines":null,"canvas_sphere":null,"canvas_ribbon":null,"han":null,"needMoreShare2":null},"css":"css","js":"js","images":"images","version":"5.1.4"}}},"excerpt":"<h1 id=\"How-to-read-a-tech-book\"><a href=\"#How-to-read-a-tech-book\" class=\"headerlink\" title=\"How to read a tech book\"></a>How to read a tech book</h1>","more":"<p>Original article is <a href=\"https://www.cnblogs.com/yudao/p/4391194.html\" target=\"_blank\" rel=\"noopener\">here</a>.</p>\n<p>There are three types of tech books:  </p>\n<ol>\n<li>Books on languages, java, C, Python, etc...</li>\n<li>Books on algorithms</li>\n<li>Books on certain topics, OS, Linux, networking, etc....</li>\n</ol>\n<p>For books on languages, the key is to <strong>practice</strong>. It&#39;s much less efficient to just read or listen how to code because it&#39;s passive learning. When you finish a Java book, you should write code based on examples in the book, for more than one time.</p>\n<p>For books on algorithms, the key is to <strong>understand</strong>. It&#39;s naturally harder to understand how algorithms work because they are abstract, and even if you think you understand them, after couple months you will forget most of it. Thus, we need to use it in real examples. Try some ACM OJ so you can leverage algorithms you learned into real examples, which strenthen your understanding of those algorithms.</p>\n<p>For books that are very theoretical, <strong>read it three times</strong>. </p>\n<p>For the first time, read it fast, don&#39;t fall into a specific detail, as the main goal is to get the overall structure and key information of the each chapter.</p>\n<p>For the second time, read it slowly, try to understand every single aspect without any care on progress. If there is something really hard to understand, mark it and deal with it later (you can always go back to it, and search online, or ask other people). It&#39;s not recommended to write notes as you read it, instead, when you finish a chapter, think about what you learned from it, and record them. Writting blogs is a good way to keep track of your summaries of knowledge.</p>\n<p>For the third time, presumably it will be easier to read now. You can strengthen your understanding of topics and may even have new ideas. Also, it&#39;s useful to practice based on the examples in the book, and read some source codes.</p>"},{"title":"July 1st half notes","top":false,"cover":false,"toc":true,"mathjax":true,"date":"2020-07-17T19:49:43.000Z","summary":null,"password":null,"_content":"\n## Integration styles\n<!--more-->\n### 1. [File Transfer](https://www.youtube.com/watch?v=_uRYlUuxjVA&list=PLdsOZAx8I5umhnn5LLTNJbFgwA3xbycar&index=66)\n\nFTP, HDFS, SCP, SMB, CIFS\n\n**Pros:**\n\n1. Universal integration style\n2. Integration simplicity\n3. System abstraction\n\n**Cons:**\n\n1. Error processing\n2. Data synchronization timeliness\n3. Data-only transfer\n\n### 2. [Shared Database](https://www.youtube.com/watch?v=CSAFJNoT34M&list=PLdsOZAx8I5umhnn5LLTNJbFgwA3xbycar&index=65)\n\nSQL, ODBC, JDBC, OLE-DB, RDA\n\n**Pros:**\n\n1. Near-universal integration\n2. System abstraction\n3. System decoupling\n4. East of integration\n\n**Cons:**\n\n1. Doesn't work well with ORM (A can't assume table is not touched by others)\n2. performance bottleneck issues (if too many apps attached to the same db)\n3. Schema change issues\n4. Data ownership issues\n\n### 3. [Remote Procedure Call](https://www.youtube.com/watch?v=OGgbajZNwpU&list=PLdsOZAx8I5umhnn5LLTNJbFgwA3xbycar&index=64)\n\nREST, SOAP, RMI (Remote Method Invocation), CORBA (Common Object Request Broker Architecture), WebSockets , CGI (Common Gateway Interface)\n\n**Pros:**\n\n1. preserve data encapsulation and ownership\n2. external systems integration\n3. mature frameworks and tools\n\n**Cons:**\n\n1. tight system coupling (if B is down, A has no other ways to defer it)\n2. async communication (on truly queueing mechanism with RPI)\n3. broadcast capabilities\n\n### 4. [Messaging](https://www.youtube.com/watch?v=Oq5VP0cKwXI&list=PLdsOZAx8I5umhnn5LLTNJbFgwA3xbycar&index=63)\n\nJMS (Java Message Service), MSMQ (Microsoft Message Queue), AMQP (Advanced Message Queuing Protocol), AWS SNS, AWS SQS, STOMP (Simple Text Oriented Messaging Protocol), SMPP (Short Message Peer-to-Peer SMS Messaging), MQTT (MQ Telemetry Transport - M2M/IOT Messaging), JT/400 (AS400 Data Queue)\n\n**Pros:**\n\n1. Highly decoupled system\n2. Guaranteed delivery\n3. Async communication\n4. Broadcast capabilities\n5. East of scalability\n\n**Cons:**\n\n1. Integration beyond firewall (RPI shines here)\n2. Implementation complexity\n3. Testing complexity\n4. Cross platform standards\n5. Async error handling\n\n## The Good Parts of AWS with Daniel Vassallo\n\n[link](https://softwareengineeringdaily.com/2020/07/07/the-good-parts-of-aws-with-daniel-vassallo/)\n\nThey talked about AWS technologies, with the focus on what you really need to build an application. Some notes I have: \n\n1. You might be disappointed with DynamoDB if you get from RDBMB to that. It's more similar to Redis than MySQL;\n2. Always use EC2 by default;\n3. With S3 you can separate storage and computing, one of the least appreciated values of S3 is you can think of S3 as having infinite bandwidth for all practical purposes. And use the default one at the beginning.\n4. Default to network load balancers in general as ALB has some scale issues but NLB generally won't because it's a big multi-tenant router, you will have to use all of AWS's capacity to have issues.\n\n","source":"_posts/July-1st-half-notes.md","raw":"---\ntitle: July 1st half notes\ntop: false\ncover: false\ntoc: true\nmathjax: true\ndate: 2020-07-17 15:49:43\nsummary:\ntags: [Sharing, Architecture]\ncategories: [Tech]\npassword:\n---\n\n## Integration styles\n<!--more-->\n### 1. [File Transfer](https://www.youtube.com/watch?v=_uRYlUuxjVA&list=PLdsOZAx8I5umhnn5LLTNJbFgwA3xbycar&index=66)\n\nFTP, HDFS, SCP, SMB, CIFS\n\n**Pros:**\n\n1. Universal integration style\n2. Integration simplicity\n3. System abstraction\n\n**Cons:**\n\n1. Error processing\n2. Data synchronization timeliness\n3. Data-only transfer\n\n### 2. [Shared Database](https://www.youtube.com/watch?v=CSAFJNoT34M&list=PLdsOZAx8I5umhnn5LLTNJbFgwA3xbycar&index=65)\n\nSQL, ODBC, JDBC, OLE-DB, RDA\n\n**Pros:**\n\n1. Near-universal integration\n2. System abstraction\n3. System decoupling\n4. East of integration\n\n**Cons:**\n\n1. Doesn't work well with ORM (A can't assume table is not touched by others)\n2. performance bottleneck issues (if too many apps attached to the same db)\n3. Schema change issues\n4. Data ownership issues\n\n### 3. [Remote Procedure Call](https://www.youtube.com/watch?v=OGgbajZNwpU&list=PLdsOZAx8I5umhnn5LLTNJbFgwA3xbycar&index=64)\n\nREST, SOAP, RMI (Remote Method Invocation), CORBA (Common Object Request Broker Architecture), WebSockets , CGI (Common Gateway Interface)\n\n**Pros:**\n\n1. preserve data encapsulation and ownership\n2. external systems integration\n3. mature frameworks and tools\n\n**Cons:**\n\n1. tight system coupling (if B is down, A has no other ways to defer it)\n2. async communication (on truly queueing mechanism with RPI)\n3. broadcast capabilities\n\n### 4. [Messaging](https://www.youtube.com/watch?v=Oq5VP0cKwXI&list=PLdsOZAx8I5umhnn5LLTNJbFgwA3xbycar&index=63)\n\nJMS (Java Message Service), MSMQ (Microsoft Message Queue), AMQP (Advanced Message Queuing Protocol), AWS SNS, AWS SQS, STOMP (Simple Text Oriented Messaging Protocol), SMPP (Short Message Peer-to-Peer SMS Messaging), MQTT (MQ Telemetry Transport - M2M/IOT Messaging), JT/400 (AS400 Data Queue)\n\n**Pros:**\n\n1. Highly decoupled system\n2. Guaranteed delivery\n3. Async communication\n4. Broadcast capabilities\n5. East of scalability\n\n**Cons:**\n\n1. Integration beyond firewall (RPI shines here)\n2. Implementation complexity\n3. Testing complexity\n4. Cross platform standards\n5. Async error handling\n\n## The Good Parts of AWS with Daniel Vassallo\n\n[link](https://softwareengineeringdaily.com/2020/07/07/the-good-parts-of-aws-with-daniel-vassallo/)\n\nThey talked about AWS technologies, with the focus on what you really need to build an application. Some notes I have: \n\n1. You might be disappointed with DynamoDB if you get from RDBMB to that. It's more similar to Redis than MySQL;\n2. Always use EC2 by default;\n3. With S3 you can separate storage and computing, one of the least appreciated values of S3 is you can think of S3 as having infinite bandwidth for all practical purposes. And use the default one at the beginning.\n4. Default to network load balancers in general as ALB has some scale issues but NLB generally won't because it's a big multi-tenant router, you will have to use all of AWS's capacity to have issues.\n\n","slug":"July-1st-half-notes","published":1,"updated":"2020-07-17T19:52:33.653Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ckcxuqemk000ffkjx32j1vzcb","content":"<h2 id=\"Integration-styles\"><a href=\"#Integration-styles\" class=\"headerlink\" title=\"Integration styles\"></a>Integration styles</h2><a id=\"more\"></a>\n<h3 id=\"1-File-Transfer\"><a href=\"#1-File-Transfer\" class=\"headerlink\" title=\"1. File Transfer\"></a>1. <a href=\"https://www.youtube.com/watch?v=_uRYlUuxjVA&list=PLdsOZAx8I5umhnn5LLTNJbFgwA3xbycar&index=66\" target=\"_blank\" rel=\"noopener\">File Transfer</a></h3><p>FTP, HDFS, SCP, SMB, CIFS</p>\n<p><strong>Pros:</strong></p>\n<ol>\n<li>Universal integration style</li>\n<li>Integration simplicity</li>\n<li>System abstraction</li>\n</ol>\n<p><strong>Cons:</strong></p>\n<ol>\n<li>Error processing</li>\n<li>Data synchronization timeliness</li>\n<li>Data-only transfer</li>\n</ol>\n<h3 id=\"2-Shared-Database\"><a href=\"#2-Shared-Database\" class=\"headerlink\" title=\"2. Shared Database\"></a>2. <a href=\"https://www.youtube.com/watch?v=CSAFJNoT34M&list=PLdsOZAx8I5umhnn5LLTNJbFgwA3xbycar&index=65\" target=\"_blank\" rel=\"noopener\">Shared Database</a></h3><p>SQL, ODBC, JDBC, OLE-DB, RDA</p>\n<p><strong>Pros:</strong></p>\n<ol>\n<li>Near-universal integration</li>\n<li>System abstraction</li>\n<li>System decoupling</li>\n<li>East of integration</li>\n</ol>\n<p><strong>Cons:</strong></p>\n<ol>\n<li>Doesn&#39;t work well with ORM (A can&#39;t assume table is not touched by others)</li>\n<li>performance bottleneck issues (if too many apps attached to the same db)</li>\n<li>Schema change issues</li>\n<li>Data ownership issues</li>\n</ol>\n<h3 id=\"3-Remote-Procedure-Call\"><a href=\"#3-Remote-Procedure-Call\" class=\"headerlink\" title=\"3. Remote Procedure Call\"></a>3. <a href=\"https://www.youtube.com/watch?v=OGgbajZNwpU&list=PLdsOZAx8I5umhnn5LLTNJbFgwA3xbycar&index=64\" target=\"_blank\" rel=\"noopener\">Remote Procedure Call</a></h3><p>REST, SOAP, RMI (Remote Method Invocation), CORBA (Common Object Request Broker Architecture), WebSockets , CGI (Common Gateway Interface)</p>\n<p><strong>Pros:</strong></p>\n<ol>\n<li>preserve data encapsulation and ownership</li>\n<li>external systems integration</li>\n<li>mature frameworks and tools</li>\n</ol>\n<p><strong>Cons:</strong></p>\n<ol>\n<li>tight system coupling (if B is down, A has no other ways to defer it)</li>\n<li>async communication (on truly queueing mechanism with RPI)</li>\n<li>broadcast capabilities</li>\n</ol>\n<h3 id=\"4-Messaging\"><a href=\"#4-Messaging\" class=\"headerlink\" title=\"4. Messaging\"></a>4. <a href=\"https://www.youtube.com/watch?v=Oq5VP0cKwXI&list=PLdsOZAx8I5umhnn5LLTNJbFgwA3xbycar&index=63\" target=\"_blank\" rel=\"noopener\">Messaging</a></h3><p>JMS (Java Message Service), MSMQ (Microsoft Message Queue), AMQP (Advanced Message Queuing Protocol), AWS SNS, AWS SQS, STOMP (Simple Text Oriented Messaging Protocol), SMPP (Short Message Peer-to-Peer SMS Messaging), MQTT (MQ Telemetry Transport - M2M/IOT Messaging), JT/400 (AS400 Data Queue)</p>\n<p><strong>Pros:</strong></p>\n<ol>\n<li>Highly decoupled system</li>\n<li>Guaranteed delivery</li>\n<li>Async communication</li>\n<li>Broadcast capabilities</li>\n<li>East of scalability</li>\n</ol>\n<p><strong>Cons:</strong></p>\n<ol>\n<li>Integration beyond firewall (RPI shines here)</li>\n<li>Implementation complexity</li>\n<li>Testing complexity</li>\n<li>Cross platform standards</li>\n<li>Async error handling</li>\n</ol>\n<h2 id=\"The-Good-Parts-of-AWS-with-Daniel-Vassallo\"><a href=\"#The-Good-Parts-of-AWS-with-Daniel-Vassallo\" class=\"headerlink\" title=\"The Good Parts of AWS with Daniel Vassallo\"></a>The Good Parts of AWS with Daniel Vassallo</h2><p><a href=\"https://softwareengineeringdaily.com/2020/07/07/the-good-parts-of-aws-with-daniel-vassallo/\" target=\"_blank\" rel=\"noopener\">link</a></p>\n<p>They talked about AWS technologies, with the focus on what you really need to build an application. Some notes I have: </p>\n<ol>\n<li>You might be disappointed with DynamoDB if you get from RDBMB to that. It&#39;s more similar to Redis than MySQL;</li>\n<li>Always use EC2 by default;</li>\n<li>With S3 you can separate storage and computing, one of the least appreciated values of S3 is you can think of S3 as having infinite bandwidth for all practical purposes. And use the default one at the beginning.</li>\n<li>Default to network load balancers in general as ALB has some scale issues but NLB generally won&#39;t because it&#39;s a big multi-tenant router, you will have to use all of AWS&#39;s capacity to have issues.</li>\n</ol>\n","site":{"data":{"next":{"override":false,"favicon":{"small":"/uploads/favicon-16x16.png","medium":"/uploads/favicon-32x32.png","apple_touch_icon":"/uploads/apple-touch-icon.png","safari_pinned_tab":"/uploads/favicon.png","ms_browserconfig":"/uploads/browserconfig.xml"},"keywords":"Hexo, NexT","rss":null,"footer":{"icon":"user","copyright":null,"powered":true,"theme":{"enable":true,"version":true}},"canonical":true,"seo":false,"index_with_subtitle":false,"menu":{"home":"/ || home","archives":"/archives/ || archive"},"menu_icons":{"enable":true},"scheme":"Pisces","social_icons":{"enable":true,"icons_only":false,"transition":false},"links_icon":"link","links_title":"Links","links_layout":"block","toc":{"enable":true,"number":true,"wrap":false},"sidebar":{"position":"left","display":"post","offset":12,"b2t":false,"scrollpercent":false,"onmobile":false},"scroll_to_more":true,"save_scroll":false,"excerpt_description":true,"auto_excerpt":{"enable":false,"length":30},"read_more_btn":true,"post_meta":{"item_text":true,"created_at":true,"updated_at":false,"categories":true},"post_wordcount":{"item_text":true,"wordcount":false,"min2read":false,"totalcount":false,"separated_meta":true},"post_copyright":{"enable":false,"license":"CC BY-NC-SA 3.0","license_url":"https://creativecommons.org/licenses/by-nc-sa/3.0/"},"mobile_layout_economy":false,"android_chrome_color":"#222","custom_logo":{"enabled":false,"image":null},"marked":{"smartypants":false},"highlight_theme":"normal","font":{"enable":false,"host":null,"global":{"external":true,"family":"Lato","size":null},"headings":{"external":true,"family":null,"size":null},"posts":{"external":true,"family":null},"logo":{"external":true,"family":null,"size":null},"codes":{"external":true,"family":null,"size":null}},"mathjax":{"enable":false,"per_page":false,"cdn":"//cdn.bootcss.com/mathjax/2.7.1/latest.js?config=TeX-AMS-MML_HTMLorMML"},"han":false,"disqus":{"enable":false,"shortname":null,"count":true},"changyan":{"enable":false,"appid":null,"appkey":null},"valine":{"enable":false,"appid":null,"appkey":null,"notify":false,"verify":false,"placeholder":"Just go go","avatar":"mm","guest_info":"nick,mail,link","pageSize":10},"gitment":{"enable":false,"mint":true,"count":true,"lazy":false,"cleanly":false,"language":null,"github_user":null,"github_repo":null,"client_id":null,"client_secret":null,"proxy_gateway":null,"redirect_protocol":null},"needmoreshare2":{"enable":false,"postbottom":{"enable":false,"options":{"iconStyle":"box","boxForm":"horizontal","position":"bottomCenter","networks":"Weibo,Wechat,Douban,QQZone,Twitter,Facebook"}},"float":{"enable":false,"options":{"iconStyle":"box","boxForm":"horizontal","position":"middleRight","networks":"Weibo,Wechat,Douban,QQZone,Twitter,Facebook"}}},"duoshuo_info":{"ua_enable":true,"admin_enable":false,"user_id":0},"facebook_sdk":{"enable":false,"app_id":null,"fb_admin":null,"like_button":null,"webmaster":null},"facebook_comments_plugin":{"enable":false,"num_of_posts":10,"width":"100%","scheme":"light"},"vkontakte_api":{"enable":false,"app_id":null,"like":true,"comments":true,"num_of_posts":10},"rating":{"enable":false,"id":null,"color":"fc6423"},"leancloud_visitors":{"enable":false,"app_id":null,"app_key":null},"firestore":{"enable":false,"collection":"articles","apiKey":null,"projectId":null,"bluebird":false},"busuanzi_count":{"enable":false,"site_uv":true,"site_uv_header":"<i class=\"fa fa-user\"></i>","site_uv_footer":null,"site_pv":true,"site_pv_header":"<i class=\"fa fa-eye\"></i>","site_pv_footer":null,"page_pv":true,"page_pv_header":"<i class=\"fa fa-file-o\"></i>","page_pv_footer":null},"baidu_push":false,"calendar":{"enable":false,"calendar_id":"<required>","api_key":"<required>","orderBy":"startTime","offsetMax":24,"offsetMin":4,"timeZone":null,"showDeleted":false,"singleEvents":true,"maxResults":250},"algolia_search":{"enable":false,"hits":{"per_page":10},"labels":{"input_placeholder":"Search for Posts","hits_empty":"We didn't find any results for the search: ${query}","hits_stats":"${hits} results found in ${time} ms"}},"local_search":{"enable":false,"trigger":"auto","top_n_per_article":1},"exturl":false,"note":{"style":"simple","icons":false,"border_radius":3,"light_bg_offset":0},"label":true,"tabs":{"enable":true,"transition":{"tabs":false,"labels":true},"border_radius":0},"motion":{"enable":true,"async":false,"transition":{"post_block":"fadeIn","post_header":"slideDownIn","post_body":"slideDownIn","coll_header":"slideLeftIn","sidebar":"slideUpIn"}},"fancybox":true,"pace":false,"pace_theme":"pace-theme-minimal","canvas_nest":false,"three_waves":false,"canvas_lines":false,"canvas_sphere":false,"canvas_ribbon":{"enable":false,"size":300,"alpha":0.6,"zIndex":-1},"vendors":{"_internal":"lib","jquery":null,"fancybox":null,"fancybox_css":null,"fastclick":null,"lazyload":null,"velocity":null,"velocity_ui":null,"ua_parser":null,"fontawesome":null,"algolia_instant_js":null,"algolia_instant_css":null,"pace":null,"pace_css":null,"canvas_nest":null,"three":null,"three_waves":null,"canvas_lines":null,"canvas_sphere":null,"canvas_ribbon":null,"han":null,"needMoreShare2":null},"css":"css","js":"js","images":"images","version":"5.1.4"}}},"excerpt":"<h2 id=\"Integration-styles\"><a href=\"#Integration-styles\" class=\"headerlink\" title=\"Integration styles\"></a>Integration styles</h2>","more":"<h3 id=\"1-File-Transfer\"><a href=\"#1-File-Transfer\" class=\"headerlink\" title=\"1. File Transfer\"></a>1. <a href=\"https://www.youtube.com/watch?v=_uRYlUuxjVA&list=PLdsOZAx8I5umhnn5LLTNJbFgwA3xbycar&index=66\" target=\"_blank\" rel=\"noopener\">File Transfer</a></h3><p>FTP, HDFS, SCP, SMB, CIFS</p>\n<p><strong>Pros:</strong></p>\n<ol>\n<li>Universal integration style</li>\n<li>Integration simplicity</li>\n<li>System abstraction</li>\n</ol>\n<p><strong>Cons:</strong></p>\n<ol>\n<li>Error processing</li>\n<li>Data synchronization timeliness</li>\n<li>Data-only transfer</li>\n</ol>\n<h3 id=\"2-Shared-Database\"><a href=\"#2-Shared-Database\" class=\"headerlink\" title=\"2. Shared Database\"></a>2. <a href=\"https://www.youtube.com/watch?v=CSAFJNoT34M&list=PLdsOZAx8I5umhnn5LLTNJbFgwA3xbycar&index=65\" target=\"_blank\" rel=\"noopener\">Shared Database</a></h3><p>SQL, ODBC, JDBC, OLE-DB, RDA</p>\n<p><strong>Pros:</strong></p>\n<ol>\n<li>Near-universal integration</li>\n<li>System abstraction</li>\n<li>System decoupling</li>\n<li>East of integration</li>\n</ol>\n<p><strong>Cons:</strong></p>\n<ol>\n<li>Doesn&#39;t work well with ORM (A can&#39;t assume table is not touched by others)</li>\n<li>performance bottleneck issues (if too many apps attached to the same db)</li>\n<li>Schema change issues</li>\n<li>Data ownership issues</li>\n</ol>\n<h3 id=\"3-Remote-Procedure-Call\"><a href=\"#3-Remote-Procedure-Call\" class=\"headerlink\" title=\"3. Remote Procedure Call\"></a>3. <a href=\"https://www.youtube.com/watch?v=OGgbajZNwpU&list=PLdsOZAx8I5umhnn5LLTNJbFgwA3xbycar&index=64\" target=\"_blank\" rel=\"noopener\">Remote Procedure Call</a></h3><p>REST, SOAP, RMI (Remote Method Invocation), CORBA (Common Object Request Broker Architecture), WebSockets , CGI (Common Gateway Interface)</p>\n<p><strong>Pros:</strong></p>\n<ol>\n<li>preserve data encapsulation and ownership</li>\n<li>external systems integration</li>\n<li>mature frameworks and tools</li>\n</ol>\n<p><strong>Cons:</strong></p>\n<ol>\n<li>tight system coupling (if B is down, A has no other ways to defer it)</li>\n<li>async communication (on truly queueing mechanism with RPI)</li>\n<li>broadcast capabilities</li>\n</ol>\n<h3 id=\"4-Messaging\"><a href=\"#4-Messaging\" class=\"headerlink\" title=\"4. Messaging\"></a>4. <a href=\"https://www.youtube.com/watch?v=Oq5VP0cKwXI&list=PLdsOZAx8I5umhnn5LLTNJbFgwA3xbycar&index=63\" target=\"_blank\" rel=\"noopener\">Messaging</a></h3><p>JMS (Java Message Service), MSMQ (Microsoft Message Queue), AMQP (Advanced Message Queuing Protocol), AWS SNS, AWS SQS, STOMP (Simple Text Oriented Messaging Protocol), SMPP (Short Message Peer-to-Peer SMS Messaging), MQTT (MQ Telemetry Transport - M2M/IOT Messaging), JT/400 (AS400 Data Queue)</p>\n<p><strong>Pros:</strong></p>\n<ol>\n<li>Highly decoupled system</li>\n<li>Guaranteed delivery</li>\n<li>Async communication</li>\n<li>Broadcast capabilities</li>\n<li>East of scalability</li>\n</ol>\n<p><strong>Cons:</strong></p>\n<ol>\n<li>Integration beyond firewall (RPI shines here)</li>\n<li>Implementation complexity</li>\n<li>Testing complexity</li>\n<li>Cross platform standards</li>\n<li>Async error handling</li>\n</ol>\n<h2 id=\"The-Good-Parts-of-AWS-with-Daniel-Vassallo\"><a href=\"#The-Good-Parts-of-AWS-with-Daniel-Vassallo\" class=\"headerlink\" title=\"The Good Parts of AWS with Daniel Vassallo\"></a>The Good Parts of AWS with Daniel Vassallo</h2><p><a href=\"https://softwareengineeringdaily.com/2020/07/07/the-good-parts-of-aws-with-daniel-vassallo/\" target=\"_blank\" rel=\"noopener\">link</a></p>\n<p>They talked about AWS technologies, with the focus on what you really need to build an application. Some notes I have: </p>\n<ol>\n<li>You might be disappointed with DynamoDB if you get from RDBMB to that. It&#39;s more similar to Redis than MySQL;</li>\n<li>Always use EC2 by default;</li>\n<li>With S3 you can separate storage and computing, one of the least appreciated values of S3 is you can think of S3 as having infinite bandwidth for all practical purposes. And use the default one at the beginning.</li>\n<li>Default to network load balancers in general as ALB has some scale issues but NLB generally won&#39;t because it&#39;s a big multi-tenant router, you will have to use all of AWS&#39;s capacity to have issues.</li>\n</ol>"},{"title":"Java Exception Handling Best Practices","top":false,"cover":false,"toc":true,"mathjax":true,"date":"2020-04-21T10:40:45.000Z","summary":"Java Exception Handling Best Practices","password":null,"_content":"\n#### Do **NOT** just catch Exception or Throwable, which will also catch RuntimeException\n<!--more-->\n  \n```\n// Bad\ntry {\n  ...\n} catch (Throwable th) {\n  ...\n}\n// Good\ntry {\n  ...\n} catch (SpecificException ex) {\n  ...\n}\n```\n#### When catching an exception, do **NOT** just throw it. Instead, do something like **throw it with some description**, **log an error** or **stop the process.**\n\n**If you catch an exception and do nothing or just log and then let the method continue, include a comment why it's ok to ignore the exception**\n```\n// Bad\ntry {\n  ...\n} catch (SpecificException ex) {\n  throw ex;\n}\n// Good \ntry {\n  ...\n} catch (SpecificException ex) {\n  log.error(\"This function does not work due to SpecificException: \", ex);\n}\n```\n\nOR\n\n```\ntry {\n  ...\n} catch (SpecificException ex) {\n  throw new SpecificException(\"This function does not work due to SpecificException: \", ex);\n}\n```\n\n\n\nOR\n\n\n\n```\ntry {\n  ...\n} catch (SpecificException ex) {\n  // Let the method continue because xyz...\n  log.info(\"xxxxxx\");\n}\n```\n  \n\n#### When catching an exception, we may want to log an error or warning, and do **NOT** just log the string without the stacktrace\n\n  \n```\n// Bad\ntry {\n  ...\n} catch (SpecificException ex) {\n  log.error(\"Something wrong...\");\n}\n// Good \ntry {\n  ...\n} catch (SpecificException ex) {\n  log.error(\"This function does not work due to SpecificException: \", ex);\n}\n```\n  \n\n#### How all kinds of different methods in Exception work in the console\n\n  \n```\npublic class TestAllMethods {\n\tstatic final Log log = LogFactory.getLog(TestAllMethods.class);\n\tpublic static void main(String[] args) {\n\t\ttry {\n\t\t\tSystem.out.println(10/0);\n\t\t} catch (ArithmeticException ex) {\n\t\t\tex.printStackTrace();\n\t\t\t//You will get: \n\t\t\t// java.lang.ArithmeticException: / by zero\n\t\t\t//\t\tat TestAllMethods.main(TestAllMethods.java:10)\n\n\t\t\tlog.error(\"Try just the exception: \\n\", ex);\n\t\t\t// You will get: \n\t\t\t// Sep 06, 2017 3:45:54 PM TestAllMethods main\n\t\t\t// SEVERE: Try just the exception: \n\n\t\t\t// java.lang.ArithmeticException: / by zero\n\t\t\t//  \tat TestAllMethods.main(TestAllMethods.java:10)\n\n\n\t\t\tlog.error(\"Try getMessage(): \\n\" + ex.getMessage());  \n            // You will get:\n\t\t\t//  Sep 06, 2017 3:45:54 PM TestAllMethods main\n\t\t\t//  SEVERE: Try getMessage(): \n\t\t\t//  / by zero\n\n\t\t\tlog.error(\"Try toString(): \\n\" + ex.toString());\n\t\t\t// You will get:\n     \t\t// Sep 06, 2017 3:45:54 PM TestAllMethods main\n\t\t\t// SEVERE: Try toString(): \n\t\t\t// java.lang.ArithmeticException: / by zero\n\n\n\t\t\tlog.error(\"Try getStackTrace(): \\n\" + ex.getStackTrace());\n\t\t\t// You will get:\n\t\t\t// Sep 06, 2017 3:45:54 PM TestAllMethods main\n\t\t\t// SEVERE: Try getStackTrace(): \n\t\t\t// [Ljava.lang.StackTraceElement;@5a07e868\n\n\n\t\t\tlog.error(\"Try Arrays.toString(ex.getStackTrace()): \\n\" + Arrays.toString(ex.getStackTrace()));\n\t\t\t// You will get:\n\t\t\t// Sep 06, 2017 3:45:54 PM TestAllMethods main\n\t\t\t// SEVERE: Try Arrays.toString(ex.getStackTrace()): \n\t\t\t// [TestAllMethods.main(TestAllMethods.java:10)]\n\n\t\t\tlog.error(\"Try getCause(): \\n\" + ex.getCause());\n\t\t\t// You will get: \n\t\t\t// Sep 06, 2017 3:45:54 PM TestAllMethods main\n\t\t\t// SEVERE: Try getCause(): \n\t\t\t// null\n\t\t}\n\t}\n}\n```\n**Conclusions:**\n\n1) **ex.toString()** is better than **ex.getMessage()** as **toString** includes the exception class name, which **getMessage** does not;\n\n2) **ex.getStackTrace()** will return an array of **StackTraceElement**, so do **NOT** print that directly, instead we need **Arrays.toString(ex.getStackTrace())** to show the content of that exception;\n\n3) **ex.getCause()** will show you the cause of this exception or null if the cause is nonexistent or unknown.\n\n  \n\n#### Try to **avoid** duplicated stack trace by **NOT** log an exception with the stack trace and then throw it\n\n  \n```\n// Bad\npublic static void main(String[] args) {\n\ttry {\n\t\ttest();\n\t} catch (SQLException ex) {\n\t\tlog.error(\"second level: \", ex);\n\t}\n}\nprivate static void test() throws SQLException {\n\ttry {\n\t\tthrow new SQLException();\n\t} catch (SQLException ex) {\n\t\tlog.error(\"first level: \", ex);\n\t\tthrow new SQLException(ex);\n\t}\n}\n// You will get: \nSep 06, 2017 4:12:40 PM MultipleException test\nSEVERE: first level: \njava.sql.SQLException\n\tat MultipleException.test(MultipleException.java:19)\n\tat MultipleException.main(MultipleException.java:11)\n\nSep 06, 2017 4:12:40 PM MultipleException main\nSEVERE: second level: \njava.sql.SQLException: java.sql.SQLException\n\tat MultipleException.test(MultipleException.java:22)\n\tat MultipleException.main(MultipleException.java:11)\nCaused by: java.sql.SQLException\n\tat MultipleException.test(MultipleException.java:19)\n\t... 1 more\n\n\n// Good \npublic static void main(String[] args) {\n\ttry {\n\t\ttest();\n\t} catch (SQLException ex) {\n\t\tlog.error(\"wrong: \", ex);\n\t}\n}\nprivate static void test() throws SQLException {\n\ttry {\n\t\tthrow new SQLException();\n\t} catch (SQLException ex) {\n\t\t//log.error(\"first level: \", ex);\n\t\tthrow new SQLException(\"first level: \", ex);\n\t}\n}\n// You will get: \nSep 06, 2017 4:16:25 PM MultipleException main\nSEVERE: wrong: \njava.sql.SQLException: first level: \n\tat MultipleException.test(MultipleException.java:22)\n\tat MultipleException.main(MultipleException.java:11)\nCaused by: java.sql.SQLException\n\tat MultipleException.test(MultipleException.java:19)\n\t... 1 more\n```\n  \n\n  \n\n#### Remember to **release the resource** using try-with-resource or try-catch-finally block\n\n  \n```\n// Bad\ntry {\n  Connection conn = getConnection();\n} catch (SpecificException ex) {\n  log.error(\"This function does not work due to SpecificException: \", ex);\n}\n\n\n// Good \ntry {\n  Connection conn = getConnection();\n  ...\n} catch (SpecificException ex) {\n  log.error(\"This function does not work due to SpecificException: \", ex);\n} finally {\n  context.close(conn);\n}\n```\n\nOR\n\n```\ntry (Connection conn = getConnection()) {\n  ...\n} catch (SpecificException ex) {\n  log.error(\"This function does not work due to SpecificException: \", ex);\n} \n```\n  \n\n#### If you are using try-with-resource, the implicit finally() block could throw an exception A, and if it happens when something in try block also throws an exception B, A will be suppressed exception of B, and log.warn/error/info() will print both exceptions out.\n\n  \n```\nNov 20, 2017 1:17:02 PM toml.main.Main logException\nWARNING: logException - MyExceptionA: \ntoml.main.MyExceptionA: MyExceptionA in run\n    at toml.main.MyAutoClose.run(MyAutoClose.java:7)\n    at toml.main.Main.callMyAutoClose(Main.java:25)\n    at toml.main.Main.main(Main.java:12)\n    Suppressed: toml.main.MyExceptionB: MyExceptionB in close\n        at toml.main.MyAutoClose.close(MyAutoClose.java:13)\n        at toml.main.Main.callMyAutoClose(Main.java:26)\n        ... 1 more\n        ```","source":"_posts/Java-Exception-Handling-Best-Practices.md","raw":"---\ntitle: Java Exception Handling Best Practices\ntop: false\ncover: false\ntoc: true\nmathjax: true\ndate: 2020-04-21 06:40:45\nsummary: Java Exception Handling Best Practices\ncategories: Tech\ntags:\n    - Java\npassword:\n---\n\n#### Do **NOT** just catch Exception or Throwable, which will also catch RuntimeException\n<!--more-->\n  \n```\n// Bad\ntry {\n  ...\n} catch (Throwable th) {\n  ...\n}\n// Good\ntry {\n  ...\n} catch (SpecificException ex) {\n  ...\n}\n```\n#### When catching an exception, do **NOT** just throw it. Instead, do something like **throw it with some description**, **log an error** or **stop the process.**\n\n**If you catch an exception and do nothing or just log and then let the method continue, include a comment why it's ok to ignore the exception**\n```\n// Bad\ntry {\n  ...\n} catch (SpecificException ex) {\n  throw ex;\n}\n// Good \ntry {\n  ...\n} catch (SpecificException ex) {\n  log.error(\"This function does not work due to SpecificException: \", ex);\n}\n```\n\nOR\n\n```\ntry {\n  ...\n} catch (SpecificException ex) {\n  throw new SpecificException(\"This function does not work due to SpecificException: \", ex);\n}\n```\n\n\n\nOR\n\n\n\n```\ntry {\n  ...\n} catch (SpecificException ex) {\n  // Let the method continue because xyz...\n  log.info(\"xxxxxx\");\n}\n```\n  \n\n#### When catching an exception, we may want to log an error or warning, and do **NOT** just log the string without the stacktrace\n\n  \n```\n// Bad\ntry {\n  ...\n} catch (SpecificException ex) {\n  log.error(\"Something wrong...\");\n}\n// Good \ntry {\n  ...\n} catch (SpecificException ex) {\n  log.error(\"This function does not work due to SpecificException: \", ex);\n}\n```\n  \n\n#### How all kinds of different methods in Exception work in the console\n\n  \n```\npublic class TestAllMethods {\n\tstatic final Log log = LogFactory.getLog(TestAllMethods.class);\n\tpublic static void main(String[] args) {\n\t\ttry {\n\t\t\tSystem.out.println(10/0);\n\t\t} catch (ArithmeticException ex) {\n\t\t\tex.printStackTrace();\n\t\t\t//You will get: \n\t\t\t// java.lang.ArithmeticException: / by zero\n\t\t\t//\t\tat TestAllMethods.main(TestAllMethods.java:10)\n\n\t\t\tlog.error(\"Try just the exception: \\n\", ex);\n\t\t\t// You will get: \n\t\t\t// Sep 06, 2017 3:45:54 PM TestAllMethods main\n\t\t\t// SEVERE: Try just the exception: \n\n\t\t\t// java.lang.ArithmeticException: / by zero\n\t\t\t//  \tat TestAllMethods.main(TestAllMethods.java:10)\n\n\n\t\t\tlog.error(\"Try getMessage(): \\n\" + ex.getMessage());  \n            // You will get:\n\t\t\t//  Sep 06, 2017 3:45:54 PM TestAllMethods main\n\t\t\t//  SEVERE: Try getMessage(): \n\t\t\t//  / by zero\n\n\t\t\tlog.error(\"Try toString(): \\n\" + ex.toString());\n\t\t\t// You will get:\n     \t\t// Sep 06, 2017 3:45:54 PM TestAllMethods main\n\t\t\t// SEVERE: Try toString(): \n\t\t\t// java.lang.ArithmeticException: / by zero\n\n\n\t\t\tlog.error(\"Try getStackTrace(): \\n\" + ex.getStackTrace());\n\t\t\t// You will get:\n\t\t\t// Sep 06, 2017 3:45:54 PM TestAllMethods main\n\t\t\t// SEVERE: Try getStackTrace(): \n\t\t\t// [Ljava.lang.StackTraceElement;@5a07e868\n\n\n\t\t\tlog.error(\"Try Arrays.toString(ex.getStackTrace()): \\n\" + Arrays.toString(ex.getStackTrace()));\n\t\t\t// You will get:\n\t\t\t// Sep 06, 2017 3:45:54 PM TestAllMethods main\n\t\t\t// SEVERE: Try Arrays.toString(ex.getStackTrace()): \n\t\t\t// [TestAllMethods.main(TestAllMethods.java:10)]\n\n\t\t\tlog.error(\"Try getCause(): \\n\" + ex.getCause());\n\t\t\t// You will get: \n\t\t\t// Sep 06, 2017 3:45:54 PM TestAllMethods main\n\t\t\t// SEVERE: Try getCause(): \n\t\t\t// null\n\t\t}\n\t}\n}\n```\n**Conclusions:**\n\n1) **ex.toString()** is better than **ex.getMessage()** as **toString** includes the exception class name, which **getMessage** does not;\n\n2) **ex.getStackTrace()** will return an array of **StackTraceElement**, so do **NOT** print that directly, instead we need **Arrays.toString(ex.getStackTrace())** to show the content of that exception;\n\n3) **ex.getCause()** will show you the cause of this exception or null if the cause is nonexistent or unknown.\n\n  \n\n#### Try to **avoid** duplicated stack trace by **NOT** log an exception with the stack trace and then throw it\n\n  \n```\n// Bad\npublic static void main(String[] args) {\n\ttry {\n\t\ttest();\n\t} catch (SQLException ex) {\n\t\tlog.error(\"second level: \", ex);\n\t}\n}\nprivate static void test() throws SQLException {\n\ttry {\n\t\tthrow new SQLException();\n\t} catch (SQLException ex) {\n\t\tlog.error(\"first level: \", ex);\n\t\tthrow new SQLException(ex);\n\t}\n}\n// You will get: \nSep 06, 2017 4:12:40 PM MultipleException test\nSEVERE: first level: \njava.sql.SQLException\n\tat MultipleException.test(MultipleException.java:19)\n\tat MultipleException.main(MultipleException.java:11)\n\nSep 06, 2017 4:12:40 PM MultipleException main\nSEVERE: second level: \njava.sql.SQLException: java.sql.SQLException\n\tat MultipleException.test(MultipleException.java:22)\n\tat MultipleException.main(MultipleException.java:11)\nCaused by: java.sql.SQLException\n\tat MultipleException.test(MultipleException.java:19)\n\t... 1 more\n\n\n// Good \npublic static void main(String[] args) {\n\ttry {\n\t\ttest();\n\t} catch (SQLException ex) {\n\t\tlog.error(\"wrong: \", ex);\n\t}\n}\nprivate static void test() throws SQLException {\n\ttry {\n\t\tthrow new SQLException();\n\t} catch (SQLException ex) {\n\t\t//log.error(\"first level: \", ex);\n\t\tthrow new SQLException(\"first level: \", ex);\n\t}\n}\n// You will get: \nSep 06, 2017 4:16:25 PM MultipleException main\nSEVERE: wrong: \njava.sql.SQLException: first level: \n\tat MultipleException.test(MultipleException.java:22)\n\tat MultipleException.main(MultipleException.java:11)\nCaused by: java.sql.SQLException\n\tat MultipleException.test(MultipleException.java:19)\n\t... 1 more\n```\n  \n\n  \n\n#### Remember to **release the resource** using try-with-resource or try-catch-finally block\n\n  \n```\n// Bad\ntry {\n  Connection conn = getConnection();\n} catch (SpecificException ex) {\n  log.error(\"This function does not work due to SpecificException: \", ex);\n}\n\n\n// Good \ntry {\n  Connection conn = getConnection();\n  ...\n} catch (SpecificException ex) {\n  log.error(\"This function does not work due to SpecificException: \", ex);\n} finally {\n  context.close(conn);\n}\n```\n\nOR\n\n```\ntry (Connection conn = getConnection()) {\n  ...\n} catch (SpecificException ex) {\n  log.error(\"This function does not work due to SpecificException: \", ex);\n} \n```\n  \n\n#### If you are using try-with-resource, the implicit finally() block could throw an exception A, and if it happens when something in try block also throws an exception B, A will be suppressed exception of B, and log.warn/error/info() will print both exceptions out.\n\n  \n```\nNov 20, 2017 1:17:02 PM toml.main.Main logException\nWARNING: logException - MyExceptionA: \ntoml.main.MyExceptionA: MyExceptionA in run\n    at toml.main.MyAutoClose.run(MyAutoClose.java:7)\n    at toml.main.Main.callMyAutoClose(Main.java:25)\n    at toml.main.Main.main(Main.java:12)\n    Suppressed: toml.main.MyExceptionB: MyExceptionB in close\n        at toml.main.MyAutoClose.close(MyAutoClose.java:13)\n        at toml.main.Main.callMyAutoClose(Main.java:26)\n        ... 1 more\n        ```","slug":"Java-Exception-Handling-Best-Practices","published":1,"updated":"2020-05-05T15:11:31.853Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ckcxuqemt000gfkjx37utc8rl","content":"<h4 id=\"Do-NOT-just-catch-Exception-or-Throwable-which-will-also-catch-RuntimeException\"><a href=\"#Do-NOT-just-catch-Exception-or-Throwable-which-will-also-catch-RuntimeException\" class=\"headerlink\" title=\"Do NOT just catch Exception or Throwable, which will also catch RuntimeException\"></a>Do <strong>NOT</strong> just catch Exception or Throwable, which will also catch RuntimeException</h4><a id=\"more\"></a>\n\n<pre><code>// Bad\ntry {\n  ...\n} catch (Throwable th) {\n  ...\n}\n// Good\ntry {\n  ...\n} catch (SpecificException ex) {\n  ...\n}</code></pre><h4 id=\"When-catching-an-exception-do-NOT-just-throw-it-Instead-do-something-like-throw-it-with-some-description-log-an-error-or-stop-the-process\"><a href=\"#When-catching-an-exception-do-NOT-just-throw-it-Instead-do-something-like-throw-it-with-some-description-log-an-error-or-stop-the-process\" class=\"headerlink\" title=\"When catching an exception, do NOT just throw it. Instead, do something like throw it with some description, log an error or stop the process.\"></a>When catching an exception, do <strong>NOT</strong> just throw it. Instead, do something like <strong>throw it with some description</strong>, <strong>log an error</strong> or <strong>stop the process.</strong></h4><p><strong>If you catch an exception and do nothing or just log and then let the method continue, include a comment why it&#39;s ok to ignore the exception</strong></p>\n<pre><code>// Bad\ntry {\n  ...\n} catch (SpecificException ex) {\n  throw ex;\n}\n// Good \ntry {\n  ...\n} catch (SpecificException ex) {\n  log.error(&quot;This function does not work due to SpecificException: &quot;, ex);\n}</code></pre><p>OR</p>\n<pre><code>try {\n  ...\n} catch (SpecificException ex) {\n  throw new SpecificException(&quot;This function does not work due to SpecificException: &quot;, ex);\n}</code></pre><p>OR</p>\n<pre><code>try {\n  ...\n} catch (SpecificException ex) {\n  // Let the method continue because xyz...\n  log.info(&quot;xxxxxx&quot;);\n}</code></pre><h4 id=\"When-catching-an-exception-we-may-want-to-log-an-error-or-warning-and-do-NOT-just-log-the-string-without-the-stacktrace\"><a href=\"#When-catching-an-exception-we-may-want-to-log-an-error-or-warning-and-do-NOT-just-log-the-string-without-the-stacktrace\" class=\"headerlink\" title=\"When catching an exception, we may want to log an error or warning, and do NOT just log the string without the stacktrace\"></a>When catching an exception, we may want to log an error or warning, and do <strong>NOT</strong> just log the string without the stacktrace</h4><pre><code>// Bad\ntry {\n  ...\n} catch (SpecificException ex) {\n  log.error(&quot;Something wrong...&quot;);\n}\n// Good \ntry {\n  ...\n} catch (SpecificException ex) {\n  log.error(&quot;This function does not work due to SpecificException: &quot;, ex);\n}</code></pre><h4 id=\"How-all-kinds-of-different-methods-in-Exception-work-in-the-console\"><a href=\"#How-all-kinds-of-different-methods-in-Exception-work-in-the-console\" class=\"headerlink\" title=\"How all kinds of different methods in Exception work in the console\"></a>How all kinds of different methods in Exception work in the console</h4><pre><code>public class TestAllMethods {\n    static final Log log = LogFactory.getLog(TestAllMethods.class);\n    public static void main(String[] args) {\n        try {\n            System.out.println(10/0);\n        } catch (ArithmeticException ex) {\n            ex.printStackTrace();\n            //You will get: \n            // java.lang.ArithmeticException: / by zero\n            //        at TestAllMethods.main(TestAllMethods.java:10)\n\n            log.error(&quot;Try just the exception: \\n&quot;, ex);\n            // You will get: \n            // Sep 06, 2017 3:45:54 PM TestAllMethods main\n            // SEVERE: Try just the exception: \n\n            // java.lang.ArithmeticException: / by zero\n            //      at TestAllMethods.main(TestAllMethods.java:10)\n\n\n            log.error(&quot;Try getMessage(): \\n&quot; + ex.getMessage());  \n            // You will get:\n            //  Sep 06, 2017 3:45:54 PM TestAllMethods main\n            //  SEVERE: Try getMessage(): \n            //  / by zero\n\n            log.error(&quot;Try toString(): \\n&quot; + ex.toString());\n            // You will get:\n             // Sep 06, 2017 3:45:54 PM TestAllMethods main\n            // SEVERE: Try toString(): \n            // java.lang.ArithmeticException: / by zero\n\n\n            log.error(&quot;Try getStackTrace(): \\n&quot; + ex.getStackTrace());\n            // You will get:\n            // Sep 06, 2017 3:45:54 PM TestAllMethods main\n            // SEVERE: Try getStackTrace(): \n            // [Ljava.lang.StackTraceElement;@5a07e868\n\n\n            log.error(&quot;Try Arrays.toString(ex.getStackTrace()): \\n&quot; + Arrays.toString(ex.getStackTrace()));\n            // You will get:\n            // Sep 06, 2017 3:45:54 PM TestAllMethods main\n            // SEVERE: Try Arrays.toString(ex.getStackTrace()): \n            // [TestAllMethods.main(TestAllMethods.java:10)]\n\n            log.error(&quot;Try getCause(): \\n&quot; + ex.getCause());\n            // You will get: \n            // Sep 06, 2017 3:45:54 PM TestAllMethods main\n            // SEVERE: Try getCause(): \n            // null\n        }\n    }\n}</code></pre><p><strong>Conclusions:</strong></p>\n<p>1) <strong>ex.toString()</strong> is better than <strong>ex.getMessage()</strong> as <strong>toString</strong> includes the exception class name, which <strong>getMessage</strong> does not;</p>\n<p>2) <strong>ex.getStackTrace()</strong> will return an array of <strong>StackTraceElement</strong>, so do <strong>NOT</strong> print that directly, instead we need <strong>Arrays.toString(ex.getStackTrace())</strong> to show the content of that exception;</p>\n<p>3) <strong>ex.getCause()</strong> will show you the cause of this exception or null if the cause is nonexistent or unknown.</p>\n<h4 id=\"Try-to-avoid-duplicated-stack-trace-by-NOT-log-an-exception-with-the-stack-trace-and-then-throw-it\"><a href=\"#Try-to-avoid-duplicated-stack-trace-by-NOT-log-an-exception-with-the-stack-trace-and-then-throw-it\" class=\"headerlink\" title=\"Try to avoid duplicated stack trace by NOT log an exception with the stack trace and then throw it\"></a>Try to <strong>avoid</strong> duplicated stack trace by <strong>NOT</strong> log an exception with the stack trace and then throw it</h4><pre><code>// Bad\npublic static void main(String[] args) {\n    try {\n        test();\n    } catch (SQLException ex) {\n        log.error(&quot;second level: &quot;, ex);\n    }\n}\nprivate static void test() throws SQLException {\n    try {\n        throw new SQLException();\n    } catch (SQLException ex) {\n        log.error(&quot;first level: &quot;, ex);\n        throw new SQLException(ex);\n    }\n}\n// You will get: \nSep 06, 2017 4:12:40 PM MultipleException test\nSEVERE: first level: \njava.sql.SQLException\n    at MultipleException.test(MultipleException.java:19)\n    at MultipleException.main(MultipleException.java:11)\n\nSep 06, 2017 4:12:40 PM MultipleException main\nSEVERE: second level: \njava.sql.SQLException: java.sql.SQLException\n    at MultipleException.test(MultipleException.java:22)\n    at MultipleException.main(MultipleException.java:11)\nCaused by: java.sql.SQLException\n    at MultipleException.test(MultipleException.java:19)\n    ... 1 more\n\n\n// Good \npublic static void main(String[] args) {\n    try {\n        test();\n    } catch (SQLException ex) {\n        log.error(&quot;wrong: &quot;, ex);\n    }\n}\nprivate static void test() throws SQLException {\n    try {\n        throw new SQLException();\n    } catch (SQLException ex) {\n        //log.error(&quot;first level: &quot;, ex);\n        throw new SQLException(&quot;first level: &quot;, ex);\n    }\n}\n// You will get: \nSep 06, 2017 4:16:25 PM MultipleException main\nSEVERE: wrong: \njava.sql.SQLException: first level: \n    at MultipleException.test(MultipleException.java:22)\n    at MultipleException.main(MultipleException.java:11)\nCaused by: java.sql.SQLException\n    at MultipleException.test(MultipleException.java:19)\n    ... 1 more</code></pre><h4 id=\"Remember-to-release-the-resource-using-try-with-resource-or-try-catch-finally-block\"><a href=\"#Remember-to-release-the-resource-using-try-with-resource-or-try-catch-finally-block\" class=\"headerlink\" title=\"Remember to release the resource using try-with-resource or try-catch-finally block\"></a>Remember to <strong>release the resource</strong> using try-with-resource or try-catch-finally block</h4><pre><code>// Bad\ntry {\n  Connection conn = getConnection();\n} catch (SpecificException ex) {\n  log.error(&quot;This function does not work due to SpecificException: &quot;, ex);\n}\n\n\n// Good \ntry {\n  Connection conn = getConnection();\n  ...\n} catch (SpecificException ex) {\n  log.error(&quot;This function does not work due to SpecificException: &quot;, ex);\n} finally {\n  context.close(conn);\n}</code></pre><p>OR</p>\n<pre><code>try (Connection conn = getConnection()) {\n  ...\n} catch (SpecificException ex) {\n  log.error(&quot;This function does not work due to SpecificException: &quot;, ex);\n} </code></pre><h4 id=\"If-you-are-using-try-with-resource-the-implicit-finally-block-could-throw-an-exception-A-and-if-it-happens-when-something-in-try-block-also-throws-an-exception-B-A-will-be-suppressed-exception-of-B-and-log-warn-error-info-will-print-both-exceptions-out\"><a href=\"#If-you-are-using-try-with-resource-the-implicit-finally-block-could-throw-an-exception-A-and-if-it-happens-when-something-in-try-block-also-throws-an-exception-B-A-will-be-suppressed-exception-of-B-and-log-warn-error-info-will-print-both-exceptions-out\" class=\"headerlink\" title=\"If you are using try-with-resource, the implicit finally() block could throw an exception A, and if it happens when something in try block also throws an exception B, A will be suppressed exception of B, and log.warn/error/info() will print both exceptions out.\"></a>If you are using try-with-resource, the implicit finally() block could throw an exception A, and if it happens when something in try block also throws an exception B, A will be suppressed exception of B, and log.warn/error/info() will print both exceptions out.</h4><figcaption>20, 2017 1:17:02 PM toml.main.Main logException</figcaption><pre class=\"line-numbers language-Nov\"><code class=\"language-Nov\">WARNING: logException - MyExceptionA: \ntoml.main.MyExceptionA: MyExceptionA in run\n    at toml.main.MyAutoClose.run(MyAutoClose.java:7)\n    at toml.main.Main.callMyAutoClose(Main.java:25)\n    at toml.main.Main.main(Main.java:12)\n    Suppressed: toml.main.MyExceptionB: MyExceptionB in close\n        at toml.main.MyAutoClose.close(MyAutoClose.java:13)\n        at toml.main.Main.callMyAutoClose(Main.java:26)\n        ... 1 more<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n","site":{"data":{"next":{"override":false,"favicon":{"small":"/uploads/favicon-16x16.png","medium":"/uploads/favicon-32x32.png","apple_touch_icon":"/uploads/apple-touch-icon.png","safari_pinned_tab":"/uploads/favicon.png","ms_browserconfig":"/uploads/browserconfig.xml"},"keywords":"Hexo, NexT","rss":null,"footer":{"icon":"user","copyright":null,"powered":true,"theme":{"enable":true,"version":true}},"canonical":true,"seo":false,"index_with_subtitle":false,"menu":{"home":"/ || home","archives":"/archives/ || archive"},"menu_icons":{"enable":true},"scheme":"Pisces","social_icons":{"enable":true,"icons_only":false,"transition":false},"links_icon":"link","links_title":"Links","links_layout":"block","toc":{"enable":true,"number":true,"wrap":false},"sidebar":{"position":"left","display":"post","offset":12,"b2t":false,"scrollpercent":false,"onmobile":false},"scroll_to_more":true,"save_scroll":false,"excerpt_description":true,"auto_excerpt":{"enable":false,"length":30},"read_more_btn":true,"post_meta":{"item_text":true,"created_at":true,"updated_at":false,"categories":true},"post_wordcount":{"item_text":true,"wordcount":false,"min2read":false,"totalcount":false,"separated_meta":true},"post_copyright":{"enable":false,"license":"CC BY-NC-SA 3.0","license_url":"https://creativecommons.org/licenses/by-nc-sa/3.0/"},"mobile_layout_economy":false,"android_chrome_color":"#222","custom_logo":{"enabled":false,"image":null},"marked":{"smartypants":false},"highlight_theme":"normal","font":{"enable":false,"host":null,"global":{"external":true,"family":"Lato","size":null},"headings":{"external":true,"family":null,"size":null},"posts":{"external":true,"family":null},"logo":{"external":true,"family":null,"size":null},"codes":{"external":true,"family":null,"size":null}},"mathjax":{"enable":false,"per_page":false,"cdn":"//cdn.bootcss.com/mathjax/2.7.1/latest.js?config=TeX-AMS-MML_HTMLorMML"},"han":false,"disqus":{"enable":false,"shortname":null,"count":true},"changyan":{"enable":false,"appid":null,"appkey":null},"valine":{"enable":false,"appid":null,"appkey":null,"notify":false,"verify":false,"placeholder":"Just go go","avatar":"mm","guest_info":"nick,mail,link","pageSize":10},"gitment":{"enable":false,"mint":true,"count":true,"lazy":false,"cleanly":false,"language":null,"github_user":null,"github_repo":null,"client_id":null,"client_secret":null,"proxy_gateway":null,"redirect_protocol":null},"needmoreshare2":{"enable":false,"postbottom":{"enable":false,"options":{"iconStyle":"box","boxForm":"horizontal","position":"bottomCenter","networks":"Weibo,Wechat,Douban,QQZone,Twitter,Facebook"}},"float":{"enable":false,"options":{"iconStyle":"box","boxForm":"horizontal","position":"middleRight","networks":"Weibo,Wechat,Douban,QQZone,Twitter,Facebook"}}},"duoshuo_info":{"ua_enable":true,"admin_enable":false,"user_id":0},"facebook_sdk":{"enable":false,"app_id":null,"fb_admin":null,"like_button":null,"webmaster":null},"facebook_comments_plugin":{"enable":false,"num_of_posts":10,"width":"100%","scheme":"light"},"vkontakte_api":{"enable":false,"app_id":null,"like":true,"comments":true,"num_of_posts":10},"rating":{"enable":false,"id":null,"color":"fc6423"},"leancloud_visitors":{"enable":false,"app_id":null,"app_key":null},"firestore":{"enable":false,"collection":"articles","apiKey":null,"projectId":null,"bluebird":false},"busuanzi_count":{"enable":false,"site_uv":true,"site_uv_header":"<i class=\"fa fa-user\"></i>","site_uv_footer":null,"site_pv":true,"site_pv_header":"<i class=\"fa fa-eye\"></i>","site_pv_footer":null,"page_pv":true,"page_pv_header":"<i class=\"fa fa-file-o\"></i>","page_pv_footer":null},"baidu_push":false,"calendar":{"enable":false,"calendar_id":"<required>","api_key":"<required>","orderBy":"startTime","offsetMax":24,"offsetMin":4,"timeZone":null,"showDeleted":false,"singleEvents":true,"maxResults":250},"algolia_search":{"enable":false,"hits":{"per_page":10},"labels":{"input_placeholder":"Search for Posts","hits_empty":"We didn't find any results for the search: ${query}","hits_stats":"${hits} results found in ${time} ms"}},"local_search":{"enable":false,"trigger":"auto","top_n_per_article":1},"exturl":false,"note":{"style":"simple","icons":false,"border_radius":3,"light_bg_offset":0},"label":true,"tabs":{"enable":true,"transition":{"tabs":false,"labels":true},"border_radius":0},"motion":{"enable":true,"async":false,"transition":{"post_block":"fadeIn","post_header":"slideDownIn","post_body":"slideDownIn","coll_header":"slideLeftIn","sidebar":"slideUpIn"}},"fancybox":true,"pace":false,"pace_theme":"pace-theme-minimal","canvas_nest":false,"three_waves":false,"canvas_lines":false,"canvas_sphere":false,"canvas_ribbon":{"enable":false,"size":300,"alpha":0.6,"zIndex":-1},"vendors":{"_internal":"lib","jquery":null,"fancybox":null,"fancybox_css":null,"fastclick":null,"lazyload":null,"velocity":null,"velocity_ui":null,"ua_parser":null,"fontawesome":null,"algolia_instant_js":null,"algolia_instant_css":null,"pace":null,"pace_css":null,"canvas_nest":null,"three":null,"three_waves":null,"canvas_lines":null,"canvas_sphere":null,"canvas_ribbon":null,"han":null,"needMoreShare2":null},"css":"css","js":"js","images":"images","version":"5.1.4"}}},"excerpt":"<h4 id=\"Do-NOT-just-catch-Exception-or-Throwable-which-will-also-catch-RuntimeException\"><a href=\"#Do-NOT-just-catch-Exception-or-Throwable-which-will-also-catch-RuntimeException\" class=\"headerlink\" title=\"Do NOT just catch Exception or Throwable, which will also catch RuntimeException\"></a>Do <strong>NOT</strong> just catch Exception or Throwable, which will also catch RuntimeException</h4>","more":"<pre><code>// Bad\ntry {\n  ...\n} catch (Throwable th) {\n  ...\n}\n// Good\ntry {\n  ...\n} catch (SpecificException ex) {\n  ...\n}</code></pre><h4 id=\"When-catching-an-exception-do-NOT-just-throw-it-Instead-do-something-like-throw-it-with-some-description-log-an-error-or-stop-the-process\"><a href=\"#When-catching-an-exception-do-NOT-just-throw-it-Instead-do-something-like-throw-it-with-some-description-log-an-error-or-stop-the-process\" class=\"headerlink\" title=\"When catching an exception, do NOT just throw it. Instead, do something like throw it with some description, log an error or stop the process.\"></a>When catching an exception, do <strong>NOT</strong> just throw it. Instead, do something like <strong>throw it with some description</strong>, <strong>log an error</strong> or <strong>stop the process.</strong></h4><p><strong>If you catch an exception and do nothing or just log and then let the method continue, include a comment why it&#39;s ok to ignore the exception</strong></p>\n<pre><code>// Bad\ntry {\n  ...\n} catch (SpecificException ex) {\n  throw ex;\n}\n// Good \ntry {\n  ...\n} catch (SpecificException ex) {\n  log.error(&quot;This function does not work due to SpecificException: &quot;, ex);\n}</code></pre><p>OR</p>\n<pre><code>try {\n  ...\n} catch (SpecificException ex) {\n  throw new SpecificException(&quot;This function does not work due to SpecificException: &quot;, ex);\n}</code></pre><p>OR</p>\n<pre><code>try {\n  ...\n} catch (SpecificException ex) {\n  // Let the method continue because xyz...\n  log.info(&quot;xxxxxx&quot;);\n}</code></pre><h4 id=\"When-catching-an-exception-we-may-want-to-log-an-error-or-warning-and-do-NOT-just-log-the-string-without-the-stacktrace\"><a href=\"#When-catching-an-exception-we-may-want-to-log-an-error-or-warning-and-do-NOT-just-log-the-string-without-the-stacktrace\" class=\"headerlink\" title=\"When catching an exception, we may want to log an error or warning, and do NOT just log the string without the stacktrace\"></a>When catching an exception, we may want to log an error or warning, and do <strong>NOT</strong> just log the string without the stacktrace</h4><pre><code>// Bad\ntry {\n  ...\n} catch (SpecificException ex) {\n  log.error(&quot;Something wrong...&quot;);\n}\n// Good \ntry {\n  ...\n} catch (SpecificException ex) {\n  log.error(&quot;This function does not work due to SpecificException: &quot;, ex);\n}</code></pre><h4 id=\"How-all-kinds-of-different-methods-in-Exception-work-in-the-console\"><a href=\"#How-all-kinds-of-different-methods-in-Exception-work-in-the-console\" class=\"headerlink\" title=\"How all kinds of different methods in Exception work in the console\"></a>How all kinds of different methods in Exception work in the console</h4><pre><code>public class TestAllMethods {\n    static final Log log = LogFactory.getLog(TestAllMethods.class);\n    public static void main(String[] args) {\n        try {\n            System.out.println(10/0);\n        } catch (ArithmeticException ex) {\n            ex.printStackTrace();\n            //You will get: \n            // java.lang.ArithmeticException: / by zero\n            //        at TestAllMethods.main(TestAllMethods.java:10)\n\n            log.error(&quot;Try just the exception: \\n&quot;, ex);\n            // You will get: \n            // Sep 06, 2017 3:45:54 PM TestAllMethods main\n            // SEVERE: Try just the exception: \n\n            // java.lang.ArithmeticException: / by zero\n            //      at TestAllMethods.main(TestAllMethods.java:10)\n\n\n            log.error(&quot;Try getMessage(): \\n&quot; + ex.getMessage());  \n            // You will get:\n            //  Sep 06, 2017 3:45:54 PM TestAllMethods main\n            //  SEVERE: Try getMessage(): \n            //  / by zero\n\n            log.error(&quot;Try toString(): \\n&quot; + ex.toString());\n            // You will get:\n             // Sep 06, 2017 3:45:54 PM TestAllMethods main\n            // SEVERE: Try toString(): \n            // java.lang.ArithmeticException: / by zero\n\n\n            log.error(&quot;Try getStackTrace(): \\n&quot; + ex.getStackTrace());\n            // You will get:\n            // Sep 06, 2017 3:45:54 PM TestAllMethods main\n            // SEVERE: Try getStackTrace(): \n            // [Ljava.lang.StackTraceElement;@5a07e868\n\n\n            log.error(&quot;Try Arrays.toString(ex.getStackTrace()): \\n&quot; + Arrays.toString(ex.getStackTrace()));\n            // You will get:\n            // Sep 06, 2017 3:45:54 PM TestAllMethods main\n            // SEVERE: Try Arrays.toString(ex.getStackTrace()): \n            // [TestAllMethods.main(TestAllMethods.java:10)]\n\n            log.error(&quot;Try getCause(): \\n&quot; + ex.getCause());\n            // You will get: \n            // Sep 06, 2017 3:45:54 PM TestAllMethods main\n            // SEVERE: Try getCause(): \n            // null\n        }\n    }\n}</code></pre><p><strong>Conclusions:</strong></p>\n<p>1) <strong>ex.toString()</strong> is better than <strong>ex.getMessage()</strong> as <strong>toString</strong> includes the exception class name, which <strong>getMessage</strong> does not;</p>\n<p>2) <strong>ex.getStackTrace()</strong> will return an array of <strong>StackTraceElement</strong>, so do <strong>NOT</strong> print that directly, instead we need <strong>Arrays.toString(ex.getStackTrace())</strong> to show the content of that exception;</p>\n<p>3) <strong>ex.getCause()</strong> will show you the cause of this exception or null if the cause is nonexistent or unknown.</p>\n<h4 id=\"Try-to-avoid-duplicated-stack-trace-by-NOT-log-an-exception-with-the-stack-trace-and-then-throw-it\"><a href=\"#Try-to-avoid-duplicated-stack-trace-by-NOT-log-an-exception-with-the-stack-trace-and-then-throw-it\" class=\"headerlink\" title=\"Try to avoid duplicated stack trace by NOT log an exception with the stack trace and then throw it\"></a>Try to <strong>avoid</strong> duplicated stack trace by <strong>NOT</strong> log an exception with the stack trace and then throw it</h4><pre><code>// Bad\npublic static void main(String[] args) {\n    try {\n        test();\n    } catch (SQLException ex) {\n        log.error(&quot;second level: &quot;, ex);\n    }\n}\nprivate static void test() throws SQLException {\n    try {\n        throw new SQLException();\n    } catch (SQLException ex) {\n        log.error(&quot;first level: &quot;, ex);\n        throw new SQLException(ex);\n    }\n}\n// You will get: \nSep 06, 2017 4:12:40 PM MultipleException test\nSEVERE: first level: \njava.sql.SQLException\n    at MultipleException.test(MultipleException.java:19)\n    at MultipleException.main(MultipleException.java:11)\n\nSep 06, 2017 4:12:40 PM MultipleException main\nSEVERE: second level: \njava.sql.SQLException: java.sql.SQLException\n    at MultipleException.test(MultipleException.java:22)\n    at MultipleException.main(MultipleException.java:11)\nCaused by: java.sql.SQLException\n    at MultipleException.test(MultipleException.java:19)\n    ... 1 more\n\n\n// Good \npublic static void main(String[] args) {\n    try {\n        test();\n    } catch (SQLException ex) {\n        log.error(&quot;wrong: &quot;, ex);\n    }\n}\nprivate static void test() throws SQLException {\n    try {\n        throw new SQLException();\n    } catch (SQLException ex) {\n        //log.error(&quot;first level: &quot;, ex);\n        throw new SQLException(&quot;first level: &quot;, ex);\n    }\n}\n// You will get: \nSep 06, 2017 4:16:25 PM MultipleException main\nSEVERE: wrong: \njava.sql.SQLException: first level: \n    at MultipleException.test(MultipleException.java:22)\n    at MultipleException.main(MultipleException.java:11)\nCaused by: java.sql.SQLException\n    at MultipleException.test(MultipleException.java:19)\n    ... 1 more</code></pre><h4 id=\"Remember-to-release-the-resource-using-try-with-resource-or-try-catch-finally-block\"><a href=\"#Remember-to-release-the-resource-using-try-with-resource-or-try-catch-finally-block\" class=\"headerlink\" title=\"Remember to release the resource using try-with-resource or try-catch-finally block\"></a>Remember to <strong>release the resource</strong> using try-with-resource or try-catch-finally block</h4><pre><code>// Bad\ntry {\n  Connection conn = getConnection();\n} catch (SpecificException ex) {\n  log.error(&quot;This function does not work due to SpecificException: &quot;, ex);\n}\n\n\n// Good \ntry {\n  Connection conn = getConnection();\n  ...\n} catch (SpecificException ex) {\n  log.error(&quot;This function does not work due to SpecificException: &quot;, ex);\n} finally {\n  context.close(conn);\n}</code></pre><p>OR</p>\n<pre><code>try (Connection conn = getConnection()) {\n  ...\n} catch (SpecificException ex) {\n  log.error(&quot;This function does not work due to SpecificException: &quot;, ex);\n} </code></pre><h4 id=\"If-you-are-using-try-with-resource-the-implicit-finally-block-could-throw-an-exception-A-and-if-it-happens-when-something-in-try-block-also-throws-an-exception-B-A-will-be-suppressed-exception-of-B-and-log-warn-error-info-will-print-both-exceptions-out\"><a href=\"#If-you-are-using-try-with-resource-the-implicit-finally-block-could-throw-an-exception-A-and-if-it-happens-when-something-in-try-block-also-throws-an-exception-B-A-will-be-suppressed-exception-of-B-and-log-warn-error-info-will-print-both-exceptions-out\" class=\"headerlink\" title=\"If you are using try-with-resource, the implicit finally() block could throw an exception A, and if it happens when something in try block also throws an exception B, A will be suppressed exception of B, and log.warn/error/info() will print both exceptions out.\"></a>If you are using try-with-resource, the implicit finally() block could throw an exception A, and if it happens when something in try block also throws an exception B, A will be suppressed exception of B, and log.warn/error/info() will print both exceptions out.</h4><p><code>Nov 20, 2017 1:17:02 PM toml.main.Main logException\nWARNING: logException - MyExceptionA: \ntoml.main.MyExceptionA: MyExceptionA in run\n    at toml.main.MyAutoClose.run(MyAutoClose.java:7)\n    at toml.main.Main.callMyAutoClose(Main.java:25)\n    at toml.main.Main.main(Main.java:12)\n    Suppressed: toml.main.MyExceptionB: MyExceptionB in close\n        at toml.main.MyAutoClose.close(MyAutoClose.java:13)\n        at toml.main.Main.callMyAutoClose(Main.java:26)\n        ... 1 more</code></p>"},{"title":"June 2nd half notes","top":false,"cover":false,"toc":true,"mathjax":true,"date":"2020-07-02T03:00:15.000Z","summary":null,"password":null,"_content":"\n# June 2nd half note\n<!--more-->\n\n\n## Microservice pattern: API gateway\n\n[link](https://hvalls.dev/posts/microservice-pattern-api-gateway)\n\nAbout API Gateway:\n\n- It acts as router\n- It is the only entry point to our collection of microservices. This way, microservices are not needed to be public, anymore, but are behind an internal network and API Gateway is the responsible of making requests against a service or another one (Service Discovery)\n- It acts as a data aggregator: API Gateway fetches data from several services and aggregate it to return a single rich response. Depending on the API consumer, data representation may change according the needs, and here is where Backend For Frontend (BFF) comes into play.\n- It is a protocol abstraction layer: API Gateway can be exposed as a REST API or GraphQL or whatever, no matter what protocol or technology is being used internally to communicate with the microservices.\n- Error management is centralized: When a service is not available, is getting too slow or something like that, API Gateway can provide data from cache, default responses or make smart decisions to avoid bottlenecks or fatal errors propagation. This keeps the circuit closed (Circuit Breaker) and makes the system more resilient and reliable.\n\n\n## Automating safe hands off deployment\n\n[link](https://aws.amazon.com/builders-library/automating-safe-hands-off-deployments/)\n\nQuestion regrading pipeline as code: how to achieve version control for splunk alerts, reports, etc...?\n\n## How to Make Yourself Study When You Have ZERO Motivation\n\n[link](https://www.youtube.com/watch?v=9oWOsocN7qg)\n\n1. Go out for a walk\n2. Decide on a single task to work on\n3. Clear to neutral - clean up your workspace\n4. Use \"low effort\" hack - the blank page is the enemy\n\n\n## Refactoring Patterns: Migration vs. Adaptation\n\n[link](https://www.youtube.com/watch?v=DKPn0AcvLKo&list=PLdsOZAx8I5umhnn5LLTNJbFgwA3xbycar&index=68)\n\n**Migration pattern:**\n\n1. easier to roll back changes\n2. a lot less risk\n3. a lot more costs (keep both components need maintenance)\n4. requires switching logic (not good if there are too many afferent components that are associated with this component)\n\n**Adaption pattern:**\n\n1. hard to roll back changes\n2. a lot more risk\n3. less costs (more of refactor instead of replacement)\n4. no changes to calling components (afferent components)\n\n**Conclusion**: it depends on the level of coupling, risk and costs.","source":"_posts/June-2nd-half-notes.md","raw":"---\ntitle: June 2nd half notes\ntop: false\ncover: false\ntoc: true\nmathjax: true\ndate: 2020-07-01 23:00:15\nsummary:\ntags: [Sharing, Architecture]\ncategories: [Tech]\npassword:\n---\n\n# June 2nd half note\n<!--more-->\n\n\n## Microservice pattern: API gateway\n\n[link](https://hvalls.dev/posts/microservice-pattern-api-gateway)\n\nAbout API Gateway:\n\n- It acts as router\n- It is the only entry point to our collection of microservices. This way, microservices are not needed to be public, anymore, but are behind an internal network and API Gateway is the responsible of making requests against a service or another one (Service Discovery)\n- It acts as a data aggregator: API Gateway fetches data from several services and aggregate it to return a single rich response. Depending on the API consumer, data representation may change according the needs, and here is where Backend For Frontend (BFF) comes into play.\n- It is a protocol abstraction layer: API Gateway can be exposed as a REST API or GraphQL or whatever, no matter what protocol or technology is being used internally to communicate with the microservices.\n- Error management is centralized: When a service is not available, is getting too slow or something like that, API Gateway can provide data from cache, default responses or make smart decisions to avoid bottlenecks or fatal errors propagation. This keeps the circuit closed (Circuit Breaker) and makes the system more resilient and reliable.\n\n\n## Automating safe hands off deployment\n\n[link](https://aws.amazon.com/builders-library/automating-safe-hands-off-deployments/)\n\nQuestion regrading pipeline as code: how to achieve version control for splunk alerts, reports, etc...?\n\n## How to Make Yourself Study When You Have ZERO Motivation\n\n[link](https://www.youtube.com/watch?v=9oWOsocN7qg)\n\n1. Go out for a walk\n2. Decide on a single task to work on\n3. Clear to neutral - clean up your workspace\n4. Use \"low effort\" hack - the blank page is the enemy\n\n\n## Refactoring Patterns: Migration vs. Adaptation\n\n[link](https://www.youtube.com/watch?v=DKPn0AcvLKo&list=PLdsOZAx8I5umhnn5LLTNJbFgwA3xbycar&index=68)\n\n**Migration pattern:**\n\n1. easier to roll back changes\n2. a lot less risk\n3. a lot more costs (keep both components need maintenance)\n4. requires switching logic (not good if there are too many afferent components that are associated with this component)\n\n**Adaption pattern:**\n\n1. hard to roll back changes\n2. a lot more risk\n3. less costs (more of refactor instead of replacement)\n4. no changes to calling components (afferent components)\n\n**Conclusion**: it depends on the level of coupling, risk and costs.","slug":"June-2nd-half-notes","published":1,"updated":"2020-07-13T03:01:44.813Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ckcxuqen3000lfkjx7we61ptv","content":"<h1 id=\"June-2nd-half-note\"><a href=\"#June-2nd-half-note\" class=\"headerlink\" title=\"June 2nd half note\"></a>June 2nd half note</h1><a id=\"more\"></a>\n\n\n<h2 id=\"Microservice-pattern-API-gateway\"><a href=\"#Microservice-pattern-API-gateway\" class=\"headerlink\" title=\"Microservice pattern: API gateway\"></a>Microservice pattern: API gateway</h2><p><a href=\"https://hvalls.dev/posts/microservice-pattern-api-gateway\" target=\"_blank\" rel=\"noopener\">link</a></p>\n<p>About API Gateway:</p>\n<ul>\n<li>It acts as router</li>\n<li>It is the only entry point to our collection of microservices. This way, microservices are not needed to be public, anymore, but are behind an internal network and API Gateway is the responsible of making requests against a service or another one (Service Discovery)</li>\n<li>It acts as a data aggregator: API Gateway fetches data from several services and aggregate it to return a single rich response. Depending on the API consumer, data representation may change according the needs, and here is where Backend For Frontend (BFF) comes into play.</li>\n<li>It is a protocol abstraction layer: API Gateway can be exposed as a REST API or GraphQL or whatever, no matter what protocol or technology is being used internally to communicate with the microservices.</li>\n<li>Error management is centralized: When a service is not available, is getting too slow or something like that, API Gateway can provide data from cache, default responses or make smart decisions to avoid bottlenecks or fatal errors propagation. This keeps the circuit closed (Circuit Breaker) and makes the system more resilient and reliable.</li>\n</ul>\n<h2 id=\"Automating-safe-hands-off-deployment\"><a href=\"#Automating-safe-hands-off-deployment\" class=\"headerlink\" title=\"Automating safe hands off deployment\"></a>Automating safe hands off deployment</h2><p><a href=\"https://aws.amazon.com/builders-library/automating-safe-hands-off-deployments/\" target=\"_blank\" rel=\"noopener\">link</a></p>\n<p>Question regrading pipeline as code: how to achieve version control for splunk alerts, reports, etc...?</p>\n<h2 id=\"How-to-Make-Yourself-Study-When-You-Have-ZERO-Motivation\"><a href=\"#How-to-Make-Yourself-Study-When-You-Have-ZERO-Motivation\" class=\"headerlink\" title=\"How to Make Yourself Study When You Have ZERO Motivation\"></a>How to Make Yourself Study When You Have ZERO Motivation</h2><p><a href=\"https://www.youtube.com/watch?v=9oWOsocN7qg\" target=\"_blank\" rel=\"noopener\">link</a></p>\n<ol>\n<li>Go out for a walk</li>\n<li>Decide on a single task to work on</li>\n<li>Clear to neutral - clean up your workspace</li>\n<li>Use &quot;low effort&quot; hack - the blank page is the enemy</li>\n</ol>\n<h2 id=\"Refactoring-Patterns-Migration-vs-Adaptation\"><a href=\"#Refactoring-Patterns-Migration-vs-Adaptation\" class=\"headerlink\" title=\"Refactoring Patterns: Migration vs. Adaptation\"></a>Refactoring Patterns: Migration vs. Adaptation</h2><p><a href=\"https://www.youtube.com/watch?v=DKPn0AcvLKo&list=PLdsOZAx8I5umhnn5LLTNJbFgwA3xbycar&index=68\" target=\"_blank\" rel=\"noopener\">link</a></p>\n<p><strong>Migration pattern:</strong></p>\n<ol>\n<li>easier to roll back changes</li>\n<li>a lot less risk</li>\n<li>a lot more costs (keep both components need maintenance)</li>\n<li>requires switching logic (not good if there are too many afferent components that are associated with this component)</li>\n</ol>\n<p><strong>Adaption pattern:</strong></p>\n<ol>\n<li>hard to roll back changes</li>\n<li>a lot more risk</li>\n<li>less costs (more of refactor instead of replacement)</li>\n<li>no changes to calling components (afferent components)</li>\n</ol>\n<p><strong>Conclusion</strong>: it depends on the level of coupling, risk and costs.</p>\n","site":{"data":{"next":{"override":false,"favicon":{"small":"/uploads/favicon-16x16.png","medium":"/uploads/favicon-32x32.png","apple_touch_icon":"/uploads/apple-touch-icon.png","safari_pinned_tab":"/uploads/favicon.png","ms_browserconfig":"/uploads/browserconfig.xml"},"keywords":"Hexo, NexT","rss":null,"footer":{"icon":"user","copyright":null,"powered":true,"theme":{"enable":true,"version":true}},"canonical":true,"seo":false,"index_with_subtitle":false,"menu":{"home":"/ || home","archives":"/archives/ || archive"},"menu_icons":{"enable":true},"scheme":"Pisces","social_icons":{"enable":true,"icons_only":false,"transition":false},"links_icon":"link","links_title":"Links","links_layout":"block","toc":{"enable":true,"number":true,"wrap":false},"sidebar":{"position":"left","display":"post","offset":12,"b2t":false,"scrollpercent":false,"onmobile":false},"scroll_to_more":true,"save_scroll":false,"excerpt_description":true,"auto_excerpt":{"enable":false,"length":30},"read_more_btn":true,"post_meta":{"item_text":true,"created_at":true,"updated_at":false,"categories":true},"post_wordcount":{"item_text":true,"wordcount":false,"min2read":false,"totalcount":false,"separated_meta":true},"post_copyright":{"enable":false,"license":"CC BY-NC-SA 3.0","license_url":"https://creativecommons.org/licenses/by-nc-sa/3.0/"},"mobile_layout_economy":false,"android_chrome_color":"#222","custom_logo":{"enabled":false,"image":null},"marked":{"smartypants":false},"highlight_theme":"normal","font":{"enable":false,"host":null,"global":{"external":true,"family":"Lato","size":null},"headings":{"external":true,"family":null,"size":null},"posts":{"external":true,"family":null},"logo":{"external":true,"family":null,"size":null},"codes":{"external":true,"family":null,"size":null}},"mathjax":{"enable":false,"per_page":false,"cdn":"//cdn.bootcss.com/mathjax/2.7.1/latest.js?config=TeX-AMS-MML_HTMLorMML"},"han":false,"disqus":{"enable":false,"shortname":null,"count":true},"changyan":{"enable":false,"appid":null,"appkey":null},"valine":{"enable":false,"appid":null,"appkey":null,"notify":false,"verify":false,"placeholder":"Just go go","avatar":"mm","guest_info":"nick,mail,link","pageSize":10},"gitment":{"enable":false,"mint":true,"count":true,"lazy":false,"cleanly":false,"language":null,"github_user":null,"github_repo":null,"client_id":null,"client_secret":null,"proxy_gateway":null,"redirect_protocol":null},"needmoreshare2":{"enable":false,"postbottom":{"enable":false,"options":{"iconStyle":"box","boxForm":"horizontal","position":"bottomCenter","networks":"Weibo,Wechat,Douban,QQZone,Twitter,Facebook"}},"float":{"enable":false,"options":{"iconStyle":"box","boxForm":"horizontal","position":"middleRight","networks":"Weibo,Wechat,Douban,QQZone,Twitter,Facebook"}}},"duoshuo_info":{"ua_enable":true,"admin_enable":false,"user_id":0},"facebook_sdk":{"enable":false,"app_id":null,"fb_admin":null,"like_button":null,"webmaster":null},"facebook_comments_plugin":{"enable":false,"num_of_posts":10,"width":"100%","scheme":"light"},"vkontakte_api":{"enable":false,"app_id":null,"like":true,"comments":true,"num_of_posts":10},"rating":{"enable":false,"id":null,"color":"fc6423"},"leancloud_visitors":{"enable":false,"app_id":null,"app_key":null},"firestore":{"enable":false,"collection":"articles","apiKey":null,"projectId":null,"bluebird":false},"busuanzi_count":{"enable":false,"site_uv":true,"site_uv_header":"<i class=\"fa fa-user\"></i>","site_uv_footer":null,"site_pv":true,"site_pv_header":"<i class=\"fa fa-eye\"></i>","site_pv_footer":null,"page_pv":true,"page_pv_header":"<i class=\"fa fa-file-o\"></i>","page_pv_footer":null},"baidu_push":false,"calendar":{"enable":false,"calendar_id":"<required>","api_key":"<required>","orderBy":"startTime","offsetMax":24,"offsetMin":4,"timeZone":null,"showDeleted":false,"singleEvents":true,"maxResults":250},"algolia_search":{"enable":false,"hits":{"per_page":10},"labels":{"input_placeholder":"Search for Posts","hits_empty":"We didn't find any results for the search: ${query}","hits_stats":"${hits} results found in ${time} ms"}},"local_search":{"enable":false,"trigger":"auto","top_n_per_article":1},"exturl":false,"note":{"style":"simple","icons":false,"border_radius":3,"light_bg_offset":0},"label":true,"tabs":{"enable":true,"transition":{"tabs":false,"labels":true},"border_radius":0},"motion":{"enable":true,"async":false,"transition":{"post_block":"fadeIn","post_header":"slideDownIn","post_body":"slideDownIn","coll_header":"slideLeftIn","sidebar":"slideUpIn"}},"fancybox":true,"pace":false,"pace_theme":"pace-theme-minimal","canvas_nest":false,"three_waves":false,"canvas_lines":false,"canvas_sphere":false,"canvas_ribbon":{"enable":false,"size":300,"alpha":0.6,"zIndex":-1},"vendors":{"_internal":"lib","jquery":null,"fancybox":null,"fancybox_css":null,"fastclick":null,"lazyload":null,"velocity":null,"velocity_ui":null,"ua_parser":null,"fontawesome":null,"algolia_instant_js":null,"algolia_instant_css":null,"pace":null,"pace_css":null,"canvas_nest":null,"three":null,"three_waves":null,"canvas_lines":null,"canvas_sphere":null,"canvas_ribbon":null,"han":null,"needMoreShare2":null},"css":"css","js":"js","images":"images","version":"5.1.4"}}},"excerpt":"<h1 id=\"June-2nd-half-note\"><a href=\"#June-2nd-half-note\" class=\"headerlink\" title=\"June 2nd half note\"></a>June 2nd half note</h1>","more":"<h2 id=\"Microservice-pattern-API-gateway\"><a href=\"#Microservice-pattern-API-gateway\" class=\"headerlink\" title=\"Microservice pattern: API gateway\"></a>Microservice pattern: API gateway</h2><p><a href=\"https://hvalls.dev/posts/microservice-pattern-api-gateway\" target=\"_blank\" rel=\"noopener\">link</a></p>\n<p>About API Gateway:</p>\n<ul>\n<li>It acts as router</li>\n<li>It is the only entry point to our collection of microservices. This way, microservices are not needed to be public, anymore, but are behind an internal network and API Gateway is the responsible of making requests against a service or another one (Service Discovery)</li>\n<li>It acts as a data aggregator: API Gateway fetches data from several services and aggregate it to return a single rich response. Depending on the API consumer, data representation may change according the needs, and here is where Backend For Frontend (BFF) comes into play.</li>\n<li>It is a protocol abstraction layer: API Gateway can be exposed as a REST API or GraphQL or whatever, no matter what protocol or technology is being used internally to communicate with the microservices.</li>\n<li>Error management is centralized: When a service is not available, is getting too slow or something like that, API Gateway can provide data from cache, default responses or make smart decisions to avoid bottlenecks or fatal errors propagation. This keeps the circuit closed (Circuit Breaker) and makes the system more resilient and reliable.</li>\n</ul>\n<h2 id=\"Automating-safe-hands-off-deployment\"><a href=\"#Automating-safe-hands-off-deployment\" class=\"headerlink\" title=\"Automating safe hands off deployment\"></a>Automating safe hands off deployment</h2><p><a href=\"https://aws.amazon.com/builders-library/automating-safe-hands-off-deployments/\" target=\"_blank\" rel=\"noopener\">link</a></p>\n<p>Question regrading pipeline as code: how to achieve version control for splunk alerts, reports, etc...?</p>\n<h2 id=\"How-to-Make-Yourself-Study-When-You-Have-ZERO-Motivation\"><a href=\"#How-to-Make-Yourself-Study-When-You-Have-ZERO-Motivation\" class=\"headerlink\" title=\"How to Make Yourself Study When You Have ZERO Motivation\"></a>How to Make Yourself Study When You Have ZERO Motivation</h2><p><a href=\"https://www.youtube.com/watch?v=9oWOsocN7qg\" target=\"_blank\" rel=\"noopener\">link</a></p>\n<ol>\n<li>Go out for a walk</li>\n<li>Decide on a single task to work on</li>\n<li>Clear to neutral - clean up your workspace</li>\n<li>Use &quot;low effort&quot; hack - the blank page is the enemy</li>\n</ol>\n<h2 id=\"Refactoring-Patterns-Migration-vs-Adaptation\"><a href=\"#Refactoring-Patterns-Migration-vs-Adaptation\" class=\"headerlink\" title=\"Refactoring Patterns: Migration vs. Adaptation\"></a>Refactoring Patterns: Migration vs. Adaptation</h2><p><a href=\"https://www.youtube.com/watch?v=DKPn0AcvLKo&list=PLdsOZAx8I5umhnn5LLTNJbFgwA3xbycar&index=68\" target=\"_blank\" rel=\"noopener\">link</a></p>\n<p><strong>Migration pattern:</strong></p>\n<ol>\n<li>easier to roll back changes</li>\n<li>a lot less risk</li>\n<li>a lot more costs (keep both components need maintenance)</li>\n<li>requires switching logic (not good if there are too many afferent components that are associated with this component)</li>\n</ol>\n<p><strong>Adaption pattern:</strong></p>\n<ol>\n<li>hard to roll back changes</li>\n<li>a lot more risk</li>\n<li>less costs (more of refactor instead of replacement)</li>\n<li>no changes to calling components (afferent components)</li>\n</ol>\n<p><strong>Conclusion</strong>: it depends on the level of coupling, risk and costs.</p>"},{"title":"June 1st half notes","top":false,"cover":false,"toc":true,"mathjax":true,"date":"2020-07-02T03:00:05.000Z","summary":null,"password":null,"_content":"\n# June 1st half note\n<!--more-->\n## Analyzing Architecture: Code Metrics\n\n[link](https://www.youtube.com/watch?v=pELKNy8B5Nw&list=PLdsOZAx8I5umhnn5LLTNJbFgwA3xbycar&index=71)\n\n## Cyclomatic complexity\n\nIt provides a numeric value representing the complexity of a function or method\n\nV(G) = e - n + 2\n\ne - number of edges\n\nn - number of nodes\n\n## Core metrics\n\n1. number of classes per package - trend analysis\n2. number of lines of source code (based on a context) - trend analysis\n3. average complexity (1+ num_paths_thru_method; range: 2-4)\n4. DIT (depth of inheritance tree) across components\n5. WMC (weighted methods/class; sum of CC) - trend analysis\n6. CE (efferent coupling count)\n7. CA (afferent coupling count)\n\n## Refactoring: Business Justification\n\n[link](Refactoring: Business Justification)\n\nWhen we want to break the monolith, from technical point of view, we can make these justifications:\n\n1. components will be more decoupled;\n2. each part will use fewer jvm resources;\n3. deployment is limited to a separate application unit, thereby reducing deployment time and increasing robustness\n\nBut customers will not pay for that, how we can convince customers to pay for that? We can make these business justifications:\n\n1. new functionality can be delivered faster to market;\n2. overall application quality will be improved, thereby reducing bugs and costs of fixing them;\n3. development costs with developing new functionality will be significantly reduced\n\nThen the next question would be, once we decide to go this way, how do we measure to prove that it really works? We need business metrics:\n\n1. for reducing overall costs:\n   1. number of bugs\n   2. actual development and testing hours\n2. for better time to market:\n   1. actual development and testing hours\n   2. end-to-end calendar time from development to release\n3. better user satisfaction:\n   1. number of bugs\n   2. number of reported bugs\n   3. performance metrics and trends","source":"_posts/June-1st-half-notes.md","raw":"---\ntitle: June 1st half notes\ntop: false\ncover: false\ntoc: true\nmathjax: true\ndate: 2020-07-01 23:00:05\nsummary:\ntags: [Sharing, Architecture]\ncategories: [Tech]\npassword:\n---\n\n# June 1st half note\n<!--more-->\n## Analyzing Architecture: Code Metrics\n\n[link](https://www.youtube.com/watch?v=pELKNy8B5Nw&list=PLdsOZAx8I5umhnn5LLTNJbFgwA3xbycar&index=71)\n\n## Cyclomatic complexity\n\nIt provides a numeric value representing the complexity of a function or method\n\nV(G) = e - n + 2\n\ne - number of edges\n\nn - number of nodes\n\n## Core metrics\n\n1. number of classes per package - trend analysis\n2. number of lines of source code (based on a context) - trend analysis\n3. average complexity (1+ num_paths_thru_method; range: 2-4)\n4. DIT (depth of inheritance tree) across components\n5. WMC (weighted methods/class; sum of CC) - trend analysis\n6. CE (efferent coupling count)\n7. CA (afferent coupling count)\n\n## Refactoring: Business Justification\n\n[link](Refactoring: Business Justification)\n\nWhen we want to break the monolith, from technical point of view, we can make these justifications:\n\n1. components will be more decoupled;\n2. each part will use fewer jvm resources;\n3. deployment is limited to a separate application unit, thereby reducing deployment time and increasing robustness\n\nBut customers will not pay for that, how we can convince customers to pay for that? We can make these business justifications:\n\n1. new functionality can be delivered faster to market;\n2. overall application quality will be improved, thereby reducing bugs and costs of fixing them;\n3. development costs with developing new functionality will be significantly reduced\n\nThen the next question would be, once we decide to go this way, how do we measure to prove that it really works? We need business metrics:\n\n1. for reducing overall costs:\n   1. number of bugs\n   2. actual development and testing hours\n2. for better time to market:\n   1. actual development and testing hours\n   2. end-to-end calendar time from development to release\n3. better user satisfaction:\n   1. number of bugs\n   2. number of reported bugs\n   3. performance metrics and trends","slug":"June-1st-half-notes","published":1,"updated":"2020-07-13T03:01:48.865Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ckcxuqeni000nfkjxqlac9601","content":"<h1 id=\"June-1st-half-note\"><a href=\"#June-1st-half-note\" class=\"headerlink\" title=\"June 1st half note\"></a>June 1st half note</h1><a id=\"more\"></a>\n<h2 id=\"Analyzing-Architecture-Code-Metrics\"><a href=\"#Analyzing-Architecture-Code-Metrics\" class=\"headerlink\" title=\"Analyzing Architecture: Code Metrics\"></a>Analyzing Architecture: Code Metrics</h2><p><a href=\"https://www.youtube.com/watch?v=pELKNy8B5Nw&list=PLdsOZAx8I5umhnn5LLTNJbFgwA3xbycar&index=71\" target=\"_blank\" rel=\"noopener\">link</a></p>\n<h2 id=\"Cyclomatic-complexity\"><a href=\"#Cyclomatic-complexity\" class=\"headerlink\" title=\"Cyclomatic complexity\"></a>Cyclomatic complexity</h2><p>It provides a numeric value representing the complexity of a function or method</p>\n<p>V(G) = e - n + 2</p>\n<p>e - number of edges</p>\n<p>n - number of nodes</p>\n<h2 id=\"Core-metrics\"><a href=\"#Core-metrics\" class=\"headerlink\" title=\"Core metrics\"></a>Core metrics</h2><ol>\n<li>number of classes per package - trend analysis</li>\n<li>number of lines of source code (based on a context) - trend analysis</li>\n<li>average complexity (1+ num_paths_thru_method; range: 2-4)</li>\n<li>DIT (depth of inheritance tree) across components</li>\n<li>WMC (weighted methods/class; sum of CC) - trend analysis</li>\n<li>CE (efferent coupling count)</li>\n<li>CA (afferent coupling count)</li>\n</ol>\n<h2 id=\"Refactoring-Business-Justification\"><a href=\"#Refactoring-Business-Justification\" class=\"headerlink\" title=\"Refactoring: Business Justification\"></a>Refactoring: Business Justification</h2><p>[link](Refactoring: Business Justification)</p>\n<p>When we want to break the monolith, from technical point of view, we can make these justifications:</p>\n<ol>\n<li>components will be more decoupled;</li>\n<li>each part will use fewer jvm resources;</li>\n<li>deployment is limited to a separate application unit, thereby reducing deployment time and increasing robustness</li>\n</ol>\n<p>But customers will not pay for that, how we can convince customers to pay for that? We can make these business justifications:</p>\n<ol>\n<li>new functionality can be delivered faster to market;</li>\n<li>overall application quality will be improved, thereby reducing bugs and costs of fixing them;</li>\n<li>development costs with developing new functionality will be significantly reduced</li>\n</ol>\n<p>Then the next question would be, once we decide to go this way, how do we measure to prove that it really works? We need business metrics:</p>\n<ol>\n<li>for reducing overall costs:<ol>\n<li>number of bugs</li>\n<li>actual development and testing hours</li>\n</ol>\n</li>\n<li>for better time to market:<ol>\n<li>actual development and testing hours</li>\n<li>end-to-end calendar time from development to release</li>\n</ol>\n</li>\n<li>better user satisfaction:<ol>\n<li>number of bugs</li>\n<li>number of reported bugs</li>\n<li>performance metrics and trends</li>\n</ol>\n</li>\n</ol>\n","site":{"data":{"next":{"override":false,"favicon":{"small":"/uploads/favicon-16x16.png","medium":"/uploads/favicon-32x32.png","apple_touch_icon":"/uploads/apple-touch-icon.png","safari_pinned_tab":"/uploads/favicon.png","ms_browserconfig":"/uploads/browserconfig.xml"},"keywords":"Hexo, NexT","rss":null,"footer":{"icon":"user","copyright":null,"powered":true,"theme":{"enable":true,"version":true}},"canonical":true,"seo":false,"index_with_subtitle":false,"menu":{"home":"/ || home","archives":"/archives/ || archive"},"menu_icons":{"enable":true},"scheme":"Pisces","social_icons":{"enable":true,"icons_only":false,"transition":false},"links_icon":"link","links_title":"Links","links_layout":"block","toc":{"enable":true,"number":true,"wrap":false},"sidebar":{"position":"left","display":"post","offset":12,"b2t":false,"scrollpercent":false,"onmobile":false},"scroll_to_more":true,"save_scroll":false,"excerpt_description":true,"auto_excerpt":{"enable":false,"length":30},"read_more_btn":true,"post_meta":{"item_text":true,"created_at":true,"updated_at":false,"categories":true},"post_wordcount":{"item_text":true,"wordcount":false,"min2read":false,"totalcount":false,"separated_meta":true},"post_copyright":{"enable":false,"license":"CC BY-NC-SA 3.0","license_url":"https://creativecommons.org/licenses/by-nc-sa/3.0/"},"mobile_layout_economy":false,"android_chrome_color":"#222","custom_logo":{"enabled":false,"image":null},"marked":{"smartypants":false},"highlight_theme":"normal","font":{"enable":false,"host":null,"global":{"external":true,"family":"Lato","size":null},"headings":{"external":true,"family":null,"size":null},"posts":{"external":true,"family":null},"logo":{"external":true,"family":null,"size":null},"codes":{"external":true,"family":null,"size":null}},"mathjax":{"enable":false,"per_page":false,"cdn":"//cdn.bootcss.com/mathjax/2.7.1/latest.js?config=TeX-AMS-MML_HTMLorMML"},"han":false,"disqus":{"enable":false,"shortname":null,"count":true},"changyan":{"enable":false,"appid":null,"appkey":null},"valine":{"enable":false,"appid":null,"appkey":null,"notify":false,"verify":false,"placeholder":"Just go go","avatar":"mm","guest_info":"nick,mail,link","pageSize":10},"gitment":{"enable":false,"mint":true,"count":true,"lazy":false,"cleanly":false,"language":null,"github_user":null,"github_repo":null,"client_id":null,"client_secret":null,"proxy_gateway":null,"redirect_protocol":null},"needmoreshare2":{"enable":false,"postbottom":{"enable":false,"options":{"iconStyle":"box","boxForm":"horizontal","position":"bottomCenter","networks":"Weibo,Wechat,Douban,QQZone,Twitter,Facebook"}},"float":{"enable":false,"options":{"iconStyle":"box","boxForm":"horizontal","position":"middleRight","networks":"Weibo,Wechat,Douban,QQZone,Twitter,Facebook"}}},"duoshuo_info":{"ua_enable":true,"admin_enable":false,"user_id":0},"facebook_sdk":{"enable":false,"app_id":null,"fb_admin":null,"like_button":null,"webmaster":null},"facebook_comments_plugin":{"enable":false,"num_of_posts":10,"width":"100%","scheme":"light"},"vkontakte_api":{"enable":false,"app_id":null,"like":true,"comments":true,"num_of_posts":10},"rating":{"enable":false,"id":null,"color":"fc6423"},"leancloud_visitors":{"enable":false,"app_id":null,"app_key":null},"firestore":{"enable":false,"collection":"articles","apiKey":null,"projectId":null,"bluebird":false},"busuanzi_count":{"enable":false,"site_uv":true,"site_uv_header":"<i class=\"fa fa-user\"></i>","site_uv_footer":null,"site_pv":true,"site_pv_header":"<i class=\"fa fa-eye\"></i>","site_pv_footer":null,"page_pv":true,"page_pv_header":"<i class=\"fa fa-file-o\"></i>","page_pv_footer":null},"baidu_push":false,"calendar":{"enable":false,"calendar_id":"<required>","api_key":"<required>","orderBy":"startTime","offsetMax":24,"offsetMin":4,"timeZone":null,"showDeleted":false,"singleEvents":true,"maxResults":250},"algolia_search":{"enable":false,"hits":{"per_page":10},"labels":{"input_placeholder":"Search for Posts","hits_empty":"We didn't find any results for the search: ${query}","hits_stats":"${hits} results found in ${time} ms"}},"local_search":{"enable":false,"trigger":"auto","top_n_per_article":1},"exturl":false,"note":{"style":"simple","icons":false,"border_radius":3,"light_bg_offset":0},"label":true,"tabs":{"enable":true,"transition":{"tabs":false,"labels":true},"border_radius":0},"motion":{"enable":true,"async":false,"transition":{"post_block":"fadeIn","post_header":"slideDownIn","post_body":"slideDownIn","coll_header":"slideLeftIn","sidebar":"slideUpIn"}},"fancybox":true,"pace":false,"pace_theme":"pace-theme-minimal","canvas_nest":false,"three_waves":false,"canvas_lines":false,"canvas_sphere":false,"canvas_ribbon":{"enable":false,"size":300,"alpha":0.6,"zIndex":-1},"vendors":{"_internal":"lib","jquery":null,"fancybox":null,"fancybox_css":null,"fastclick":null,"lazyload":null,"velocity":null,"velocity_ui":null,"ua_parser":null,"fontawesome":null,"algolia_instant_js":null,"algolia_instant_css":null,"pace":null,"pace_css":null,"canvas_nest":null,"three":null,"three_waves":null,"canvas_lines":null,"canvas_sphere":null,"canvas_ribbon":null,"han":null,"needMoreShare2":null},"css":"css","js":"js","images":"images","version":"5.1.4"}}},"excerpt":"<h1 id=\"June-1st-half-note\"><a href=\"#June-1st-half-note\" class=\"headerlink\" title=\"June 1st half note\"></a>June 1st half note</h1>","more":"<h2 id=\"Analyzing-Architecture-Code-Metrics\"><a href=\"#Analyzing-Architecture-Code-Metrics\" class=\"headerlink\" title=\"Analyzing Architecture: Code Metrics\"></a>Analyzing Architecture: Code Metrics</h2><p><a href=\"https://www.youtube.com/watch?v=pELKNy8B5Nw&list=PLdsOZAx8I5umhnn5LLTNJbFgwA3xbycar&index=71\" target=\"_blank\" rel=\"noopener\">link</a></p>\n<h2 id=\"Cyclomatic-complexity\"><a href=\"#Cyclomatic-complexity\" class=\"headerlink\" title=\"Cyclomatic complexity\"></a>Cyclomatic complexity</h2><p>It provides a numeric value representing the complexity of a function or method</p>\n<p>V(G) = e - n + 2</p>\n<p>e - number of edges</p>\n<p>n - number of nodes</p>\n<h2 id=\"Core-metrics\"><a href=\"#Core-metrics\" class=\"headerlink\" title=\"Core metrics\"></a>Core metrics</h2><ol>\n<li>number of classes per package - trend analysis</li>\n<li>number of lines of source code (based on a context) - trend analysis</li>\n<li>average complexity (1+ num_paths_thru_method; range: 2-4)</li>\n<li>DIT (depth of inheritance tree) across components</li>\n<li>WMC (weighted methods/class; sum of CC) - trend analysis</li>\n<li>CE (efferent coupling count)</li>\n<li>CA (afferent coupling count)</li>\n</ol>\n<h2 id=\"Refactoring-Business-Justification\"><a href=\"#Refactoring-Business-Justification\" class=\"headerlink\" title=\"Refactoring: Business Justification\"></a>Refactoring: Business Justification</h2><p>[link](Refactoring: Business Justification)</p>\n<p>When we want to break the monolith, from technical point of view, we can make these justifications:</p>\n<ol>\n<li>components will be more decoupled;</li>\n<li>each part will use fewer jvm resources;</li>\n<li>deployment is limited to a separate application unit, thereby reducing deployment time and increasing robustness</li>\n</ol>\n<p>But customers will not pay for that, how we can convince customers to pay for that? We can make these business justifications:</p>\n<ol>\n<li>new functionality can be delivered faster to market;</li>\n<li>overall application quality will be improved, thereby reducing bugs and costs of fixing them;</li>\n<li>development costs with developing new functionality will be significantly reduced</li>\n</ol>\n<p>Then the next question would be, once we decide to go this way, how do we measure to prove that it really works? We need business metrics:</p>\n<ol>\n<li>for reducing overall costs:<ol>\n<li>number of bugs</li>\n<li>actual development and testing hours</li>\n</ol>\n</li>\n<li>for better time to market:<ol>\n<li>actual development and testing hours</li>\n<li>end-to-end calendar time from development to release</li>\n</ol>\n</li>\n<li>better user satisfaction:<ol>\n<li>number of bugs</li>\n<li>number of reported bugs</li>\n<li>performance metrics and trends</li>\n</ol>\n</li>\n</ol>"},{"title":"Netty-in-Action-Chapter 1","top":false,"cover":false,"toc":true,"mathjax":true,"date":"2020-03-28T16:33:43.000Z","summary":"Reading notes for Chapter 1 of &laquo;Netty in Action&raquo;","password":null,"_content":"\n# Chapter 1 - Netty - asynchronous and event-driven\n<!--more-->\n## Networking in Java\n\nPreviously we have to use one thread per connection to do the read/write, this has problems:\n\n1.  Resource waste\n2.  Memory allocation\n3.  Limit on number of threads supported by JVM\n\n![Java blocking I/O](java_bloking_IO.png)\n\n### Selector\nIt's the key for JAVA NIO, it uses event notification API to indicate if a socket is done read/write\n\n## Introducing Netty\n\n![Netty feature summary](netty_feature_summary.png)\n\n## Netty's core components\n\n### Channel\nJust like a car with incoming and outcoming messages\n\n### Callbacks\nNetty uses callbacks internally when handling events; when a callback is triggered the event can be handled by an implementation of interface ChannelHandler. The next listing shows an example: when a new connection has been established the ChannelHandler callback channelActive() will be called and will print a message.\n![Netty callback](callback.png)\n\n### Future\n1. Provide a way to notify the application when the operation is completed\n2. Java's Future can only provide manual check for the status of the operation\n3. Netty's Future does not need to do manual check anymore \n4. Netty's ChannelFuture is able to let you register to the ChannelFutureListener interfaces, the listener has a callback has a callback methods for indication of completion\n\n![Netty Future 1](callback_with_future.png)\n![Netty Future 2](callback_with_future2.png)\n\n### Events and handlers\n\n### Summary\n\n***Future, Callbacks and Handlers***: provide a processing environment that allows the logic of your application to evolve independently of any concerns with network operations.\n***Selectors, Events, and EventLoops***: abstracts the *Selector* away from the application by firing events, eliminating all the handwritten dispatch code that would otherwise be required, also eliminates any concern you might have about synchronization in *ChannelHandlers*.\n","source":"_posts/Netty-in-Action-Chapter-1-1.md","raw":"---\ntitle: Netty-in-Action-Chapter 1\ntop: false\ncover: false\ntoc: true\nmathjax: true\ndate: 2020-03-28 12:33:43\nsummary: Reading notes for Chapter 1 of &laquo;Netty in Action&raquo;\ncategories: Tech\ntags:\n    - Java\n    - Netty\npassword:\n---\n\n# Chapter 1 - Netty - asynchronous and event-driven\n<!--more-->\n## Networking in Java\n\nPreviously we have to use one thread per connection to do the read/write, this has problems:\n\n1.  Resource waste\n2.  Memory allocation\n3.  Limit on number of threads supported by JVM\n\n![Java blocking I/O](java_bloking_IO.png)\n\n### Selector\nIt's the key for JAVA NIO, it uses event notification API to indicate if a socket is done read/write\n\n## Introducing Netty\n\n![Netty feature summary](netty_feature_summary.png)\n\n## Netty's core components\n\n### Channel\nJust like a car with incoming and outcoming messages\n\n### Callbacks\nNetty uses callbacks internally when handling events; when a callback is triggered the event can be handled by an implementation of interface ChannelHandler. The next listing shows an example: when a new connection has been established the ChannelHandler callback channelActive() will be called and will print a message.\n![Netty callback](callback.png)\n\n### Future\n1. Provide a way to notify the application when the operation is completed\n2. Java's Future can only provide manual check for the status of the operation\n3. Netty's Future does not need to do manual check anymore \n4. Netty's ChannelFuture is able to let you register to the ChannelFutureListener interfaces, the listener has a callback has a callback methods for indication of completion\n\n![Netty Future 1](callback_with_future.png)\n![Netty Future 2](callback_with_future2.png)\n\n### Events and handlers\n\n### Summary\n\n***Future, Callbacks and Handlers***: provide a processing environment that allows the logic of your application to evolve independently of any concerns with network operations.\n***Selectors, Events, and EventLoops***: abstracts the *Selector* away from the application by firing events, eliminating all the handwritten dispatch code that would otherwise be required, also eliminates any concern you might have about synchronization in *ChannelHandlers*.\n","slug":"Netty-in-Action-Chapter-1-1","published":1,"updated":"2020-05-05T15:11:35.849Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ckcxuqenq000rfkjxa79jep9q","content":"<h1 id=\"Chapter-1-Netty-asynchronous-and-event-driven\"><a href=\"#Chapter-1-Netty-asynchronous-and-event-driven\" class=\"headerlink\" title=\"Chapter 1 - Netty - asynchronous and event-driven\"></a>Chapter 1 - Netty - asynchronous and event-driven</h1><a id=\"more\"></a>\n<h2 id=\"Networking-in-Java\"><a href=\"#Networking-in-Java\" class=\"headerlink\" title=\"Networking in Java\"></a>Networking in Java</h2><p>Previously we have to use one thread per connection to do the read/write, this has problems:</p>\n<ol>\n<li>Resource waste</li>\n<li>Memory allocation</li>\n<li>Limit on number of threads supported by JVM</li>\n</ol>\n<p><img src=\"java_bloking_IO.png\" alt=\"Java blocking I/O\"></p>\n<h3 id=\"Selector\"><a href=\"#Selector\" class=\"headerlink\" title=\"Selector\"></a>Selector</h3><p>It&#39;s the key for JAVA NIO, it uses event notification API to indicate if a socket is done read/write</p>\n<h2 id=\"Introducing-Netty\"><a href=\"#Introducing-Netty\" class=\"headerlink\" title=\"Introducing Netty\"></a>Introducing Netty</h2><p><img src=\"netty_feature_summary.png\" alt=\"Netty feature summary\"></p>\n<h2 id=\"Netty-39-s-core-components\"><a href=\"#Netty-39-s-core-components\" class=\"headerlink\" title=\"Netty&#39;s core components\"></a>Netty&#39;s core components</h2><h3 id=\"Channel\"><a href=\"#Channel\" class=\"headerlink\" title=\"Channel\"></a>Channel</h3><p>Just like a car with incoming and outcoming messages</p>\n<h3 id=\"Callbacks\"><a href=\"#Callbacks\" class=\"headerlink\" title=\"Callbacks\"></a>Callbacks</h3><p>Netty uses callbacks internally when handling events; when a callback is triggered the event can be handled by an implementation of interface ChannelHandler. The next listing shows an example: when a new connection has been established the ChannelHandler callback channelActive() will be called and will print a message.<br><img src=\"callback.png\" alt=\"Netty callback\"></p>\n<h3 id=\"Future\"><a href=\"#Future\" class=\"headerlink\" title=\"Future\"></a>Future</h3><ol>\n<li>Provide a way to notify the application when the operation is completed</li>\n<li>Java&#39;s Future can only provide manual check for the status of the operation</li>\n<li>Netty&#39;s Future does not need to do manual check anymore </li>\n<li>Netty&#39;s ChannelFuture is able to let you register to the ChannelFutureListener interfaces, the listener has a callback has a callback methods for indication of completion</li>\n</ol>\n<p><img src=\"callback_with_future.png\" alt=\"Netty Future 1\"><br><img src=\"callback_with_future2.png\" alt=\"Netty Future 2\"></p>\n<h3 id=\"Events-and-handlers\"><a href=\"#Events-and-handlers\" class=\"headerlink\" title=\"Events and handlers\"></a>Events and handlers</h3><h3 id=\"Summary\"><a href=\"#Summary\" class=\"headerlink\" title=\"Summary\"></a>Summary</h3><p><strong><em>Future, Callbacks and Handlers</em></strong>: provide a processing environment that allows the logic of your application to evolve independently of any concerns with network operations.<br><strong><em>Selectors, Events, and EventLoops</em></strong>: abstracts the <em>Selector</em> away from the application by firing events, eliminating all the handwritten dispatch code that would otherwise be required, also eliminates any concern you might have about synchronization in <em>ChannelHandlers</em>.</p>\n","site":{"data":{"next":{"override":false,"favicon":{"small":"/uploads/favicon-16x16.png","medium":"/uploads/favicon-32x32.png","apple_touch_icon":"/uploads/apple-touch-icon.png","safari_pinned_tab":"/uploads/favicon.png","ms_browserconfig":"/uploads/browserconfig.xml"},"keywords":"Hexo, NexT","rss":null,"footer":{"icon":"user","copyright":null,"powered":true,"theme":{"enable":true,"version":true}},"canonical":true,"seo":false,"index_with_subtitle":false,"menu":{"home":"/ || home","archives":"/archives/ || archive"},"menu_icons":{"enable":true},"scheme":"Pisces","social_icons":{"enable":true,"icons_only":false,"transition":false},"links_icon":"link","links_title":"Links","links_layout":"block","toc":{"enable":true,"number":true,"wrap":false},"sidebar":{"position":"left","display":"post","offset":12,"b2t":false,"scrollpercent":false,"onmobile":false},"scroll_to_more":true,"save_scroll":false,"excerpt_description":true,"auto_excerpt":{"enable":false,"length":30},"read_more_btn":true,"post_meta":{"item_text":true,"created_at":true,"updated_at":false,"categories":true},"post_wordcount":{"item_text":true,"wordcount":false,"min2read":false,"totalcount":false,"separated_meta":true},"post_copyright":{"enable":false,"license":"CC BY-NC-SA 3.0","license_url":"https://creativecommons.org/licenses/by-nc-sa/3.0/"},"mobile_layout_economy":false,"android_chrome_color":"#222","custom_logo":{"enabled":false,"image":null},"marked":{"smartypants":false},"highlight_theme":"normal","font":{"enable":false,"host":null,"global":{"external":true,"family":"Lato","size":null},"headings":{"external":true,"family":null,"size":null},"posts":{"external":true,"family":null},"logo":{"external":true,"family":null,"size":null},"codes":{"external":true,"family":null,"size":null}},"mathjax":{"enable":false,"per_page":false,"cdn":"//cdn.bootcss.com/mathjax/2.7.1/latest.js?config=TeX-AMS-MML_HTMLorMML"},"han":false,"disqus":{"enable":false,"shortname":null,"count":true},"changyan":{"enable":false,"appid":null,"appkey":null},"valine":{"enable":false,"appid":null,"appkey":null,"notify":false,"verify":false,"placeholder":"Just go go","avatar":"mm","guest_info":"nick,mail,link","pageSize":10},"gitment":{"enable":false,"mint":true,"count":true,"lazy":false,"cleanly":false,"language":null,"github_user":null,"github_repo":null,"client_id":null,"client_secret":null,"proxy_gateway":null,"redirect_protocol":null},"needmoreshare2":{"enable":false,"postbottom":{"enable":false,"options":{"iconStyle":"box","boxForm":"horizontal","position":"bottomCenter","networks":"Weibo,Wechat,Douban,QQZone,Twitter,Facebook"}},"float":{"enable":false,"options":{"iconStyle":"box","boxForm":"horizontal","position":"middleRight","networks":"Weibo,Wechat,Douban,QQZone,Twitter,Facebook"}}},"duoshuo_info":{"ua_enable":true,"admin_enable":false,"user_id":0},"facebook_sdk":{"enable":false,"app_id":null,"fb_admin":null,"like_button":null,"webmaster":null},"facebook_comments_plugin":{"enable":false,"num_of_posts":10,"width":"100%","scheme":"light"},"vkontakte_api":{"enable":false,"app_id":null,"like":true,"comments":true,"num_of_posts":10},"rating":{"enable":false,"id":null,"color":"fc6423"},"leancloud_visitors":{"enable":false,"app_id":null,"app_key":null},"firestore":{"enable":false,"collection":"articles","apiKey":null,"projectId":null,"bluebird":false},"busuanzi_count":{"enable":false,"site_uv":true,"site_uv_header":"<i class=\"fa fa-user\"></i>","site_uv_footer":null,"site_pv":true,"site_pv_header":"<i class=\"fa fa-eye\"></i>","site_pv_footer":null,"page_pv":true,"page_pv_header":"<i class=\"fa fa-file-o\"></i>","page_pv_footer":null},"baidu_push":false,"calendar":{"enable":false,"calendar_id":"<required>","api_key":"<required>","orderBy":"startTime","offsetMax":24,"offsetMin":4,"timeZone":null,"showDeleted":false,"singleEvents":true,"maxResults":250},"algolia_search":{"enable":false,"hits":{"per_page":10},"labels":{"input_placeholder":"Search for Posts","hits_empty":"We didn't find any results for the search: ${query}","hits_stats":"${hits} results found in ${time} ms"}},"local_search":{"enable":false,"trigger":"auto","top_n_per_article":1},"exturl":false,"note":{"style":"simple","icons":false,"border_radius":3,"light_bg_offset":0},"label":true,"tabs":{"enable":true,"transition":{"tabs":false,"labels":true},"border_radius":0},"motion":{"enable":true,"async":false,"transition":{"post_block":"fadeIn","post_header":"slideDownIn","post_body":"slideDownIn","coll_header":"slideLeftIn","sidebar":"slideUpIn"}},"fancybox":true,"pace":false,"pace_theme":"pace-theme-minimal","canvas_nest":false,"three_waves":false,"canvas_lines":false,"canvas_sphere":false,"canvas_ribbon":{"enable":false,"size":300,"alpha":0.6,"zIndex":-1},"vendors":{"_internal":"lib","jquery":null,"fancybox":null,"fancybox_css":null,"fastclick":null,"lazyload":null,"velocity":null,"velocity_ui":null,"ua_parser":null,"fontawesome":null,"algolia_instant_js":null,"algolia_instant_css":null,"pace":null,"pace_css":null,"canvas_nest":null,"three":null,"three_waves":null,"canvas_lines":null,"canvas_sphere":null,"canvas_ribbon":null,"han":null,"needMoreShare2":null},"css":"css","js":"js","images":"images","version":"5.1.4"}}},"excerpt":"<h1 id=\"Chapter-1-Netty-asynchronous-and-event-driven\"><a href=\"#Chapter-1-Netty-asynchronous-and-event-driven\" class=\"headerlink\" title=\"Chapter 1 - Netty - asynchronous and event-driven\"></a>Chapter 1 - Netty - asynchronous and event-driven</h1>","more":"<h2 id=\"Networking-in-Java\"><a href=\"#Networking-in-Java\" class=\"headerlink\" title=\"Networking in Java\"></a>Networking in Java</h2><p>Previously we have to use one thread per connection to do the read/write, this has problems:</p>\n<ol>\n<li>Resource waste</li>\n<li>Memory allocation</li>\n<li>Limit on number of threads supported by JVM</li>\n</ol>\n<p><img src=\"java_bloking_IO.png\" alt=\"Java blocking I/O\"></p>\n<h3 id=\"Selector\"><a href=\"#Selector\" class=\"headerlink\" title=\"Selector\"></a>Selector</h3><p>It&#39;s the key for JAVA NIO, it uses event notification API to indicate if a socket is done read/write</p>\n<h2 id=\"Introducing-Netty\"><a href=\"#Introducing-Netty\" class=\"headerlink\" title=\"Introducing Netty\"></a>Introducing Netty</h2><p><img src=\"netty_feature_summary.png\" alt=\"Netty feature summary\"></p>\n<h2 id=\"Netty-39-s-core-components\"><a href=\"#Netty-39-s-core-components\" class=\"headerlink\" title=\"Netty&#39;s core components\"></a>Netty&#39;s core components</h2><h3 id=\"Channel\"><a href=\"#Channel\" class=\"headerlink\" title=\"Channel\"></a>Channel</h3><p>Just like a car with incoming and outcoming messages</p>\n<h3 id=\"Callbacks\"><a href=\"#Callbacks\" class=\"headerlink\" title=\"Callbacks\"></a>Callbacks</h3><p>Netty uses callbacks internally when handling events; when a callback is triggered the event can be handled by an implementation of interface ChannelHandler. The next listing shows an example: when a new connection has been established the ChannelHandler callback channelActive() will be called and will print a message.<br><img src=\"callback.png\" alt=\"Netty callback\"></p>\n<h3 id=\"Future\"><a href=\"#Future\" class=\"headerlink\" title=\"Future\"></a>Future</h3><ol>\n<li>Provide a way to notify the application when the operation is completed</li>\n<li>Java&#39;s Future can only provide manual check for the status of the operation</li>\n<li>Netty&#39;s Future does not need to do manual check anymore </li>\n<li>Netty&#39;s ChannelFuture is able to let you register to the ChannelFutureListener interfaces, the listener has a callback has a callback methods for indication of completion</li>\n</ol>\n<p><img src=\"callback_with_future.png\" alt=\"Netty Future 1\"><br><img src=\"callback_with_future2.png\" alt=\"Netty Future 2\"></p>\n<h3 id=\"Events-and-handlers\"><a href=\"#Events-and-handlers\" class=\"headerlink\" title=\"Events and handlers\"></a>Events and handlers</h3><h3 id=\"Summary\"><a href=\"#Summary\" class=\"headerlink\" title=\"Summary\"></a>Summary</h3><p><strong><em>Future, Callbacks and Handlers</em></strong>: provide a processing environment that allows the logic of your application to evolve independently of any concerns with network operations.<br><strong><em>Selectors, Events, and EventLoops</em></strong>: abstracts the <em>Selector</em> away from the application by firing events, eliminating all the handwritten dispatch code that would otherwise be required, also eliminates any concern you might have about synchronization in <em>ChannelHandlers</em>.</p>"},{"title":"Netty in Action - Chapter 2","top":false,"cover":false,"toc":true,"mathjax":true,"date":"2020-04-01T01:09:34.000Z","summary":"Reading notes for Chapter 2 of &laquo;Netty in Action&raquo;","password":null,"_content":"\n# Chapter 2 - First Netty Application - Echo Client and Server\n<!--more-->\n## Echo Server\n1. At least one ChannelHandler - implementation of data processing\n2. Bootstrapping - startup code that configures server.\n\n\n## Echo Client\nThe client will: \n1. Connect to the server\n2. Send one or more messages\n3. For each message, wait for and receive the same message back from the server\n4. Close the connection\n\n**NOTE**: SimpleChannelInboundHandler takes care of releasing the memory reference to the ByteBuf that holds the message.\n## [Sample Code](https://github.com/adrrrrrrrian/programs-for-language-learning/tree/master/Java/Netty/Chapter2)","source":"_posts/Netty-in-Action-Chapter-2.md","raw":"---\ntitle: Netty in Action - Chapter 2\ntop: false\ncover: false\ntoc: true\nmathjax: true\ndate: 2020-03-31 21:09:34\nsummary: Reading notes for Chapter 2 of &laquo;Netty in Action&raquo;\ncategories: Tech\ntags:\n    - Java\n    - Netty\npassword:\n---\n\n# Chapter 2 - First Netty Application - Echo Client and Server\n<!--more-->\n## Echo Server\n1. At least one ChannelHandler - implementation of data processing\n2. Bootstrapping - startup code that configures server.\n\n\n## Echo Client\nThe client will: \n1. Connect to the server\n2. Send one or more messages\n3. For each message, wait for and receive the same message back from the server\n4. Close the connection\n\n**NOTE**: SimpleChannelInboundHandler takes care of releasing the memory reference to the ByteBuf that holds the message.\n## [Sample Code](https://github.com/adrrrrrrrian/programs-for-language-learning/tree/master/Java/Netty/Chapter2)","slug":"Netty-in-Action-Chapter-2","published":1,"updated":"2020-05-05T15:11:40.116Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ckcxuqeny000tfkjxojg53n30","content":"<h1 id=\"Chapter-2-First-Netty-Application-Echo-Client-and-Server\"><a href=\"#Chapter-2-First-Netty-Application-Echo-Client-and-Server\" class=\"headerlink\" title=\"Chapter 2 - First Netty Application - Echo Client and Server\"></a>Chapter 2 - First Netty Application - Echo Client and Server</h1><a id=\"more\"></a>\n<h2 id=\"Echo-Server\"><a href=\"#Echo-Server\" class=\"headerlink\" title=\"Echo Server\"></a>Echo Server</h2><ol>\n<li>At least one ChannelHandler - implementation of data processing</li>\n<li>Bootstrapping - startup code that configures server.</li>\n</ol>\n<h2 id=\"Echo-Client\"><a href=\"#Echo-Client\" class=\"headerlink\" title=\"Echo Client\"></a>Echo Client</h2><p>The client will: </p>\n<ol>\n<li>Connect to the server</li>\n<li>Send one or more messages</li>\n<li>For each message, wait for and receive the same message back from the server</li>\n<li>Close the connection</li>\n</ol>\n<p><strong>NOTE</strong>: SimpleChannelInboundHandler takes care of releasing the memory reference to the ByteBuf that holds the message.</p>\n<h2 id=\"Sample-Code\"><a href=\"#Sample-Code\" class=\"headerlink\" title=\"Sample Code\"></a><a href=\"https://github.com/adrrrrrrrian/programs-for-language-learning/tree/master/Java/Netty/Chapter2\" target=\"_blank\" rel=\"noopener\">Sample Code</a></h2>","site":{"data":{"next":{"override":false,"favicon":{"small":"/uploads/favicon-16x16.png","medium":"/uploads/favicon-32x32.png","apple_touch_icon":"/uploads/apple-touch-icon.png","safari_pinned_tab":"/uploads/favicon.png","ms_browserconfig":"/uploads/browserconfig.xml"},"keywords":"Hexo, NexT","rss":null,"footer":{"icon":"user","copyright":null,"powered":true,"theme":{"enable":true,"version":true}},"canonical":true,"seo":false,"index_with_subtitle":false,"menu":{"home":"/ || home","archives":"/archives/ || archive"},"menu_icons":{"enable":true},"scheme":"Pisces","social_icons":{"enable":true,"icons_only":false,"transition":false},"links_icon":"link","links_title":"Links","links_layout":"block","toc":{"enable":true,"number":true,"wrap":false},"sidebar":{"position":"left","display":"post","offset":12,"b2t":false,"scrollpercent":false,"onmobile":false},"scroll_to_more":true,"save_scroll":false,"excerpt_description":true,"auto_excerpt":{"enable":false,"length":30},"read_more_btn":true,"post_meta":{"item_text":true,"created_at":true,"updated_at":false,"categories":true},"post_wordcount":{"item_text":true,"wordcount":false,"min2read":false,"totalcount":false,"separated_meta":true},"post_copyright":{"enable":false,"license":"CC BY-NC-SA 3.0","license_url":"https://creativecommons.org/licenses/by-nc-sa/3.0/"},"mobile_layout_economy":false,"android_chrome_color":"#222","custom_logo":{"enabled":false,"image":null},"marked":{"smartypants":false},"highlight_theme":"normal","font":{"enable":false,"host":null,"global":{"external":true,"family":"Lato","size":null},"headings":{"external":true,"family":null,"size":null},"posts":{"external":true,"family":null},"logo":{"external":true,"family":null,"size":null},"codes":{"external":true,"family":null,"size":null}},"mathjax":{"enable":false,"per_page":false,"cdn":"//cdn.bootcss.com/mathjax/2.7.1/latest.js?config=TeX-AMS-MML_HTMLorMML"},"han":false,"disqus":{"enable":false,"shortname":null,"count":true},"changyan":{"enable":false,"appid":null,"appkey":null},"valine":{"enable":false,"appid":null,"appkey":null,"notify":false,"verify":false,"placeholder":"Just go go","avatar":"mm","guest_info":"nick,mail,link","pageSize":10},"gitment":{"enable":false,"mint":true,"count":true,"lazy":false,"cleanly":false,"language":null,"github_user":null,"github_repo":null,"client_id":null,"client_secret":null,"proxy_gateway":null,"redirect_protocol":null},"needmoreshare2":{"enable":false,"postbottom":{"enable":false,"options":{"iconStyle":"box","boxForm":"horizontal","position":"bottomCenter","networks":"Weibo,Wechat,Douban,QQZone,Twitter,Facebook"}},"float":{"enable":false,"options":{"iconStyle":"box","boxForm":"horizontal","position":"middleRight","networks":"Weibo,Wechat,Douban,QQZone,Twitter,Facebook"}}},"duoshuo_info":{"ua_enable":true,"admin_enable":false,"user_id":0},"facebook_sdk":{"enable":false,"app_id":null,"fb_admin":null,"like_button":null,"webmaster":null},"facebook_comments_plugin":{"enable":false,"num_of_posts":10,"width":"100%","scheme":"light"},"vkontakte_api":{"enable":false,"app_id":null,"like":true,"comments":true,"num_of_posts":10},"rating":{"enable":false,"id":null,"color":"fc6423"},"leancloud_visitors":{"enable":false,"app_id":null,"app_key":null},"firestore":{"enable":false,"collection":"articles","apiKey":null,"projectId":null,"bluebird":false},"busuanzi_count":{"enable":false,"site_uv":true,"site_uv_header":"<i class=\"fa fa-user\"></i>","site_uv_footer":null,"site_pv":true,"site_pv_header":"<i class=\"fa fa-eye\"></i>","site_pv_footer":null,"page_pv":true,"page_pv_header":"<i class=\"fa fa-file-o\"></i>","page_pv_footer":null},"baidu_push":false,"calendar":{"enable":false,"calendar_id":"<required>","api_key":"<required>","orderBy":"startTime","offsetMax":24,"offsetMin":4,"timeZone":null,"showDeleted":false,"singleEvents":true,"maxResults":250},"algolia_search":{"enable":false,"hits":{"per_page":10},"labels":{"input_placeholder":"Search for Posts","hits_empty":"We didn't find any results for the search: ${query}","hits_stats":"${hits} results found in ${time} ms"}},"local_search":{"enable":false,"trigger":"auto","top_n_per_article":1},"exturl":false,"note":{"style":"simple","icons":false,"border_radius":3,"light_bg_offset":0},"label":true,"tabs":{"enable":true,"transition":{"tabs":false,"labels":true},"border_radius":0},"motion":{"enable":true,"async":false,"transition":{"post_block":"fadeIn","post_header":"slideDownIn","post_body":"slideDownIn","coll_header":"slideLeftIn","sidebar":"slideUpIn"}},"fancybox":true,"pace":false,"pace_theme":"pace-theme-minimal","canvas_nest":false,"three_waves":false,"canvas_lines":false,"canvas_sphere":false,"canvas_ribbon":{"enable":false,"size":300,"alpha":0.6,"zIndex":-1},"vendors":{"_internal":"lib","jquery":null,"fancybox":null,"fancybox_css":null,"fastclick":null,"lazyload":null,"velocity":null,"velocity_ui":null,"ua_parser":null,"fontawesome":null,"algolia_instant_js":null,"algolia_instant_css":null,"pace":null,"pace_css":null,"canvas_nest":null,"three":null,"three_waves":null,"canvas_lines":null,"canvas_sphere":null,"canvas_ribbon":null,"han":null,"needMoreShare2":null},"css":"css","js":"js","images":"images","version":"5.1.4"}}},"excerpt":"<h1 id=\"Chapter-2-First-Netty-Application-Echo-Client-and-Server\"><a href=\"#Chapter-2-First-Netty-Application-Echo-Client-and-Server\" class=\"headerlink\" title=\"Chapter 2 - First Netty Application - Echo Client and Server\"></a>Chapter 2 - First Netty Application - Echo Client and Server</h1>","more":"<h2 id=\"Echo-Server\"><a href=\"#Echo-Server\" class=\"headerlink\" title=\"Echo Server\"></a>Echo Server</h2><ol>\n<li>At least one ChannelHandler - implementation of data processing</li>\n<li>Bootstrapping - startup code that configures server.</li>\n</ol>\n<h2 id=\"Echo-Client\"><a href=\"#Echo-Client\" class=\"headerlink\" title=\"Echo Client\"></a>Echo Client</h2><p>The client will: </p>\n<ol>\n<li>Connect to the server</li>\n<li>Send one or more messages</li>\n<li>For each message, wait for and receive the same message back from the server</li>\n<li>Close the connection</li>\n</ol>\n<p><strong>NOTE</strong>: SimpleChannelInboundHandler takes care of releasing the memory reference to the ByteBuf that holds the message.</p>\n<h2 id=\"Sample-Code\"><a href=\"#Sample-Code\" class=\"headerlink\" title=\"Sample Code\"></a><a href=\"https://github.com/adrrrrrrrian/programs-for-language-learning/tree/master/Java/Netty/Chapter2\" target=\"_blank\" rel=\"noopener\">Sample Code</a></h2>"},{"title":"Netty in Action - Chapter 3","top":false,"cover":false,"toc":true,"mathjax":true,"date":"2020-04-02T12:19:04.000Z","summary":"Reading notes for Chapter 3 of &laquo;Netty in Action&raquo;","password":null,"_content":"\n\n# Chapter 3 - Netty components and design\n<!--more-->\nChannel - Sockets\nEventLoop - Control flow, multithreading, concurrency\nChannelFuture - Asynchronous notification, a placeholder for the result of an operation that's to be executed in the future.\n\n### Interface EventLoop\n\n1.  An *EventLoopGroup* can contain multiple *EventLoops*\n2.  An *EventLoop* is bound to a single Thread for its lifetime\n3.  All I/O events processed by an *EventLoop* are handled on its dedicated Thread\n4.  A channel is registered for its lifetime with a single *EventLoop*\n5.  A single *EventLoop* may be assigned to one or more *Channels*\n\n![Channel and EventLoop](channel_eventLoop.png)\n\n### Interface ChannelHandler\n\nPrimary component of Netty which serves as the container for all application logic that applies to inbound and outbound data. \n\n### Interface ChannelPipeline\n\n*ChannelHandlers* are installed in *ChannelPipeline* as follows: \n1.  The *ChannelInitializer* implementation is registered with a *ServerBootstrap*\n2.  When *ChannelInitializer*.*initChannel*() is called, it will install a custom set of *ChannelHandlers* in the pipeline\n3.  The *ChannelInitializer* removes itself from the *ChannelPipeline*\n\n![ChannelPipeline](channelPipeline.png)\n\nThere are two ways of sending messages in Netty: \n1. Write directly to the *Channel*, which will cause the message to start from the tail of the pipeline\n2. Write to a *ChannelHandlerContext*, which will cause the message to start from the next handler in the pipeline\n\n### Encoder and decoder\n\nWhen inbound message comes in, it will be decoded\nWhen outbound message goes out, it will be encoded\n\nThe encoder/decoder adapter classes provided by Netty implement either *ChannelInboundHandler* or *ChannelOutboundHandler*\nFor each inbound message, it will call decode() and forward the decoded bytes to the next *ChannelInboundHandler* in the pipeline; An encoder converts the message to bytes and forwards them to the next *ChannelOutboundHandler*\n\n### Bootstrapping\n*bootstrapping a server*: bind a process to a given port (**ServerBootstrap**)\n*bootstrapping a client*: connect one process to another one running on a host at a specific port (**Bootstrap**)\n\nA server needs two distinct set of *Channels*:\n1. The first set will contain a single *ServerChannel* representing the server's own listening socket, bound to a local port.\n2. The second set will contain all of the *Channels* that have been created to handle incoming client connections - one for each connection the server accepted.\n\nThis explains why two distinct *EventLoopGroups* are required\n\n![Server with EventLoopGroups](eventLoopGroup.png)\n\nThe first group will assign an *EventLoop* that is responsible for creating *Channels* for incoming connection requests. The second group will assign *EventLoop* to handle the *Channel*\n\n\n","source":"_posts/Netty-in-Action-Chapter-3.md","raw":"---\ntitle: Netty in Action - Chapter 3\ntop: false\ncover: false\ntoc: true\nmathjax: true\ndate: 2020-04-02 08:19:04\nsummary: Reading notes for Chapter 3 of &laquo;Netty in Action&raquo;\ncategories: Tech\ntags:\n    - Java\n    - Netty\npassword:\n---\n\n\n# Chapter 3 - Netty components and design\n<!--more-->\nChannel - Sockets\nEventLoop - Control flow, multithreading, concurrency\nChannelFuture - Asynchronous notification, a placeholder for the result of an operation that's to be executed in the future.\n\n### Interface EventLoop\n\n1.  An *EventLoopGroup* can contain multiple *EventLoops*\n2.  An *EventLoop* is bound to a single Thread for its lifetime\n3.  All I/O events processed by an *EventLoop* are handled on its dedicated Thread\n4.  A channel is registered for its lifetime with a single *EventLoop*\n5.  A single *EventLoop* may be assigned to one or more *Channels*\n\n![Channel and EventLoop](channel_eventLoop.png)\n\n### Interface ChannelHandler\n\nPrimary component of Netty which serves as the container for all application logic that applies to inbound and outbound data. \n\n### Interface ChannelPipeline\n\n*ChannelHandlers* are installed in *ChannelPipeline* as follows: \n1.  The *ChannelInitializer* implementation is registered with a *ServerBootstrap*\n2.  When *ChannelInitializer*.*initChannel*() is called, it will install a custom set of *ChannelHandlers* in the pipeline\n3.  The *ChannelInitializer* removes itself from the *ChannelPipeline*\n\n![ChannelPipeline](channelPipeline.png)\n\nThere are two ways of sending messages in Netty: \n1. Write directly to the *Channel*, which will cause the message to start from the tail of the pipeline\n2. Write to a *ChannelHandlerContext*, which will cause the message to start from the next handler in the pipeline\n\n### Encoder and decoder\n\nWhen inbound message comes in, it will be decoded\nWhen outbound message goes out, it will be encoded\n\nThe encoder/decoder adapter classes provided by Netty implement either *ChannelInboundHandler* or *ChannelOutboundHandler*\nFor each inbound message, it will call decode() and forward the decoded bytes to the next *ChannelInboundHandler* in the pipeline; An encoder converts the message to bytes and forwards them to the next *ChannelOutboundHandler*\n\n### Bootstrapping\n*bootstrapping a server*: bind a process to a given port (**ServerBootstrap**)\n*bootstrapping a client*: connect one process to another one running on a host at a specific port (**Bootstrap**)\n\nA server needs two distinct set of *Channels*:\n1. The first set will contain a single *ServerChannel* representing the server's own listening socket, bound to a local port.\n2. The second set will contain all of the *Channels* that have been created to handle incoming client connections - one for each connection the server accepted.\n\nThis explains why two distinct *EventLoopGroups* are required\n\n![Server with EventLoopGroups](eventLoopGroup.png)\n\nThe first group will assign an *EventLoop* that is responsible for creating *Channels* for incoming connection requests. The second group will assign *EventLoop* to handle the *Channel*\n\n\n","slug":"Netty-in-Action-Chapter-3","published":1,"updated":"2020-05-05T15:11:43.780Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ckcxuqeo7000wfkjxozygayxi","content":"<h1 id=\"Chapter-3-Netty-components-and-design\"><a href=\"#Chapter-3-Netty-components-and-design\" class=\"headerlink\" title=\"Chapter 3 - Netty components and design\"></a>Chapter 3 - Netty components and design</h1><a id=\"more\"></a>\n<p>Channel - Sockets<br>EventLoop - Control flow, multithreading, concurrency<br>ChannelFuture - Asynchronous notification, a placeholder for the result of an operation that&#39;s to be executed in the future.</p>\n<h3 id=\"Interface-EventLoop\"><a href=\"#Interface-EventLoop\" class=\"headerlink\" title=\"Interface EventLoop\"></a>Interface EventLoop</h3><ol>\n<li>An <em>EventLoopGroup</em> can contain multiple <em>EventLoops</em></li>\n<li>An <em>EventLoop</em> is bound to a single Thread for its lifetime</li>\n<li>All I/O events processed by an <em>EventLoop</em> are handled on its dedicated Thread</li>\n<li>A channel is registered for its lifetime with a single <em>EventLoop</em></li>\n<li>A single <em>EventLoop</em> may be assigned to one or more <em>Channels</em></li>\n</ol>\n<p><img src=\"channel_eventLoop.png\" alt=\"Channel and EventLoop\"></p>\n<h3 id=\"Interface-ChannelHandler\"><a href=\"#Interface-ChannelHandler\" class=\"headerlink\" title=\"Interface ChannelHandler\"></a>Interface ChannelHandler</h3><p>Primary component of Netty which serves as the container for all application logic that applies to inbound and outbound data. </p>\n<h3 id=\"Interface-ChannelPipeline\"><a href=\"#Interface-ChannelPipeline\" class=\"headerlink\" title=\"Interface ChannelPipeline\"></a>Interface ChannelPipeline</h3><p><em>ChannelHandlers</em> are installed in <em>ChannelPipeline</em> as follows: </p>\n<ol>\n<li>The <em>ChannelInitializer</em> implementation is registered with a <em>ServerBootstrap</em></li>\n<li>When <em>ChannelInitializer</em>.<em>initChannel</em>() is called, it will install a custom set of <em>ChannelHandlers</em> in the pipeline</li>\n<li>The <em>ChannelInitializer</em> removes itself from the <em>ChannelPipeline</em></li>\n</ol>\n<p><img src=\"channelPipeline.png\" alt=\"ChannelPipeline\"></p>\n<p>There are two ways of sending messages in Netty: </p>\n<ol>\n<li>Write directly to the <em>Channel</em>, which will cause the message to start from the tail of the pipeline</li>\n<li>Write to a <em>ChannelHandlerContext</em>, which will cause the message to start from the next handler in the pipeline</li>\n</ol>\n<h3 id=\"Encoder-and-decoder\"><a href=\"#Encoder-and-decoder\" class=\"headerlink\" title=\"Encoder and decoder\"></a>Encoder and decoder</h3><p>When inbound message comes in, it will be decoded<br>When outbound message goes out, it will be encoded</p>\n<p>The encoder/decoder adapter classes provided by Netty implement either <em>ChannelInboundHandler</em> or <em>ChannelOutboundHandler</em><br>For each inbound message, it will call decode() and forward the decoded bytes to the next <em>ChannelInboundHandler</em> in the pipeline; An encoder converts the message to bytes and forwards them to the next <em>ChannelOutboundHandler</em></p>\n<h3 id=\"Bootstrapping\"><a href=\"#Bootstrapping\" class=\"headerlink\" title=\"Bootstrapping\"></a>Bootstrapping</h3><p><em>bootstrapping a server</em>: bind a process to a given port (<strong>ServerBootstrap</strong>)<br><em>bootstrapping a client</em>: connect one process to another one running on a host at a specific port (<strong>Bootstrap</strong>)</p>\n<p>A server needs two distinct set of <em>Channels</em>:</p>\n<ol>\n<li>The first set will contain a single <em>ServerChannel</em> representing the server&#39;s own listening socket, bound to a local port.</li>\n<li>The second set will contain all of the <em>Channels</em> that have been created to handle incoming client connections - one for each connection the server accepted.</li>\n</ol>\n<p>This explains why two distinct <em>EventLoopGroups</em> are required</p>\n<p><img src=\"eventLoopGroup.png\" alt=\"Server with EventLoopGroups\"></p>\n<p>The first group will assign an <em>EventLoop</em> that is responsible for creating <em>Channels</em> for incoming connection requests. The second group will assign <em>EventLoop</em> to handle the <em>Channel</em></p>\n","site":{"data":{"next":{"override":false,"favicon":{"small":"/uploads/favicon-16x16.png","medium":"/uploads/favicon-32x32.png","apple_touch_icon":"/uploads/apple-touch-icon.png","safari_pinned_tab":"/uploads/favicon.png","ms_browserconfig":"/uploads/browserconfig.xml"},"keywords":"Hexo, NexT","rss":null,"footer":{"icon":"user","copyright":null,"powered":true,"theme":{"enable":true,"version":true}},"canonical":true,"seo":false,"index_with_subtitle":false,"menu":{"home":"/ || home","archives":"/archives/ || archive"},"menu_icons":{"enable":true},"scheme":"Pisces","social_icons":{"enable":true,"icons_only":false,"transition":false},"links_icon":"link","links_title":"Links","links_layout":"block","toc":{"enable":true,"number":true,"wrap":false},"sidebar":{"position":"left","display":"post","offset":12,"b2t":false,"scrollpercent":false,"onmobile":false},"scroll_to_more":true,"save_scroll":false,"excerpt_description":true,"auto_excerpt":{"enable":false,"length":30},"read_more_btn":true,"post_meta":{"item_text":true,"created_at":true,"updated_at":false,"categories":true},"post_wordcount":{"item_text":true,"wordcount":false,"min2read":false,"totalcount":false,"separated_meta":true},"post_copyright":{"enable":false,"license":"CC BY-NC-SA 3.0","license_url":"https://creativecommons.org/licenses/by-nc-sa/3.0/"},"mobile_layout_economy":false,"android_chrome_color":"#222","custom_logo":{"enabled":false,"image":null},"marked":{"smartypants":false},"highlight_theme":"normal","font":{"enable":false,"host":null,"global":{"external":true,"family":"Lato","size":null},"headings":{"external":true,"family":null,"size":null},"posts":{"external":true,"family":null},"logo":{"external":true,"family":null,"size":null},"codes":{"external":true,"family":null,"size":null}},"mathjax":{"enable":false,"per_page":false,"cdn":"//cdn.bootcss.com/mathjax/2.7.1/latest.js?config=TeX-AMS-MML_HTMLorMML"},"han":false,"disqus":{"enable":false,"shortname":null,"count":true},"changyan":{"enable":false,"appid":null,"appkey":null},"valine":{"enable":false,"appid":null,"appkey":null,"notify":false,"verify":false,"placeholder":"Just go go","avatar":"mm","guest_info":"nick,mail,link","pageSize":10},"gitment":{"enable":false,"mint":true,"count":true,"lazy":false,"cleanly":false,"language":null,"github_user":null,"github_repo":null,"client_id":null,"client_secret":null,"proxy_gateway":null,"redirect_protocol":null},"needmoreshare2":{"enable":false,"postbottom":{"enable":false,"options":{"iconStyle":"box","boxForm":"horizontal","position":"bottomCenter","networks":"Weibo,Wechat,Douban,QQZone,Twitter,Facebook"}},"float":{"enable":false,"options":{"iconStyle":"box","boxForm":"horizontal","position":"middleRight","networks":"Weibo,Wechat,Douban,QQZone,Twitter,Facebook"}}},"duoshuo_info":{"ua_enable":true,"admin_enable":false,"user_id":0},"facebook_sdk":{"enable":false,"app_id":null,"fb_admin":null,"like_button":null,"webmaster":null},"facebook_comments_plugin":{"enable":false,"num_of_posts":10,"width":"100%","scheme":"light"},"vkontakte_api":{"enable":false,"app_id":null,"like":true,"comments":true,"num_of_posts":10},"rating":{"enable":false,"id":null,"color":"fc6423"},"leancloud_visitors":{"enable":false,"app_id":null,"app_key":null},"firestore":{"enable":false,"collection":"articles","apiKey":null,"projectId":null,"bluebird":false},"busuanzi_count":{"enable":false,"site_uv":true,"site_uv_header":"<i class=\"fa fa-user\"></i>","site_uv_footer":null,"site_pv":true,"site_pv_header":"<i class=\"fa fa-eye\"></i>","site_pv_footer":null,"page_pv":true,"page_pv_header":"<i class=\"fa fa-file-o\"></i>","page_pv_footer":null},"baidu_push":false,"calendar":{"enable":false,"calendar_id":"<required>","api_key":"<required>","orderBy":"startTime","offsetMax":24,"offsetMin":4,"timeZone":null,"showDeleted":false,"singleEvents":true,"maxResults":250},"algolia_search":{"enable":false,"hits":{"per_page":10},"labels":{"input_placeholder":"Search for Posts","hits_empty":"We didn't find any results for the search: ${query}","hits_stats":"${hits} results found in ${time} ms"}},"local_search":{"enable":false,"trigger":"auto","top_n_per_article":1},"exturl":false,"note":{"style":"simple","icons":false,"border_radius":3,"light_bg_offset":0},"label":true,"tabs":{"enable":true,"transition":{"tabs":false,"labels":true},"border_radius":0},"motion":{"enable":true,"async":false,"transition":{"post_block":"fadeIn","post_header":"slideDownIn","post_body":"slideDownIn","coll_header":"slideLeftIn","sidebar":"slideUpIn"}},"fancybox":true,"pace":false,"pace_theme":"pace-theme-minimal","canvas_nest":false,"three_waves":false,"canvas_lines":false,"canvas_sphere":false,"canvas_ribbon":{"enable":false,"size":300,"alpha":0.6,"zIndex":-1},"vendors":{"_internal":"lib","jquery":null,"fancybox":null,"fancybox_css":null,"fastclick":null,"lazyload":null,"velocity":null,"velocity_ui":null,"ua_parser":null,"fontawesome":null,"algolia_instant_js":null,"algolia_instant_css":null,"pace":null,"pace_css":null,"canvas_nest":null,"three":null,"three_waves":null,"canvas_lines":null,"canvas_sphere":null,"canvas_ribbon":null,"han":null,"needMoreShare2":null},"css":"css","js":"js","images":"images","version":"5.1.4"}}},"excerpt":"<h1 id=\"Chapter-3-Netty-components-and-design\"><a href=\"#Chapter-3-Netty-components-and-design\" class=\"headerlink\" title=\"Chapter 3 - Netty components and design\"></a>Chapter 3 - Netty components and design</h1>","more":"<p>Channel - Sockets<br>EventLoop - Control flow, multithreading, concurrency<br>ChannelFuture - Asynchronous notification, a placeholder for the result of an operation that&#39;s to be executed in the future.</p>\n<h3 id=\"Interface-EventLoop\"><a href=\"#Interface-EventLoop\" class=\"headerlink\" title=\"Interface EventLoop\"></a>Interface EventLoop</h3><ol>\n<li>An <em>EventLoopGroup</em> can contain multiple <em>EventLoops</em></li>\n<li>An <em>EventLoop</em> is bound to a single Thread for its lifetime</li>\n<li>All I/O events processed by an <em>EventLoop</em> are handled on its dedicated Thread</li>\n<li>A channel is registered for its lifetime with a single <em>EventLoop</em></li>\n<li>A single <em>EventLoop</em> may be assigned to one or more <em>Channels</em></li>\n</ol>\n<p><img src=\"channel_eventLoop.png\" alt=\"Channel and EventLoop\"></p>\n<h3 id=\"Interface-ChannelHandler\"><a href=\"#Interface-ChannelHandler\" class=\"headerlink\" title=\"Interface ChannelHandler\"></a>Interface ChannelHandler</h3><p>Primary component of Netty which serves as the container for all application logic that applies to inbound and outbound data. </p>\n<h3 id=\"Interface-ChannelPipeline\"><a href=\"#Interface-ChannelPipeline\" class=\"headerlink\" title=\"Interface ChannelPipeline\"></a>Interface ChannelPipeline</h3><p><em>ChannelHandlers</em> are installed in <em>ChannelPipeline</em> as follows: </p>\n<ol>\n<li>The <em>ChannelInitializer</em> implementation is registered with a <em>ServerBootstrap</em></li>\n<li>When <em>ChannelInitializer</em>.<em>initChannel</em>() is called, it will install a custom set of <em>ChannelHandlers</em> in the pipeline</li>\n<li>The <em>ChannelInitializer</em> removes itself from the <em>ChannelPipeline</em></li>\n</ol>\n<p><img src=\"channelPipeline.png\" alt=\"ChannelPipeline\"></p>\n<p>There are two ways of sending messages in Netty: </p>\n<ol>\n<li>Write directly to the <em>Channel</em>, which will cause the message to start from the tail of the pipeline</li>\n<li>Write to a <em>ChannelHandlerContext</em>, which will cause the message to start from the next handler in the pipeline</li>\n</ol>\n<h3 id=\"Encoder-and-decoder\"><a href=\"#Encoder-and-decoder\" class=\"headerlink\" title=\"Encoder and decoder\"></a>Encoder and decoder</h3><p>When inbound message comes in, it will be decoded<br>When outbound message goes out, it will be encoded</p>\n<p>The encoder/decoder adapter classes provided by Netty implement either <em>ChannelInboundHandler</em> or <em>ChannelOutboundHandler</em><br>For each inbound message, it will call decode() and forward the decoded bytes to the next <em>ChannelInboundHandler</em> in the pipeline; An encoder converts the message to bytes and forwards them to the next <em>ChannelOutboundHandler</em></p>\n<h3 id=\"Bootstrapping\"><a href=\"#Bootstrapping\" class=\"headerlink\" title=\"Bootstrapping\"></a>Bootstrapping</h3><p><em>bootstrapping a server</em>: bind a process to a given port (<strong>ServerBootstrap</strong>)<br><em>bootstrapping a client</em>: connect one process to another one running on a host at a specific port (<strong>Bootstrap</strong>)</p>\n<p>A server needs two distinct set of <em>Channels</em>:</p>\n<ol>\n<li>The first set will contain a single <em>ServerChannel</em> representing the server&#39;s own listening socket, bound to a local port.</li>\n<li>The second set will contain all of the <em>Channels</em> that have been created to handle incoming client connections - one for each connection the server accepted.</li>\n</ol>\n<p>This explains why two distinct <em>EventLoopGroups</em> are required</p>\n<p><img src=\"eventLoopGroup.png\" alt=\"Server with EventLoopGroups\"></p>\n<p>The first group will assign an <em>EventLoop</em> that is responsible for creating <em>Channels</em> for incoming connection requests. The second group will assign <em>EventLoop</em> to handle the <em>Channel</em></p>"},{"title":"Netty in Action Chapter 4","top":false,"cover":false,"toc":true,"mathjax":true,"date":"2020-04-03T15:22:29.000Z","summary":"Reading notes for Chapter 4 of &laquo;Netty in Action&raquo;","password":null,"_content":"\n# Chapter 4 - Transports\n<!--more-->\nNetty OIO and NIO implementation has way less differences than Java's NIO and OIO, we only need to change the OIO eventLoopGroup to NIO eventLoopGroup, as well as oioSocketChannel to nioSocketChannel.\n\n## 4.2 Transport API\n\nA *Channel* has a *ChannelPipeline* and a *ChannelConfig* assigned to it.\n \n Typical uses for *ChannelHandlers* include: \n\n - Transforming data from one format to another \n - Providing notification of exceptions \n - Providing notification of a Channel becoming active or inactive \n - Providing notification when a Channel is registered with or deregistered from an EventLoop \n - Providing notification about user-defined events\n\nNetty's Channel implementation is thread-safe. \n\n## 4.3 Included Transports\n\n![Netty-provided transports](netty_provided_transports.png)\n\n### 4.3.1 NIO\nIt makes use of selector-based API, whose basic concept is to serve as a registry where you request to be notified when there is a state change of a *Channel*. \n**Selection operation bit-set**\n1. OP_ACCEPT: when a new connection is accepted, and a Channel is created\n2. OP_CONNECT: when a connection is established\n3. OP_READ: when data is ready to be read from the Channel\n4. OP_WRITE: when it's possible to write more data to the Channel\n\n![Selector Workflow](selector_workflow.png)\n\n**Zero-copy**\nA feature only available for NIO and Epoll.\nAllow you to quickly and efficiently move data from a file system to the network without copying from kernel space to user space, which significantly improves the performance.\n\n### 4.3.2 Epoll\nEpoll is now the standard for non-blocking networking on Linux.\nTo substitute epoll for NIO, replace *NioEventLoopGroup* with *EpollEventLoopGroup* and *NioServerSocketChannel* with *EpollServerSocketChannel*\n\n### 4.3.3 OIO\n![OIO Processing Logic](OIO_processing_logic.png)\nNetty makes use of *SO_TIMEOUT* Socket flag, which specifies the maximum number of milliseconds to wait for an I/O operation to complete. If operation fails to complete within the time interval, it will throw an exception and continue the processing loop.\n\n### 4.3.4 Local transport for communication within a JVM\nIn this transport, the *SocketAddress* associated with a server *Channel* isn't bound to a physical network address; rather, it's stored in a registry for as long as the server is running and is deregistered when the *Channel* is closed.\nThe client wishing to connect to the server running in the same JVM must implement the same transport.\n\n### 4.3.5 Embedded Transport\n\nNetty provides an additional transport to allow you to embed *ChannelHandlers* as helper classes inside other *ChannelHandlers*, so you can extend the functionality of a *ChannelHandlers* without modifying its internal code.\n*EmbeddedChannel* is the key of embedded transport, it will be easy to help unit tests.\n\n## 4.4 Transport use cases\n\n| Transport | TCP | UDP | SCTP | UDT |\n|-----------|-----|-----|------|-----|\n| NIO       | X   | X   | X    | X   |\n| Epoll     | X   | X   | -    | -   |\n| OIO       | X   | X   | X    | X   |\n\n\n| Application needs                                | Recommended transport |\n|--------------------------------------------------|-----------------------|\n| Non-blocking code base or general starting point | NIO                   |\n| Blocing code base                                | OIO                   |\n| Communication within the same JVM                | Local                 |\n| Testing ChannelHandler implementations           | Embedded              |","source":"_posts/Netty-in-Action-Chapter-4.md","raw":"---\ntitle: Netty in Action Chapter 4\ntop: false\ncover: false\ntoc: true\nmathjax: true\ndate: 2020-04-03 11:22:29\nsummary: Reading notes for Chapter 4 of &laquo;Netty in Action&raquo;\ncategories: Tech\ntags:\n    - Java\n    - Netty\npassword:\n---\n\n# Chapter 4 - Transports\n<!--more-->\nNetty OIO and NIO implementation has way less differences than Java's NIO and OIO, we only need to change the OIO eventLoopGroup to NIO eventLoopGroup, as well as oioSocketChannel to nioSocketChannel.\n\n## 4.2 Transport API\n\nA *Channel* has a *ChannelPipeline* and a *ChannelConfig* assigned to it.\n \n Typical uses for *ChannelHandlers* include: \n\n - Transforming data from one format to another \n - Providing notification of exceptions \n - Providing notification of a Channel becoming active or inactive \n - Providing notification when a Channel is registered with or deregistered from an EventLoop \n - Providing notification about user-defined events\n\nNetty's Channel implementation is thread-safe. \n\n## 4.3 Included Transports\n\n![Netty-provided transports](netty_provided_transports.png)\n\n### 4.3.1 NIO\nIt makes use of selector-based API, whose basic concept is to serve as a registry where you request to be notified when there is a state change of a *Channel*. \n**Selection operation bit-set**\n1. OP_ACCEPT: when a new connection is accepted, and a Channel is created\n2. OP_CONNECT: when a connection is established\n3. OP_READ: when data is ready to be read from the Channel\n4. OP_WRITE: when it's possible to write more data to the Channel\n\n![Selector Workflow](selector_workflow.png)\n\n**Zero-copy**\nA feature only available for NIO and Epoll.\nAllow you to quickly and efficiently move data from a file system to the network without copying from kernel space to user space, which significantly improves the performance.\n\n### 4.3.2 Epoll\nEpoll is now the standard for non-blocking networking on Linux.\nTo substitute epoll for NIO, replace *NioEventLoopGroup* with *EpollEventLoopGroup* and *NioServerSocketChannel* with *EpollServerSocketChannel*\n\n### 4.3.3 OIO\n![OIO Processing Logic](OIO_processing_logic.png)\nNetty makes use of *SO_TIMEOUT* Socket flag, which specifies the maximum number of milliseconds to wait for an I/O operation to complete. If operation fails to complete within the time interval, it will throw an exception and continue the processing loop.\n\n### 4.3.4 Local transport for communication within a JVM\nIn this transport, the *SocketAddress* associated with a server *Channel* isn't bound to a physical network address; rather, it's stored in a registry for as long as the server is running and is deregistered when the *Channel* is closed.\nThe client wishing to connect to the server running in the same JVM must implement the same transport.\n\n### 4.3.5 Embedded Transport\n\nNetty provides an additional transport to allow you to embed *ChannelHandlers* as helper classes inside other *ChannelHandlers*, so you can extend the functionality of a *ChannelHandlers* without modifying its internal code.\n*EmbeddedChannel* is the key of embedded transport, it will be easy to help unit tests.\n\n## 4.4 Transport use cases\n\n| Transport | TCP | UDP | SCTP | UDT |\n|-----------|-----|-----|------|-----|\n| NIO       | X   | X   | X    | X   |\n| Epoll     | X   | X   | -    | -   |\n| OIO       | X   | X   | X    | X   |\n\n\n| Application needs                                | Recommended transport |\n|--------------------------------------------------|-----------------------|\n| Non-blocking code base or general starting point | NIO                   |\n| Blocing code base                                | OIO                   |\n| Communication within the same JVM                | Local                 |\n| Testing ChannelHandler implementations           | Embedded              |","slug":"Netty-in-Action-Chapter-4","published":1,"updated":"2020-05-05T15:12:00.604Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ckcxuqeok000zfkjx6kzwh53m","content":"<h1 id=\"Chapter-4-Transports\"><a href=\"#Chapter-4-Transports\" class=\"headerlink\" title=\"Chapter 4 - Transports\"></a>Chapter 4 - Transports</h1><a id=\"more\"></a>\n<p>Netty OIO and NIO implementation has way less differences than Java&#39;s NIO and OIO, we only need to change the OIO eventLoopGroup to NIO eventLoopGroup, as well as oioSocketChannel to nioSocketChannel.</p>\n<h2 id=\"4-2-Transport-API\"><a href=\"#4-2-Transport-API\" class=\"headerlink\" title=\"4.2 Transport API\"></a>4.2 Transport API</h2><p>A <em>Channel</em> has a <em>ChannelPipeline</em> and a <em>ChannelConfig</em> assigned to it.</p>\n<p> Typical uses for <em>ChannelHandlers</em> include: </p>\n<ul>\n<li>Transforming data from one format to another </li>\n<li>Providing notification of exceptions </li>\n<li>Providing notification of a Channel becoming active or inactive </li>\n<li>Providing notification when a Channel is registered with or deregistered from an EventLoop </li>\n<li>Providing notification about user-defined events</li>\n</ul>\n<p>Netty&#39;s Channel implementation is thread-safe. </p>\n<h2 id=\"4-3-Included-Transports\"><a href=\"#4-3-Included-Transports\" class=\"headerlink\" title=\"4.3 Included Transports\"></a>4.3 Included Transports</h2><p><img src=\"netty_provided_transports.png\" alt=\"Netty-provided transports\"></p>\n<h3 id=\"4-3-1-NIO\"><a href=\"#4-3-1-NIO\" class=\"headerlink\" title=\"4.3.1 NIO\"></a>4.3.1 NIO</h3><p>It makes use of selector-based API, whose basic concept is to serve as a registry where you request to be notified when there is a state change of a <em>Channel</em>.<br><strong>Selection operation bit-set</strong></p>\n<ol>\n<li>OP_ACCEPT: when a new connection is accepted, and a Channel is created</li>\n<li>OP_CONNECT: when a connection is established</li>\n<li>OP_READ: when data is ready to be read from the Channel</li>\n<li>OP_WRITE: when it&#39;s possible to write more data to the Channel</li>\n</ol>\n<p><img src=\"selector_workflow.png\" alt=\"Selector Workflow\"></p>\n<p><strong>Zero-copy</strong><br>A feature only available for NIO and Epoll.<br>Allow you to quickly and efficiently move data from a file system to the network without copying from kernel space to user space, which significantly improves the performance.</p>\n<h3 id=\"4-3-2-Epoll\"><a href=\"#4-3-2-Epoll\" class=\"headerlink\" title=\"4.3.2 Epoll\"></a>4.3.2 Epoll</h3><p>Epoll is now the standard for non-blocking networking on Linux.<br>To substitute epoll for NIO, replace <em>NioEventLoopGroup</em> with <em>EpollEventLoopGroup</em> and <em>NioServerSocketChannel</em> with <em>EpollServerSocketChannel</em></p>\n<h3 id=\"4-3-3-OIO\"><a href=\"#4-3-3-OIO\" class=\"headerlink\" title=\"4.3.3 OIO\"></a>4.3.3 OIO</h3><p><img src=\"OIO_processing_logic.png\" alt=\"OIO Processing Logic\"><br>Netty makes use of <em>SO_TIMEOUT</em> Socket flag, which specifies the maximum number of milliseconds to wait for an I/O operation to complete. If operation fails to complete within the time interval, it will throw an exception and continue the processing loop.</p>\n<h3 id=\"4-3-4-Local-transport-for-communication-within-a-JVM\"><a href=\"#4-3-4-Local-transport-for-communication-within-a-JVM\" class=\"headerlink\" title=\"4.3.4 Local transport for communication within a JVM\"></a>4.3.4 Local transport for communication within a JVM</h3><p>In this transport, the <em>SocketAddress</em> associated with a server <em>Channel</em> isn&#39;t bound to a physical network address; rather, it&#39;s stored in a registry for as long as the server is running and is deregistered when the <em>Channel</em> is closed.<br>The client wishing to connect to the server running in the same JVM must implement the same transport.</p>\n<h3 id=\"4-3-5-Embedded-Transport\"><a href=\"#4-3-5-Embedded-Transport\" class=\"headerlink\" title=\"4.3.5 Embedded Transport\"></a>4.3.5 Embedded Transport</h3><p>Netty provides an additional transport to allow you to embed <em>ChannelHandlers</em> as helper classes inside other <em>ChannelHandlers</em>, so you can extend the functionality of a <em>ChannelHandlers</em> without modifying its internal code.<br><em>EmbeddedChannel</em> is the key of embedded transport, it will be easy to help unit tests.</p>\n<h2 id=\"4-4-Transport-use-cases\"><a href=\"#4-4-Transport-use-cases\" class=\"headerlink\" title=\"4.4 Transport use cases\"></a>4.4 Transport use cases</h2><table>\n<thead>\n<tr>\n<th>Transport</th>\n<th>TCP</th>\n<th>UDP</th>\n<th>SCTP</th>\n<th>UDT</th>\n</tr>\n</thead>\n<tbody><tr>\n<td>NIO</td>\n<td>X</td>\n<td>X</td>\n<td>X</td>\n<td>X</td>\n</tr>\n<tr>\n<td>Epoll</td>\n<td>X</td>\n<td>X</td>\n<td>-</td>\n<td>-</td>\n</tr>\n<tr>\n<td>OIO</td>\n<td>X</td>\n<td>X</td>\n<td>X</td>\n<td>X</td>\n</tr>\n</tbody></table>\n<table>\n<thead>\n<tr>\n<th>Application needs</th>\n<th>Recommended transport</th>\n</tr>\n</thead>\n<tbody><tr>\n<td>Non-blocking code base or general starting point</td>\n<td>NIO</td>\n</tr>\n<tr>\n<td>Blocing code base</td>\n<td>OIO</td>\n</tr>\n<tr>\n<td>Communication within the same JVM</td>\n<td>Local</td>\n</tr>\n<tr>\n<td>Testing ChannelHandler implementations</td>\n<td>Embedded</td>\n</tr>\n</tbody></table>\n","site":{"data":{"next":{"override":false,"favicon":{"small":"/uploads/favicon-16x16.png","medium":"/uploads/favicon-32x32.png","apple_touch_icon":"/uploads/apple-touch-icon.png","safari_pinned_tab":"/uploads/favicon.png","ms_browserconfig":"/uploads/browserconfig.xml"},"keywords":"Hexo, NexT","rss":null,"footer":{"icon":"user","copyright":null,"powered":true,"theme":{"enable":true,"version":true}},"canonical":true,"seo":false,"index_with_subtitle":false,"menu":{"home":"/ || home","archives":"/archives/ || archive"},"menu_icons":{"enable":true},"scheme":"Pisces","social_icons":{"enable":true,"icons_only":false,"transition":false},"links_icon":"link","links_title":"Links","links_layout":"block","toc":{"enable":true,"number":true,"wrap":false},"sidebar":{"position":"left","display":"post","offset":12,"b2t":false,"scrollpercent":false,"onmobile":false},"scroll_to_more":true,"save_scroll":false,"excerpt_description":true,"auto_excerpt":{"enable":false,"length":30},"read_more_btn":true,"post_meta":{"item_text":true,"created_at":true,"updated_at":false,"categories":true},"post_wordcount":{"item_text":true,"wordcount":false,"min2read":false,"totalcount":false,"separated_meta":true},"post_copyright":{"enable":false,"license":"CC BY-NC-SA 3.0","license_url":"https://creativecommons.org/licenses/by-nc-sa/3.0/"},"mobile_layout_economy":false,"android_chrome_color":"#222","custom_logo":{"enabled":false,"image":null},"marked":{"smartypants":false},"highlight_theme":"normal","font":{"enable":false,"host":null,"global":{"external":true,"family":"Lato","size":null},"headings":{"external":true,"family":null,"size":null},"posts":{"external":true,"family":null},"logo":{"external":true,"family":null,"size":null},"codes":{"external":true,"family":null,"size":null}},"mathjax":{"enable":false,"per_page":false,"cdn":"//cdn.bootcss.com/mathjax/2.7.1/latest.js?config=TeX-AMS-MML_HTMLorMML"},"han":false,"disqus":{"enable":false,"shortname":null,"count":true},"changyan":{"enable":false,"appid":null,"appkey":null},"valine":{"enable":false,"appid":null,"appkey":null,"notify":false,"verify":false,"placeholder":"Just go go","avatar":"mm","guest_info":"nick,mail,link","pageSize":10},"gitment":{"enable":false,"mint":true,"count":true,"lazy":false,"cleanly":false,"language":null,"github_user":null,"github_repo":null,"client_id":null,"client_secret":null,"proxy_gateway":null,"redirect_protocol":null},"needmoreshare2":{"enable":false,"postbottom":{"enable":false,"options":{"iconStyle":"box","boxForm":"horizontal","position":"bottomCenter","networks":"Weibo,Wechat,Douban,QQZone,Twitter,Facebook"}},"float":{"enable":false,"options":{"iconStyle":"box","boxForm":"horizontal","position":"middleRight","networks":"Weibo,Wechat,Douban,QQZone,Twitter,Facebook"}}},"duoshuo_info":{"ua_enable":true,"admin_enable":false,"user_id":0},"facebook_sdk":{"enable":false,"app_id":null,"fb_admin":null,"like_button":null,"webmaster":null},"facebook_comments_plugin":{"enable":false,"num_of_posts":10,"width":"100%","scheme":"light"},"vkontakte_api":{"enable":false,"app_id":null,"like":true,"comments":true,"num_of_posts":10},"rating":{"enable":false,"id":null,"color":"fc6423"},"leancloud_visitors":{"enable":false,"app_id":null,"app_key":null},"firestore":{"enable":false,"collection":"articles","apiKey":null,"projectId":null,"bluebird":false},"busuanzi_count":{"enable":false,"site_uv":true,"site_uv_header":"<i class=\"fa fa-user\"></i>","site_uv_footer":null,"site_pv":true,"site_pv_header":"<i class=\"fa fa-eye\"></i>","site_pv_footer":null,"page_pv":true,"page_pv_header":"<i class=\"fa fa-file-o\"></i>","page_pv_footer":null},"baidu_push":false,"calendar":{"enable":false,"calendar_id":"<required>","api_key":"<required>","orderBy":"startTime","offsetMax":24,"offsetMin":4,"timeZone":null,"showDeleted":false,"singleEvents":true,"maxResults":250},"algolia_search":{"enable":false,"hits":{"per_page":10},"labels":{"input_placeholder":"Search for Posts","hits_empty":"We didn't find any results for the search: ${query}","hits_stats":"${hits} results found in ${time} ms"}},"local_search":{"enable":false,"trigger":"auto","top_n_per_article":1},"exturl":false,"note":{"style":"simple","icons":false,"border_radius":3,"light_bg_offset":0},"label":true,"tabs":{"enable":true,"transition":{"tabs":false,"labels":true},"border_radius":0},"motion":{"enable":true,"async":false,"transition":{"post_block":"fadeIn","post_header":"slideDownIn","post_body":"slideDownIn","coll_header":"slideLeftIn","sidebar":"slideUpIn"}},"fancybox":true,"pace":false,"pace_theme":"pace-theme-minimal","canvas_nest":false,"three_waves":false,"canvas_lines":false,"canvas_sphere":false,"canvas_ribbon":{"enable":false,"size":300,"alpha":0.6,"zIndex":-1},"vendors":{"_internal":"lib","jquery":null,"fancybox":null,"fancybox_css":null,"fastclick":null,"lazyload":null,"velocity":null,"velocity_ui":null,"ua_parser":null,"fontawesome":null,"algolia_instant_js":null,"algolia_instant_css":null,"pace":null,"pace_css":null,"canvas_nest":null,"three":null,"three_waves":null,"canvas_lines":null,"canvas_sphere":null,"canvas_ribbon":null,"han":null,"needMoreShare2":null},"css":"css","js":"js","images":"images","version":"5.1.4"}}},"excerpt":"<h1 id=\"Chapter-4-Transports\"><a href=\"#Chapter-4-Transports\" class=\"headerlink\" title=\"Chapter 4 - Transports\"></a>Chapter 4 - Transports</h1>","more":"<p>Netty OIO and NIO implementation has way less differences than Java&#39;s NIO and OIO, we only need to change the OIO eventLoopGroup to NIO eventLoopGroup, as well as oioSocketChannel to nioSocketChannel.</p>\n<h2 id=\"4-2-Transport-API\"><a href=\"#4-2-Transport-API\" class=\"headerlink\" title=\"4.2 Transport API\"></a>4.2 Transport API</h2><p>A <em>Channel</em> has a <em>ChannelPipeline</em> and a <em>ChannelConfig</em> assigned to it.</p>\n<p> Typical uses for <em>ChannelHandlers</em> include: </p>\n<ul>\n<li>Transforming data from one format to another </li>\n<li>Providing notification of exceptions </li>\n<li>Providing notification of a Channel becoming active or inactive </li>\n<li>Providing notification when a Channel is registered with or deregistered from an EventLoop </li>\n<li>Providing notification about user-defined events</li>\n</ul>\n<p>Netty&#39;s Channel implementation is thread-safe. </p>\n<h2 id=\"4-3-Included-Transports\"><a href=\"#4-3-Included-Transports\" class=\"headerlink\" title=\"4.3 Included Transports\"></a>4.3 Included Transports</h2><p><img src=\"netty_provided_transports.png\" alt=\"Netty-provided transports\"></p>\n<h3 id=\"4-3-1-NIO\"><a href=\"#4-3-1-NIO\" class=\"headerlink\" title=\"4.3.1 NIO\"></a>4.3.1 NIO</h3><p>It makes use of selector-based API, whose basic concept is to serve as a registry where you request to be notified when there is a state change of a <em>Channel</em>.<br><strong>Selection operation bit-set</strong></p>\n<ol>\n<li>OP_ACCEPT: when a new connection is accepted, and a Channel is created</li>\n<li>OP_CONNECT: when a connection is established</li>\n<li>OP_READ: when data is ready to be read from the Channel</li>\n<li>OP_WRITE: when it&#39;s possible to write more data to the Channel</li>\n</ol>\n<p><img src=\"selector_workflow.png\" alt=\"Selector Workflow\"></p>\n<p><strong>Zero-copy</strong><br>A feature only available for NIO and Epoll.<br>Allow you to quickly and efficiently move data from a file system to the network without copying from kernel space to user space, which significantly improves the performance.</p>\n<h3 id=\"4-3-2-Epoll\"><a href=\"#4-3-2-Epoll\" class=\"headerlink\" title=\"4.3.2 Epoll\"></a>4.3.2 Epoll</h3><p>Epoll is now the standard for non-blocking networking on Linux.<br>To substitute epoll for NIO, replace <em>NioEventLoopGroup</em> with <em>EpollEventLoopGroup</em> and <em>NioServerSocketChannel</em> with <em>EpollServerSocketChannel</em></p>\n<h3 id=\"4-3-3-OIO\"><a href=\"#4-3-3-OIO\" class=\"headerlink\" title=\"4.3.3 OIO\"></a>4.3.3 OIO</h3><p><img src=\"OIO_processing_logic.png\" alt=\"OIO Processing Logic\"><br>Netty makes use of <em>SO_TIMEOUT</em> Socket flag, which specifies the maximum number of milliseconds to wait for an I/O operation to complete. If operation fails to complete within the time interval, it will throw an exception and continue the processing loop.</p>\n<h3 id=\"4-3-4-Local-transport-for-communication-within-a-JVM\"><a href=\"#4-3-4-Local-transport-for-communication-within-a-JVM\" class=\"headerlink\" title=\"4.3.4 Local transport for communication within a JVM\"></a>4.3.4 Local transport for communication within a JVM</h3><p>In this transport, the <em>SocketAddress</em> associated with a server <em>Channel</em> isn&#39;t bound to a physical network address; rather, it&#39;s stored in a registry for as long as the server is running and is deregistered when the <em>Channel</em> is closed.<br>The client wishing to connect to the server running in the same JVM must implement the same transport.</p>\n<h3 id=\"4-3-5-Embedded-Transport\"><a href=\"#4-3-5-Embedded-Transport\" class=\"headerlink\" title=\"4.3.5 Embedded Transport\"></a>4.3.5 Embedded Transport</h3><p>Netty provides an additional transport to allow you to embed <em>ChannelHandlers</em> as helper classes inside other <em>ChannelHandlers</em>, so you can extend the functionality of a <em>ChannelHandlers</em> without modifying its internal code.<br><em>EmbeddedChannel</em> is the key of embedded transport, it will be easy to help unit tests.</p>\n<h2 id=\"4-4-Transport-use-cases\"><a href=\"#4-4-Transport-use-cases\" class=\"headerlink\" title=\"4.4 Transport use cases\"></a>4.4 Transport use cases</h2><table>\n<thead>\n<tr>\n<th>Transport</th>\n<th>TCP</th>\n<th>UDP</th>\n<th>SCTP</th>\n<th>UDT</th>\n</tr>\n</thead>\n<tbody><tr>\n<td>NIO</td>\n<td>X</td>\n<td>X</td>\n<td>X</td>\n<td>X</td>\n</tr>\n<tr>\n<td>Epoll</td>\n<td>X</td>\n<td>X</td>\n<td>-</td>\n<td>-</td>\n</tr>\n<tr>\n<td>OIO</td>\n<td>X</td>\n<td>X</td>\n<td>X</td>\n<td>X</td>\n</tr>\n</tbody></table>\n<table>\n<thead>\n<tr>\n<th>Application needs</th>\n<th>Recommended transport</th>\n</tr>\n</thead>\n<tbody><tr>\n<td>Non-blocking code base or general starting point</td>\n<td>NIO</td>\n</tr>\n<tr>\n<td>Blocing code base</td>\n<td>OIO</td>\n</tr>\n<tr>\n<td>Communication within the same JVM</td>\n<td>Local</td>\n</tr>\n<tr>\n<td>Testing ChannelHandler implementations</td>\n<td>Embedded</td>\n</tr>\n</tbody></table>"},{"title":"Netty in Action Chapter 6","top":false,"cover":false,"toc":true,"mathjax":true,"date":"2020-04-07T15:43:45.000Z","summary":"Reading notes for Chapter 6 of &laquo;Netty in Action&raquo;","password":null,"_content":"\n# Chapter 6 - ChannelHandler and ChannelPipeline\n<!--more-->\n## 6.1 ChannelHandler family\n\n**Channel State Model**\n![Channel State Model](channel_state_model.png)\n\n\n- When we override *channelRead()* in *ChannelInboundHandler*, we need to release the memory associated with *ByteBuf* ourselves using *ReferenceCountUtil.release()*.\n  *SimpleChannelInboundHandler* will release resources automatically.\n\n- *ChannelInboundHandler* is able to defer an operation/event on demand. If writing to a remote peer is suspended, you can defer flush operations and resume them later.\n\n- A *ChannelHandler* could be sharable across multiple *ChannelPipelines*.\n\n- ![Channel Handler Adaptor class hierarchy](ChannelHandlerAdaptor.png)\n\n- *ResourceLeakDetector* is provided by Netty to sample about 1% of the buffer allocations to make sure there is no memory leaks\n\n- It's important not only to release resources but also to notify the *ChannelPromise* so the listener could be notified that a message has been handled.\n\n## 6.2 Interface ChannelPipeline\n\n![ChannelPipeline and ChannelHandlers](channelPipeline_channelHandlers.png)\n\n- It's important not to block the EventLoop thread as it would have a negative impact on the overal handling of I/O.\n- If we want to handle legacy code that uses blocking APIs, *ChannelPipeline* has add() method that accepts an *EventExecutorGroup*. If an event is passed there, it will be handled by one of the *EventExecutors* in that group and be removed from the *EventLoop* of the *Channel* itself. There is an implementation called *DefaultEventExecutorGroup*.\n\n## 6.3 Interface ChannelHandlerContext\n\n- The *ChannelHandlerContext* associated with a *ChannelHandler* never changes, so it's ok to cache it. It's created when adding *ChannelHandler* to pipeline.\n- Some other classes have same methods whose names are identical to methods in *ChannelHandlerContext*. However, the latter will provide **better** performance.\n- If write() is invoked on either *Channel* or *ChannelPipeline* level, the event will be propagated all the way through the pipeline, otherwise if it's invoked on the *ChannelHandlerContext*, the movement will be from one handler to the next.\n- To invoke processing starting from a specific handler, you must refer to the *ChannelHandlerContext* that's associated with the handler **before** that one.\n![Event flow for operations triggered via ChannelHandlerContext](operationsTriggeredViaContext.png)\n- When you share a handler to multiple pipelines, you need to make sure the handler must be thread-safe\n\n## 6.4 Exception Handling\n\n- The default implementation for exception handling won't do anything except forwarding the exception to the next handler in the pipeline.\n- If it reaches the end of the pipeline, it's logged as unhandled.\n- Every outbound operation returns a *ChannelFuture*, which is registered by listeners to be notified of success or error when the operation completes.\n- As a subclass of *ChannelFuture*, *ChannelPromise* also has writable methods that provide for immediate notification: setSuccess() and setFailure()\n\nThere are two ways of adding a listener. \n1. The most common way is to invoke addListener on the *ChannelFuture* that is returned by an outbound operation.\n![Adding a ChannelFutureListener to a ChannelFuture](channelFutureListenerToChannelFuture.png)\n2. The second way is to add a *ChannelFutureListener* to the *ChannelPromise* that is passed as an argument to the methods.\n![Adding a ChannelFutureListener to a ChannelPromise](channelFutureListenerToChannelPromise.png)\n\n- If *ChannelOutboundHandler* itself throws an exception, Netty will notify all the listeners that registered with the ChannelPromise.\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n","source":"_posts/Netty-in-Action-Chapter-6.md","raw":"---\ntitle: Netty in Action Chapter 6\ntop: false\ncover: false\ntoc: true\nmathjax: true\ndate: 2020-04-07 11:43:45\nsummary: Reading notes for Chapter 6 of &laquo;Netty in Action&raquo;\ncategories: Tech\ntags:\n    - Java\n    - Netty\npassword:\n---\n\n# Chapter 6 - ChannelHandler and ChannelPipeline\n<!--more-->\n## 6.1 ChannelHandler family\n\n**Channel State Model**\n![Channel State Model](channel_state_model.png)\n\n\n- When we override *channelRead()* in *ChannelInboundHandler*, we need to release the memory associated with *ByteBuf* ourselves using *ReferenceCountUtil.release()*.\n  *SimpleChannelInboundHandler* will release resources automatically.\n\n- *ChannelInboundHandler* is able to defer an operation/event on demand. If writing to a remote peer is suspended, you can defer flush operations and resume them later.\n\n- A *ChannelHandler* could be sharable across multiple *ChannelPipelines*.\n\n- ![Channel Handler Adaptor class hierarchy](ChannelHandlerAdaptor.png)\n\n- *ResourceLeakDetector* is provided by Netty to sample about 1% of the buffer allocations to make sure there is no memory leaks\n\n- It's important not only to release resources but also to notify the *ChannelPromise* so the listener could be notified that a message has been handled.\n\n## 6.2 Interface ChannelPipeline\n\n![ChannelPipeline and ChannelHandlers](channelPipeline_channelHandlers.png)\n\n- It's important not to block the EventLoop thread as it would have a negative impact on the overal handling of I/O.\n- If we want to handle legacy code that uses blocking APIs, *ChannelPipeline* has add() method that accepts an *EventExecutorGroup*. If an event is passed there, it will be handled by one of the *EventExecutors* in that group and be removed from the *EventLoop* of the *Channel* itself. There is an implementation called *DefaultEventExecutorGroup*.\n\n## 6.3 Interface ChannelHandlerContext\n\n- The *ChannelHandlerContext* associated with a *ChannelHandler* never changes, so it's ok to cache it. It's created when adding *ChannelHandler* to pipeline.\n- Some other classes have same methods whose names are identical to methods in *ChannelHandlerContext*. However, the latter will provide **better** performance.\n- If write() is invoked on either *Channel* or *ChannelPipeline* level, the event will be propagated all the way through the pipeline, otherwise if it's invoked on the *ChannelHandlerContext*, the movement will be from one handler to the next.\n- To invoke processing starting from a specific handler, you must refer to the *ChannelHandlerContext* that's associated with the handler **before** that one.\n![Event flow for operations triggered via ChannelHandlerContext](operationsTriggeredViaContext.png)\n- When you share a handler to multiple pipelines, you need to make sure the handler must be thread-safe\n\n## 6.4 Exception Handling\n\n- The default implementation for exception handling won't do anything except forwarding the exception to the next handler in the pipeline.\n- If it reaches the end of the pipeline, it's logged as unhandled.\n- Every outbound operation returns a *ChannelFuture*, which is registered by listeners to be notified of success or error when the operation completes.\n- As a subclass of *ChannelFuture*, *ChannelPromise* also has writable methods that provide for immediate notification: setSuccess() and setFailure()\n\nThere are two ways of adding a listener. \n1. The most common way is to invoke addListener on the *ChannelFuture* that is returned by an outbound operation.\n![Adding a ChannelFutureListener to a ChannelFuture](channelFutureListenerToChannelFuture.png)\n2. The second way is to add a *ChannelFutureListener* to the *ChannelPromise* that is passed as an argument to the methods.\n![Adding a ChannelFutureListener to a ChannelPromise](channelFutureListenerToChannelPromise.png)\n\n- If *ChannelOutboundHandler* itself throws an exception, Netty will notify all the listeners that registered with the ChannelPromise.\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n","slug":"Netty-in-Action-Chapter-6","published":1,"updated":"2020-05-05T15:12:19.332Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ckcxuqep20012fkjx89pmw9v5","content":"<h1 id=\"Chapter-6-ChannelHandler-and-ChannelPipeline\"><a href=\"#Chapter-6-ChannelHandler-and-ChannelPipeline\" class=\"headerlink\" title=\"Chapter 6 - ChannelHandler and ChannelPipeline\"></a>Chapter 6 - ChannelHandler and ChannelPipeline</h1><a id=\"more\"></a>\n<h2 id=\"6-1-ChannelHandler-family\"><a href=\"#6-1-ChannelHandler-family\" class=\"headerlink\" title=\"6.1 ChannelHandler family\"></a>6.1 ChannelHandler family</h2><p><strong>Channel State Model</strong><br><img src=\"channel_state_model.png\" alt=\"Channel State Model\"></p>\n<ul>\n<li><p>When we override <em>channelRead()</em> in <em>ChannelInboundHandler</em>, we need to release the memory associated with <em>ByteBuf</em> ourselves using <em>ReferenceCountUtil.release()</em>.<br><em>SimpleChannelInboundHandler</em> will release resources automatically.</p>\n</li>\n<li><p><em>ChannelInboundHandler</em> is able to defer an operation/event on demand. If writing to a remote peer is suspended, you can defer flush operations and resume them later.</p>\n</li>\n<li><p>A <em>ChannelHandler</em> could be sharable across multiple <em>ChannelPipelines</em>.</p>\n</li>\n<li><p><img src=\"ChannelHandlerAdaptor.png\" alt=\"Channel Handler Adaptor class hierarchy\"></p>\n</li>\n<li><p><em>ResourceLeakDetector</em> is provided by Netty to sample about 1% of the buffer allocations to make sure there is no memory leaks</p>\n</li>\n<li><p>It&#39;s important not only to release resources but also to notify the <em>ChannelPromise</em> so the listener could be notified that a message has been handled.</p>\n</li>\n</ul>\n<h2 id=\"6-2-Interface-ChannelPipeline\"><a href=\"#6-2-Interface-ChannelPipeline\" class=\"headerlink\" title=\"6.2 Interface ChannelPipeline\"></a>6.2 Interface ChannelPipeline</h2><p><img src=\"channelPipeline_channelHandlers.png\" alt=\"ChannelPipeline and ChannelHandlers\"></p>\n<ul>\n<li>It&#39;s important not to block the EventLoop thread as it would have a negative impact on the overal handling of I/O.</li>\n<li>If we want to handle legacy code that uses blocking APIs, <em>ChannelPipeline</em> has add() method that accepts an <em>EventExecutorGroup</em>. If an event is passed there, it will be handled by one of the <em>EventExecutors</em> in that group and be removed from the <em>EventLoop</em> of the <em>Channel</em> itself. There is an implementation called <em>DefaultEventExecutorGroup</em>.</li>\n</ul>\n<h2 id=\"6-3-Interface-ChannelHandlerContext\"><a href=\"#6-3-Interface-ChannelHandlerContext\" class=\"headerlink\" title=\"6.3 Interface ChannelHandlerContext\"></a>6.3 Interface ChannelHandlerContext</h2><ul>\n<li>The <em>ChannelHandlerContext</em> associated with a <em>ChannelHandler</em> never changes, so it&#39;s ok to cache it. It&#39;s created when adding <em>ChannelHandler</em> to pipeline.</li>\n<li>Some other classes have same methods whose names are identical to methods in <em>ChannelHandlerContext</em>. However, the latter will provide <strong>better</strong> performance.</li>\n<li>If write() is invoked on either <em>Channel</em> or <em>ChannelPipeline</em> level, the event will be propagated all the way through the pipeline, otherwise if it&#39;s invoked on the <em>ChannelHandlerContext</em>, the movement will be from one handler to the next.</li>\n<li>To invoke processing starting from a specific handler, you must refer to the <em>ChannelHandlerContext</em> that&#39;s associated with the handler <strong>before</strong> that one.<br><img src=\"operationsTriggeredViaContext.png\" alt=\"Event flow for operations triggered via ChannelHandlerContext\"></li>\n<li>When you share a handler to multiple pipelines, you need to make sure the handler must be thread-safe</li>\n</ul>\n<h2 id=\"6-4-Exception-Handling\"><a href=\"#6-4-Exception-Handling\" class=\"headerlink\" title=\"6.4 Exception Handling\"></a>6.4 Exception Handling</h2><ul>\n<li>The default implementation for exception handling won&#39;t do anything except forwarding the exception to the next handler in the pipeline.</li>\n<li>If it reaches the end of the pipeline, it&#39;s logged as unhandled.</li>\n<li>Every outbound operation returns a <em>ChannelFuture</em>, which is registered by listeners to be notified of success or error when the operation completes.</li>\n<li>As a subclass of <em>ChannelFuture</em>, <em>ChannelPromise</em> also has writable methods that provide for immediate notification: setSuccess() and setFailure()</li>\n</ul>\n<p>There are two ways of adding a listener. </p>\n<ol>\n<li>The most common way is to invoke addListener on the <em>ChannelFuture</em> that is returned by an outbound operation.<br><img src=\"channelFutureListenerToChannelFuture.png\" alt=\"Adding a ChannelFutureListener to a ChannelFuture\"></li>\n<li>The second way is to add a <em>ChannelFutureListener</em> to the <em>ChannelPromise</em> that is passed as an argument to the methods.<br><img src=\"channelFutureListenerToChannelPromise.png\" alt=\"Adding a ChannelFutureListener to a ChannelPromise\"></li>\n</ol>\n<ul>\n<li>If <em>ChannelOutboundHandler</em> itself throws an exception, Netty will notify all the listeners that registered with the ChannelPromise.</li>\n</ul>\n","site":{"data":{"next":{"override":false,"favicon":{"small":"/uploads/favicon-16x16.png","medium":"/uploads/favicon-32x32.png","apple_touch_icon":"/uploads/apple-touch-icon.png","safari_pinned_tab":"/uploads/favicon.png","ms_browserconfig":"/uploads/browserconfig.xml"},"keywords":"Hexo, NexT","rss":null,"footer":{"icon":"user","copyright":null,"powered":true,"theme":{"enable":true,"version":true}},"canonical":true,"seo":false,"index_with_subtitle":false,"menu":{"home":"/ || home","archives":"/archives/ || archive"},"menu_icons":{"enable":true},"scheme":"Pisces","social_icons":{"enable":true,"icons_only":false,"transition":false},"links_icon":"link","links_title":"Links","links_layout":"block","toc":{"enable":true,"number":true,"wrap":false},"sidebar":{"position":"left","display":"post","offset":12,"b2t":false,"scrollpercent":false,"onmobile":false},"scroll_to_more":true,"save_scroll":false,"excerpt_description":true,"auto_excerpt":{"enable":false,"length":30},"read_more_btn":true,"post_meta":{"item_text":true,"created_at":true,"updated_at":false,"categories":true},"post_wordcount":{"item_text":true,"wordcount":false,"min2read":false,"totalcount":false,"separated_meta":true},"post_copyright":{"enable":false,"license":"CC BY-NC-SA 3.0","license_url":"https://creativecommons.org/licenses/by-nc-sa/3.0/"},"mobile_layout_economy":false,"android_chrome_color":"#222","custom_logo":{"enabled":false,"image":null},"marked":{"smartypants":false},"highlight_theme":"normal","font":{"enable":false,"host":null,"global":{"external":true,"family":"Lato","size":null},"headings":{"external":true,"family":null,"size":null},"posts":{"external":true,"family":null},"logo":{"external":true,"family":null,"size":null},"codes":{"external":true,"family":null,"size":null}},"mathjax":{"enable":false,"per_page":false,"cdn":"//cdn.bootcss.com/mathjax/2.7.1/latest.js?config=TeX-AMS-MML_HTMLorMML"},"han":false,"disqus":{"enable":false,"shortname":null,"count":true},"changyan":{"enable":false,"appid":null,"appkey":null},"valine":{"enable":false,"appid":null,"appkey":null,"notify":false,"verify":false,"placeholder":"Just go go","avatar":"mm","guest_info":"nick,mail,link","pageSize":10},"gitment":{"enable":false,"mint":true,"count":true,"lazy":false,"cleanly":false,"language":null,"github_user":null,"github_repo":null,"client_id":null,"client_secret":null,"proxy_gateway":null,"redirect_protocol":null},"needmoreshare2":{"enable":false,"postbottom":{"enable":false,"options":{"iconStyle":"box","boxForm":"horizontal","position":"bottomCenter","networks":"Weibo,Wechat,Douban,QQZone,Twitter,Facebook"}},"float":{"enable":false,"options":{"iconStyle":"box","boxForm":"horizontal","position":"middleRight","networks":"Weibo,Wechat,Douban,QQZone,Twitter,Facebook"}}},"duoshuo_info":{"ua_enable":true,"admin_enable":false,"user_id":0},"facebook_sdk":{"enable":false,"app_id":null,"fb_admin":null,"like_button":null,"webmaster":null},"facebook_comments_plugin":{"enable":false,"num_of_posts":10,"width":"100%","scheme":"light"},"vkontakte_api":{"enable":false,"app_id":null,"like":true,"comments":true,"num_of_posts":10},"rating":{"enable":false,"id":null,"color":"fc6423"},"leancloud_visitors":{"enable":false,"app_id":null,"app_key":null},"firestore":{"enable":false,"collection":"articles","apiKey":null,"projectId":null,"bluebird":false},"busuanzi_count":{"enable":false,"site_uv":true,"site_uv_header":"<i class=\"fa fa-user\"></i>","site_uv_footer":null,"site_pv":true,"site_pv_header":"<i class=\"fa fa-eye\"></i>","site_pv_footer":null,"page_pv":true,"page_pv_header":"<i class=\"fa fa-file-o\"></i>","page_pv_footer":null},"baidu_push":false,"calendar":{"enable":false,"calendar_id":"<required>","api_key":"<required>","orderBy":"startTime","offsetMax":24,"offsetMin":4,"timeZone":null,"showDeleted":false,"singleEvents":true,"maxResults":250},"algolia_search":{"enable":false,"hits":{"per_page":10},"labels":{"input_placeholder":"Search for Posts","hits_empty":"We didn't find any results for the search: ${query}","hits_stats":"${hits} results found in ${time} ms"}},"local_search":{"enable":false,"trigger":"auto","top_n_per_article":1},"exturl":false,"note":{"style":"simple","icons":false,"border_radius":3,"light_bg_offset":0},"label":true,"tabs":{"enable":true,"transition":{"tabs":false,"labels":true},"border_radius":0},"motion":{"enable":true,"async":false,"transition":{"post_block":"fadeIn","post_header":"slideDownIn","post_body":"slideDownIn","coll_header":"slideLeftIn","sidebar":"slideUpIn"}},"fancybox":true,"pace":false,"pace_theme":"pace-theme-minimal","canvas_nest":false,"three_waves":false,"canvas_lines":false,"canvas_sphere":false,"canvas_ribbon":{"enable":false,"size":300,"alpha":0.6,"zIndex":-1},"vendors":{"_internal":"lib","jquery":null,"fancybox":null,"fancybox_css":null,"fastclick":null,"lazyload":null,"velocity":null,"velocity_ui":null,"ua_parser":null,"fontawesome":null,"algolia_instant_js":null,"algolia_instant_css":null,"pace":null,"pace_css":null,"canvas_nest":null,"three":null,"three_waves":null,"canvas_lines":null,"canvas_sphere":null,"canvas_ribbon":null,"han":null,"needMoreShare2":null},"css":"css","js":"js","images":"images","version":"5.1.4"}}},"excerpt":"<h1 id=\"Chapter-6-ChannelHandler-and-ChannelPipeline\"><a href=\"#Chapter-6-ChannelHandler-and-ChannelPipeline\" class=\"headerlink\" title=\"Chapter 6 - ChannelHandler and ChannelPipeline\"></a>Chapter 6 - ChannelHandler and ChannelPipeline</h1>","more":"<h2 id=\"6-1-ChannelHandler-family\"><a href=\"#6-1-ChannelHandler-family\" class=\"headerlink\" title=\"6.1 ChannelHandler family\"></a>6.1 ChannelHandler family</h2><p><strong>Channel State Model</strong><br><img src=\"channel_state_model.png\" alt=\"Channel State Model\"></p>\n<ul>\n<li><p>When we override <em>channelRead()</em> in <em>ChannelInboundHandler</em>, we need to release the memory associated with <em>ByteBuf</em> ourselves using <em>ReferenceCountUtil.release()</em>.<br><em>SimpleChannelInboundHandler</em> will release resources automatically.</p>\n</li>\n<li><p><em>ChannelInboundHandler</em> is able to defer an operation/event on demand. If writing to a remote peer is suspended, you can defer flush operations and resume them later.</p>\n</li>\n<li><p>A <em>ChannelHandler</em> could be sharable across multiple <em>ChannelPipelines</em>.</p>\n</li>\n<li><p><img src=\"ChannelHandlerAdaptor.png\" alt=\"Channel Handler Adaptor class hierarchy\"></p>\n</li>\n<li><p><em>ResourceLeakDetector</em> is provided by Netty to sample about 1% of the buffer allocations to make sure there is no memory leaks</p>\n</li>\n<li><p>It&#39;s important not only to release resources but also to notify the <em>ChannelPromise</em> so the listener could be notified that a message has been handled.</p>\n</li>\n</ul>\n<h2 id=\"6-2-Interface-ChannelPipeline\"><a href=\"#6-2-Interface-ChannelPipeline\" class=\"headerlink\" title=\"6.2 Interface ChannelPipeline\"></a>6.2 Interface ChannelPipeline</h2><p><img src=\"channelPipeline_channelHandlers.png\" alt=\"ChannelPipeline and ChannelHandlers\"></p>\n<ul>\n<li>It&#39;s important not to block the EventLoop thread as it would have a negative impact on the overal handling of I/O.</li>\n<li>If we want to handle legacy code that uses blocking APIs, <em>ChannelPipeline</em> has add() method that accepts an <em>EventExecutorGroup</em>. If an event is passed there, it will be handled by one of the <em>EventExecutors</em> in that group and be removed from the <em>EventLoop</em> of the <em>Channel</em> itself. There is an implementation called <em>DefaultEventExecutorGroup</em>.</li>\n</ul>\n<h2 id=\"6-3-Interface-ChannelHandlerContext\"><a href=\"#6-3-Interface-ChannelHandlerContext\" class=\"headerlink\" title=\"6.3 Interface ChannelHandlerContext\"></a>6.3 Interface ChannelHandlerContext</h2><ul>\n<li>The <em>ChannelHandlerContext</em> associated with a <em>ChannelHandler</em> never changes, so it&#39;s ok to cache it. It&#39;s created when adding <em>ChannelHandler</em> to pipeline.</li>\n<li>Some other classes have same methods whose names are identical to methods in <em>ChannelHandlerContext</em>. However, the latter will provide <strong>better</strong> performance.</li>\n<li>If write() is invoked on either <em>Channel</em> or <em>ChannelPipeline</em> level, the event will be propagated all the way through the pipeline, otherwise if it&#39;s invoked on the <em>ChannelHandlerContext</em>, the movement will be from one handler to the next.</li>\n<li>To invoke processing starting from a specific handler, you must refer to the <em>ChannelHandlerContext</em> that&#39;s associated with the handler <strong>before</strong> that one.<br><img src=\"operationsTriggeredViaContext.png\" alt=\"Event flow for operations triggered via ChannelHandlerContext\"></li>\n<li>When you share a handler to multiple pipelines, you need to make sure the handler must be thread-safe</li>\n</ul>\n<h2 id=\"6-4-Exception-Handling\"><a href=\"#6-4-Exception-Handling\" class=\"headerlink\" title=\"6.4 Exception Handling\"></a>6.4 Exception Handling</h2><ul>\n<li>The default implementation for exception handling won&#39;t do anything except forwarding the exception to the next handler in the pipeline.</li>\n<li>If it reaches the end of the pipeline, it&#39;s logged as unhandled.</li>\n<li>Every outbound operation returns a <em>ChannelFuture</em>, which is registered by listeners to be notified of success or error when the operation completes.</li>\n<li>As a subclass of <em>ChannelFuture</em>, <em>ChannelPromise</em> also has writable methods that provide for immediate notification: setSuccess() and setFailure()</li>\n</ul>\n<p>There are two ways of adding a listener. </p>\n<ol>\n<li>The most common way is to invoke addListener on the <em>ChannelFuture</em> that is returned by an outbound operation.<br><img src=\"channelFutureListenerToChannelFuture.png\" alt=\"Adding a ChannelFutureListener to a ChannelFuture\"></li>\n<li>The second way is to add a <em>ChannelFutureListener</em> to the <em>ChannelPromise</em> that is passed as an argument to the methods.<br><img src=\"channelFutureListenerToChannelPromise.png\" alt=\"Adding a ChannelFutureListener to a ChannelPromise\"></li>\n</ol>\n<ul>\n<li>If <em>ChannelOutboundHandler</em> itself throws an exception, Netty will notify all the listeners that registered with the ChannelPromise.</li>\n</ul>"},{"title":"Netty in Action Chapter 7","top":false,"cover":false,"toc":true,"mathjax":true,"date":"2020-04-09T13:04:33.000Z","summary":"Reading notes for Chapter 7 of &laquo;Netty in Action&raquo;","password":null,"_content":"\n# Chapter 7 - EventLoop\n<!--more-->\nIn 7.1, it introduces Executor's threading model in JDK, where there is a thread pool, and an available is selected from it to process a task, the thread will be returned back to the pool once the task is completed.\n![Executor Logic](executor_logic.png)\nIt has performance issues when the number of threads increases, and can be very complex in larger scope.\n\nIn 7.2, it introduces *EventLoop* in Netty, the basic idea is that each task is an instance of **Runnable**. An *EventLoop* will only be associated to one thread that never changes, but it could be assigned to serve multiple *Channels*.\nAll I/O operations are handled by the thread that is assigned to the *EventLoop*.\nThe key difference is: **In Netty, the task assignment is seperated from the thread creation**, which makes it much  more flexible.\n\nIn 7.3, it gives us examples of how Java NIO implements scheduled tasks, and how Netty does that, the difference is Java NIO will have to create a thread pool, which is not ideal performance wise. For Netty, we are able to just use the *EventLoop* associated to that *Channel*, and make a scheduled task.\n\nIn 7.4, implementation details of Netty threading model is introduced. For an *EventLoop*, if incoming task is in the same thread assigned to that *EventLoop*, it will be executed, otherwise it will be put in a queue.\nThe EventLoop/thread allocation is shown in the screenshot below.\n![EventLoop Allocation](eventloop_allocation.png)","source":"_posts/Netty-in-Action-Chapter-7.md","raw":"---\ntitle: Netty in Action Chapter 7\ntop: false\ncover: false\ntoc: true\nmathjax: true\ndate: 2020-04-09 09:04:33\nsummary: Reading notes for Chapter 7 of &laquo;Netty in Action&raquo;\ncategories: Tech\ntags:\n    - Java\n    - Netty\npassword:\n---\n\n# Chapter 7 - EventLoop\n<!--more-->\nIn 7.1, it introduces Executor's threading model in JDK, where there is a thread pool, and an available is selected from it to process a task, the thread will be returned back to the pool once the task is completed.\n![Executor Logic](executor_logic.png)\nIt has performance issues when the number of threads increases, and can be very complex in larger scope.\n\nIn 7.2, it introduces *EventLoop* in Netty, the basic idea is that each task is an instance of **Runnable**. An *EventLoop* will only be associated to one thread that never changes, but it could be assigned to serve multiple *Channels*.\nAll I/O operations are handled by the thread that is assigned to the *EventLoop*.\nThe key difference is: **In Netty, the task assignment is seperated from the thread creation**, which makes it much  more flexible.\n\nIn 7.3, it gives us examples of how Java NIO implements scheduled tasks, and how Netty does that, the difference is Java NIO will have to create a thread pool, which is not ideal performance wise. For Netty, we are able to just use the *EventLoop* associated to that *Channel*, and make a scheduled task.\n\nIn 7.4, implementation details of Netty threading model is introduced. For an *EventLoop*, if incoming task is in the same thread assigned to that *EventLoop*, it will be executed, otherwise it will be put in a queue.\nThe EventLoop/thread allocation is shown in the screenshot below.\n![EventLoop Allocation](eventloop_allocation.png)","slug":"Netty-in-Action-Chapter-7","published":1,"updated":"2020-05-05T15:12:27.380Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ckcxuqepq0015fkjx9r541hig","content":"<h1 id=\"Chapter-7-EventLoop\"><a href=\"#Chapter-7-EventLoop\" class=\"headerlink\" title=\"Chapter 7 - EventLoop\"></a>Chapter 7 - EventLoop</h1><a id=\"more\"></a>\n<p>In 7.1, it introduces Executor&#39;s threading model in JDK, where there is a thread pool, and an available is selected from it to process a task, the thread will be returned back to the pool once the task is completed.<br><img src=\"executor_logic.png\" alt=\"Executor Logic\"><br>It has performance issues when the number of threads increases, and can be very complex in larger scope.</p>\n<p>In 7.2, it introduces <em>EventLoop</em> in Netty, the basic idea is that each task is an instance of <strong>Runnable</strong>. An <em>EventLoop</em> will only be associated to one thread that never changes, but it could be assigned to serve multiple <em>Channels</em>.<br>All I/O operations are handled by the thread that is assigned to the <em>EventLoop</em>.<br>The key difference is: <strong>In Netty, the task assignment is seperated from the thread creation</strong>, which makes it much  more flexible.</p>\n<p>In 7.3, it gives us examples of how Java NIO implements scheduled tasks, and how Netty does that, the difference is Java NIO will have to create a thread pool, which is not ideal performance wise. For Netty, we are able to just use the <em>EventLoop</em> associated to that <em>Channel</em>, and make a scheduled task.</p>\n<p>In 7.4, implementation details of Netty threading model is introduced. For an <em>EventLoop</em>, if incoming task is in the same thread assigned to that <em>EventLoop</em>, it will be executed, otherwise it will be put in a queue.<br>The EventLoop/thread allocation is shown in the screenshot below.<br><img src=\"eventloop_allocation.png\" alt=\"EventLoop Allocation\"></p>\n","site":{"data":{"next":{"override":false,"favicon":{"small":"/uploads/favicon-16x16.png","medium":"/uploads/favicon-32x32.png","apple_touch_icon":"/uploads/apple-touch-icon.png","safari_pinned_tab":"/uploads/favicon.png","ms_browserconfig":"/uploads/browserconfig.xml"},"keywords":"Hexo, NexT","rss":null,"footer":{"icon":"user","copyright":null,"powered":true,"theme":{"enable":true,"version":true}},"canonical":true,"seo":false,"index_with_subtitle":false,"menu":{"home":"/ || home","archives":"/archives/ || archive"},"menu_icons":{"enable":true},"scheme":"Pisces","social_icons":{"enable":true,"icons_only":false,"transition":false},"links_icon":"link","links_title":"Links","links_layout":"block","toc":{"enable":true,"number":true,"wrap":false},"sidebar":{"position":"left","display":"post","offset":12,"b2t":false,"scrollpercent":false,"onmobile":false},"scroll_to_more":true,"save_scroll":false,"excerpt_description":true,"auto_excerpt":{"enable":false,"length":30},"read_more_btn":true,"post_meta":{"item_text":true,"created_at":true,"updated_at":false,"categories":true},"post_wordcount":{"item_text":true,"wordcount":false,"min2read":false,"totalcount":false,"separated_meta":true},"post_copyright":{"enable":false,"license":"CC BY-NC-SA 3.0","license_url":"https://creativecommons.org/licenses/by-nc-sa/3.0/"},"mobile_layout_economy":false,"android_chrome_color":"#222","custom_logo":{"enabled":false,"image":null},"marked":{"smartypants":false},"highlight_theme":"normal","font":{"enable":false,"host":null,"global":{"external":true,"family":"Lato","size":null},"headings":{"external":true,"family":null,"size":null},"posts":{"external":true,"family":null},"logo":{"external":true,"family":null,"size":null},"codes":{"external":true,"family":null,"size":null}},"mathjax":{"enable":false,"per_page":false,"cdn":"//cdn.bootcss.com/mathjax/2.7.1/latest.js?config=TeX-AMS-MML_HTMLorMML"},"han":false,"disqus":{"enable":false,"shortname":null,"count":true},"changyan":{"enable":false,"appid":null,"appkey":null},"valine":{"enable":false,"appid":null,"appkey":null,"notify":false,"verify":false,"placeholder":"Just go go","avatar":"mm","guest_info":"nick,mail,link","pageSize":10},"gitment":{"enable":false,"mint":true,"count":true,"lazy":false,"cleanly":false,"language":null,"github_user":null,"github_repo":null,"client_id":null,"client_secret":null,"proxy_gateway":null,"redirect_protocol":null},"needmoreshare2":{"enable":false,"postbottom":{"enable":false,"options":{"iconStyle":"box","boxForm":"horizontal","position":"bottomCenter","networks":"Weibo,Wechat,Douban,QQZone,Twitter,Facebook"}},"float":{"enable":false,"options":{"iconStyle":"box","boxForm":"horizontal","position":"middleRight","networks":"Weibo,Wechat,Douban,QQZone,Twitter,Facebook"}}},"duoshuo_info":{"ua_enable":true,"admin_enable":false,"user_id":0},"facebook_sdk":{"enable":false,"app_id":null,"fb_admin":null,"like_button":null,"webmaster":null},"facebook_comments_plugin":{"enable":false,"num_of_posts":10,"width":"100%","scheme":"light"},"vkontakte_api":{"enable":false,"app_id":null,"like":true,"comments":true,"num_of_posts":10},"rating":{"enable":false,"id":null,"color":"fc6423"},"leancloud_visitors":{"enable":false,"app_id":null,"app_key":null},"firestore":{"enable":false,"collection":"articles","apiKey":null,"projectId":null,"bluebird":false},"busuanzi_count":{"enable":false,"site_uv":true,"site_uv_header":"<i class=\"fa fa-user\"></i>","site_uv_footer":null,"site_pv":true,"site_pv_header":"<i class=\"fa fa-eye\"></i>","site_pv_footer":null,"page_pv":true,"page_pv_header":"<i class=\"fa fa-file-o\"></i>","page_pv_footer":null},"baidu_push":false,"calendar":{"enable":false,"calendar_id":"<required>","api_key":"<required>","orderBy":"startTime","offsetMax":24,"offsetMin":4,"timeZone":null,"showDeleted":false,"singleEvents":true,"maxResults":250},"algolia_search":{"enable":false,"hits":{"per_page":10},"labels":{"input_placeholder":"Search for Posts","hits_empty":"We didn't find any results for the search: ${query}","hits_stats":"${hits} results found in ${time} ms"}},"local_search":{"enable":false,"trigger":"auto","top_n_per_article":1},"exturl":false,"note":{"style":"simple","icons":false,"border_radius":3,"light_bg_offset":0},"label":true,"tabs":{"enable":true,"transition":{"tabs":false,"labels":true},"border_radius":0},"motion":{"enable":true,"async":false,"transition":{"post_block":"fadeIn","post_header":"slideDownIn","post_body":"slideDownIn","coll_header":"slideLeftIn","sidebar":"slideUpIn"}},"fancybox":true,"pace":false,"pace_theme":"pace-theme-minimal","canvas_nest":false,"three_waves":false,"canvas_lines":false,"canvas_sphere":false,"canvas_ribbon":{"enable":false,"size":300,"alpha":0.6,"zIndex":-1},"vendors":{"_internal":"lib","jquery":null,"fancybox":null,"fancybox_css":null,"fastclick":null,"lazyload":null,"velocity":null,"velocity_ui":null,"ua_parser":null,"fontawesome":null,"algolia_instant_js":null,"algolia_instant_css":null,"pace":null,"pace_css":null,"canvas_nest":null,"three":null,"three_waves":null,"canvas_lines":null,"canvas_sphere":null,"canvas_ribbon":null,"han":null,"needMoreShare2":null},"css":"css","js":"js","images":"images","version":"5.1.4"}}},"excerpt":"<h1 id=\"Chapter-7-EventLoop\"><a href=\"#Chapter-7-EventLoop\" class=\"headerlink\" title=\"Chapter 7 - EventLoop\"></a>Chapter 7 - EventLoop</h1>","more":"<p>In 7.1, it introduces Executor&#39;s threading model in JDK, where there is a thread pool, and an available is selected from it to process a task, the thread will be returned back to the pool once the task is completed.<br><img src=\"executor_logic.png\" alt=\"Executor Logic\"><br>It has performance issues when the number of threads increases, and can be very complex in larger scope.</p>\n<p>In 7.2, it introduces <em>EventLoop</em> in Netty, the basic idea is that each task is an instance of <strong>Runnable</strong>. An <em>EventLoop</em> will only be associated to one thread that never changes, but it could be assigned to serve multiple <em>Channels</em>.<br>All I/O operations are handled by the thread that is assigned to the <em>EventLoop</em>.<br>The key difference is: <strong>In Netty, the task assignment is seperated from the thread creation</strong>, which makes it much  more flexible.</p>\n<p>In 7.3, it gives us examples of how Java NIO implements scheduled tasks, and how Netty does that, the difference is Java NIO will have to create a thread pool, which is not ideal performance wise. For Netty, we are able to just use the <em>EventLoop</em> associated to that <em>Channel</em>, and make a scheduled task.</p>\n<p>In 7.4, implementation details of Netty threading model is introduced. For an <em>EventLoop</em>, if incoming task is in the same thread assigned to that <em>EventLoop</em>, it will be executed, otherwise it will be put in a queue.<br>The EventLoop/thread allocation is shown in the screenshot below.<br><img src=\"eventloop_allocation.png\" alt=\"EventLoop Allocation\"></p>"},{"title":"Netty in Action Chapter 5","top":false,"cover":false,"toc":true,"mathjax":true,"date":"2020-04-03T18:41:57.000Z","summary":"Reading notes for Chapter 5 of &laquo;Netty in Action&raquo;","password":null,"_content":"\n\n# Chapter 5 - ByteBuf\n<!--more-->\n## 5.1 The ByteBuf API\n\nAdvantages of *ByteBuf* API: \n\n1.  It’s extensible to user-defined buffer types.\n2.  Transparent zero-copy is achieved by a built-in composite buffer type.\n3.  Capacity is expanded on demand (as with the JDK StringBuilder).\n4.  Switching between reader and writer modes doesn't require calling ByteBuffer's flip() method.\n5.  Reading and writing employ distinct indices.\n6.  Method chaining is supported.\n7.  Reference counting is supported.\n8.  Pooling is supported.\n\n## 5.2 Class ByteBuf\n\nByteBuf has two indexes, *readerIndex* and *writerIndex*:\n\n![ByteBuf](bytebuf.png)\n\nThe max capacity of a ByteBuf can be specified, moving writerIndex past this value will cause an exception\n\n### 5.2.2 ByteBuf usage patterns\n**Heap Buffers**\nStore data in the JVM heap space.\n**Direct Buffers**\nStore data outside of heap, this is to avoid copying the buffer content to/from an intermediate buffer before/after a native I/O operation. This is **ideal** for network data transfer.\nOn the other side, it's harder to allocate and release than heap-based buffers.\n**Composite Buffers**\nIt aggregates multiple **ByteBufs**. \nIf we don't want to reallocate both bufferes for each message, it's a good fit. (if messages contain same body but different headers, we can keep the body and replace header every time)\n\n## 5.3 Byte-level operations\n\n1. We are able to access *ByteBuf* randomly by giving the index of the byte we want to get\n![ByteBuf internal segmentation](bytebuf_internal_segmentation.png)\n2. The segment that is already read is discardable, which will be cleaned by calling *discardReadBytes()*, which will increase the size of writable bytes, but it also causes memory coping by moving the readable bytes to the beginning of the byteBuf.\n3. We can use *ByteBufProcessor* as a parameter of forEachByte() method of *ByteBuf* to do searching\n4. We can copy a byteBuf or slice it.\n5. There are many variants of *read* and *write* operations of *ByteBuf*\n6. Netty uses the *PooledByteBufAllocator* by default, which can be changed via *ChannelConfig*\n\n## 5.6 Reference counting\n\nIt tracks the number of active references to a specific object, starting with 0. \nAs long as it's greater than 0, the object is guaranteed not to be released.","source":"_posts/Netty-in-Action-Chapter-5.md","raw":"---\ntitle: Netty in Action Chapter 5\ntop: false\ncover: false\ntoc: true\nmathjax: true\ndate: 2020-04-03 14:41:57\nsummary: Reading notes for Chapter 5 of &laquo;Netty in Action&raquo;\ncategories: Tech\ntags:\n    - Java\n    - Netty\npassword:\n---\n\n\n# Chapter 5 - ByteBuf\n<!--more-->\n## 5.1 The ByteBuf API\n\nAdvantages of *ByteBuf* API: \n\n1.  It’s extensible to user-defined buffer types.\n2.  Transparent zero-copy is achieved by a built-in composite buffer type.\n3.  Capacity is expanded on demand (as with the JDK StringBuilder).\n4.  Switching between reader and writer modes doesn't require calling ByteBuffer's flip() method.\n5.  Reading and writing employ distinct indices.\n6.  Method chaining is supported.\n7.  Reference counting is supported.\n8.  Pooling is supported.\n\n## 5.2 Class ByteBuf\n\nByteBuf has two indexes, *readerIndex* and *writerIndex*:\n\n![ByteBuf](bytebuf.png)\n\nThe max capacity of a ByteBuf can be specified, moving writerIndex past this value will cause an exception\n\n### 5.2.2 ByteBuf usage patterns\n**Heap Buffers**\nStore data in the JVM heap space.\n**Direct Buffers**\nStore data outside of heap, this is to avoid copying the buffer content to/from an intermediate buffer before/after a native I/O operation. This is **ideal** for network data transfer.\nOn the other side, it's harder to allocate and release than heap-based buffers.\n**Composite Buffers**\nIt aggregates multiple **ByteBufs**. \nIf we don't want to reallocate both bufferes for each message, it's a good fit. (if messages contain same body but different headers, we can keep the body and replace header every time)\n\n## 5.3 Byte-level operations\n\n1. We are able to access *ByteBuf* randomly by giving the index of the byte we want to get\n![ByteBuf internal segmentation](bytebuf_internal_segmentation.png)\n2. The segment that is already read is discardable, which will be cleaned by calling *discardReadBytes()*, which will increase the size of writable bytes, but it also causes memory coping by moving the readable bytes to the beginning of the byteBuf.\n3. We can use *ByteBufProcessor* as a parameter of forEachByte() method of *ByteBuf* to do searching\n4. We can copy a byteBuf or slice it.\n5. There are many variants of *read* and *write* operations of *ByteBuf*\n6. Netty uses the *PooledByteBufAllocator* by default, which can be changed via *ChannelConfig*\n\n## 5.6 Reference counting\n\nIt tracks the number of active references to a specific object, starting with 0. \nAs long as it's greater than 0, the object is guaranteed not to be released.","slug":"Netty-in-Action-Chapter-5","published":1,"updated":"2020-05-05T15:12:09.980Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ckcxuqeq60018fkjx7u3b8nvo","content":"<h1 id=\"Chapter-5-ByteBuf\"><a href=\"#Chapter-5-ByteBuf\" class=\"headerlink\" title=\"Chapter 5 - ByteBuf\"></a>Chapter 5 - ByteBuf</h1><a id=\"more\"></a>\n<h2 id=\"5-1-The-ByteBuf-API\"><a href=\"#5-1-The-ByteBuf-API\" class=\"headerlink\" title=\"5.1 The ByteBuf API\"></a>5.1 The ByteBuf API</h2><p>Advantages of <em>ByteBuf</em> API: </p>\n<ol>\n<li>It’s extensible to user-defined buffer types.</li>\n<li>Transparent zero-copy is achieved by a built-in composite buffer type.</li>\n<li>Capacity is expanded on demand (as with the JDK StringBuilder).</li>\n<li>Switching between reader and writer modes doesn&#39;t require calling ByteBuffer&#39;s flip() method.</li>\n<li>Reading and writing employ distinct indices.</li>\n<li>Method chaining is supported.</li>\n<li>Reference counting is supported.</li>\n<li>Pooling is supported.</li>\n</ol>\n<h2 id=\"5-2-Class-ByteBuf\"><a href=\"#5-2-Class-ByteBuf\" class=\"headerlink\" title=\"5.2 Class ByteBuf\"></a>5.2 Class ByteBuf</h2><p>ByteBuf has two indexes, <em>readerIndex</em> and <em>writerIndex</em>:</p>\n<p><img src=\"bytebuf.png\" alt=\"ByteBuf\"></p>\n<p>The max capacity of a ByteBuf can be specified, moving writerIndex past this value will cause an exception</p>\n<h3 id=\"5-2-2-ByteBuf-usage-patterns\"><a href=\"#5-2-2-ByteBuf-usage-patterns\" class=\"headerlink\" title=\"5.2.2 ByteBuf usage patterns\"></a>5.2.2 ByteBuf usage patterns</h3><p><strong>Heap Buffers</strong><br>Store data in the JVM heap space.<br><strong>Direct Buffers</strong><br>Store data outside of heap, this is to avoid copying the buffer content to/from an intermediate buffer before/after a native I/O operation. This is <strong>ideal</strong> for network data transfer.<br>On the other side, it&#39;s harder to allocate and release than heap-based buffers.<br><strong>Composite Buffers</strong><br>It aggregates multiple <strong>ByteBufs</strong>.<br>If we don&#39;t want to reallocate both bufferes for each message, it&#39;s a good fit. (if messages contain same body but different headers, we can keep the body and replace header every time)</p>\n<h2 id=\"5-3-Byte-level-operations\"><a href=\"#5-3-Byte-level-operations\" class=\"headerlink\" title=\"5.3 Byte-level operations\"></a>5.3 Byte-level operations</h2><ol>\n<li>We are able to access <em>ByteBuf</em> randomly by giving the index of the byte we want to get<br><img src=\"bytebuf_internal_segmentation.png\" alt=\"ByteBuf internal segmentation\"></li>\n<li>The segment that is already read is discardable, which will be cleaned by calling <em>discardReadBytes()</em>, which will increase the size of writable bytes, but it also causes memory coping by moving the readable bytes to the beginning of the byteBuf.</li>\n<li>We can use <em>ByteBufProcessor</em> as a parameter of forEachByte() method of <em>ByteBuf</em> to do searching</li>\n<li>We can copy a byteBuf or slice it.</li>\n<li>There are many variants of <em>read</em> and <em>write</em> operations of <em>ByteBuf</em></li>\n<li>Netty uses the <em>PooledByteBufAllocator</em> by default, which can be changed via <em>ChannelConfig</em></li>\n</ol>\n<h2 id=\"5-6-Reference-counting\"><a href=\"#5-6-Reference-counting\" class=\"headerlink\" title=\"5.6 Reference counting\"></a>5.6 Reference counting</h2><p>It tracks the number of active references to a specific object, starting with 0.<br>As long as it&#39;s greater than 0, the object is guaranteed not to be released.</p>\n","site":{"data":{"next":{"override":false,"favicon":{"small":"/uploads/favicon-16x16.png","medium":"/uploads/favicon-32x32.png","apple_touch_icon":"/uploads/apple-touch-icon.png","safari_pinned_tab":"/uploads/favicon.png","ms_browserconfig":"/uploads/browserconfig.xml"},"keywords":"Hexo, NexT","rss":null,"footer":{"icon":"user","copyright":null,"powered":true,"theme":{"enable":true,"version":true}},"canonical":true,"seo":false,"index_with_subtitle":false,"menu":{"home":"/ || home","archives":"/archives/ || archive"},"menu_icons":{"enable":true},"scheme":"Pisces","social_icons":{"enable":true,"icons_only":false,"transition":false},"links_icon":"link","links_title":"Links","links_layout":"block","toc":{"enable":true,"number":true,"wrap":false},"sidebar":{"position":"left","display":"post","offset":12,"b2t":false,"scrollpercent":false,"onmobile":false},"scroll_to_more":true,"save_scroll":false,"excerpt_description":true,"auto_excerpt":{"enable":false,"length":30},"read_more_btn":true,"post_meta":{"item_text":true,"created_at":true,"updated_at":false,"categories":true},"post_wordcount":{"item_text":true,"wordcount":false,"min2read":false,"totalcount":false,"separated_meta":true},"post_copyright":{"enable":false,"license":"CC BY-NC-SA 3.0","license_url":"https://creativecommons.org/licenses/by-nc-sa/3.0/"},"mobile_layout_economy":false,"android_chrome_color":"#222","custom_logo":{"enabled":false,"image":null},"marked":{"smartypants":false},"highlight_theme":"normal","font":{"enable":false,"host":null,"global":{"external":true,"family":"Lato","size":null},"headings":{"external":true,"family":null,"size":null},"posts":{"external":true,"family":null},"logo":{"external":true,"family":null,"size":null},"codes":{"external":true,"family":null,"size":null}},"mathjax":{"enable":false,"per_page":false,"cdn":"//cdn.bootcss.com/mathjax/2.7.1/latest.js?config=TeX-AMS-MML_HTMLorMML"},"han":false,"disqus":{"enable":false,"shortname":null,"count":true},"changyan":{"enable":false,"appid":null,"appkey":null},"valine":{"enable":false,"appid":null,"appkey":null,"notify":false,"verify":false,"placeholder":"Just go go","avatar":"mm","guest_info":"nick,mail,link","pageSize":10},"gitment":{"enable":false,"mint":true,"count":true,"lazy":false,"cleanly":false,"language":null,"github_user":null,"github_repo":null,"client_id":null,"client_secret":null,"proxy_gateway":null,"redirect_protocol":null},"needmoreshare2":{"enable":false,"postbottom":{"enable":false,"options":{"iconStyle":"box","boxForm":"horizontal","position":"bottomCenter","networks":"Weibo,Wechat,Douban,QQZone,Twitter,Facebook"}},"float":{"enable":false,"options":{"iconStyle":"box","boxForm":"horizontal","position":"middleRight","networks":"Weibo,Wechat,Douban,QQZone,Twitter,Facebook"}}},"duoshuo_info":{"ua_enable":true,"admin_enable":false,"user_id":0},"facebook_sdk":{"enable":false,"app_id":null,"fb_admin":null,"like_button":null,"webmaster":null},"facebook_comments_plugin":{"enable":false,"num_of_posts":10,"width":"100%","scheme":"light"},"vkontakte_api":{"enable":false,"app_id":null,"like":true,"comments":true,"num_of_posts":10},"rating":{"enable":false,"id":null,"color":"fc6423"},"leancloud_visitors":{"enable":false,"app_id":null,"app_key":null},"firestore":{"enable":false,"collection":"articles","apiKey":null,"projectId":null,"bluebird":false},"busuanzi_count":{"enable":false,"site_uv":true,"site_uv_header":"<i class=\"fa fa-user\"></i>","site_uv_footer":null,"site_pv":true,"site_pv_header":"<i class=\"fa fa-eye\"></i>","site_pv_footer":null,"page_pv":true,"page_pv_header":"<i class=\"fa fa-file-o\"></i>","page_pv_footer":null},"baidu_push":false,"calendar":{"enable":false,"calendar_id":"<required>","api_key":"<required>","orderBy":"startTime","offsetMax":24,"offsetMin":4,"timeZone":null,"showDeleted":false,"singleEvents":true,"maxResults":250},"algolia_search":{"enable":false,"hits":{"per_page":10},"labels":{"input_placeholder":"Search for Posts","hits_empty":"We didn't find any results for the search: ${query}","hits_stats":"${hits} results found in ${time} ms"}},"local_search":{"enable":false,"trigger":"auto","top_n_per_article":1},"exturl":false,"note":{"style":"simple","icons":false,"border_radius":3,"light_bg_offset":0},"label":true,"tabs":{"enable":true,"transition":{"tabs":false,"labels":true},"border_radius":0},"motion":{"enable":true,"async":false,"transition":{"post_block":"fadeIn","post_header":"slideDownIn","post_body":"slideDownIn","coll_header":"slideLeftIn","sidebar":"slideUpIn"}},"fancybox":true,"pace":false,"pace_theme":"pace-theme-minimal","canvas_nest":false,"three_waves":false,"canvas_lines":false,"canvas_sphere":false,"canvas_ribbon":{"enable":false,"size":300,"alpha":0.6,"zIndex":-1},"vendors":{"_internal":"lib","jquery":null,"fancybox":null,"fancybox_css":null,"fastclick":null,"lazyload":null,"velocity":null,"velocity_ui":null,"ua_parser":null,"fontawesome":null,"algolia_instant_js":null,"algolia_instant_css":null,"pace":null,"pace_css":null,"canvas_nest":null,"three":null,"three_waves":null,"canvas_lines":null,"canvas_sphere":null,"canvas_ribbon":null,"han":null,"needMoreShare2":null},"css":"css","js":"js","images":"images","version":"5.1.4"}}},"excerpt":"<h1 id=\"Chapter-5-ByteBuf\"><a href=\"#Chapter-5-ByteBuf\" class=\"headerlink\" title=\"Chapter 5 - ByteBuf\"></a>Chapter 5 - ByteBuf</h1>","more":"<h2 id=\"5-1-The-ByteBuf-API\"><a href=\"#5-1-The-ByteBuf-API\" class=\"headerlink\" title=\"5.1 The ByteBuf API\"></a>5.1 The ByteBuf API</h2><p>Advantages of <em>ByteBuf</em> API: </p>\n<ol>\n<li>It’s extensible to user-defined buffer types.</li>\n<li>Transparent zero-copy is achieved by a built-in composite buffer type.</li>\n<li>Capacity is expanded on demand (as with the JDK StringBuilder).</li>\n<li>Switching between reader and writer modes doesn&#39;t require calling ByteBuffer&#39;s flip() method.</li>\n<li>Reading and writing employ distinct indices.</li>\n<li>Method chaining is supported.</li>\n<li>Reference counting is supported.</li>\n<li>Pooling is supported.</li>\n</ol>\n<h2 id=\"5-2-Class-ByteBuf\"><a href=\"#5-2-Class-ByteBuf\" class=\"headerlink\" title=\"5.2 Class ByteBuf\"></a>5.2 Class ByteBuf</h2><p>ByteBuf has two indexes, <em>readerIndex</em> and <em>writerIndex</em>:</p>\n<p><img src=\"bytebuf.png\" alt=\"ByteBuf\"></p>\n<p>The max capacity of a ByteBuf can be specified, moving writerIndex past this value will cause an exception</p>\n<h3 id=\"5-2-2-ByteBuf-usage-patterns\"><a href=\"#5-2-2-ByteBuf-usage-patterns\" class=\"headerlink\" title=\"5.2.2 ByteBuf usage patterns\"></a>5.2.2 ByteBuf usage patterns</h3><p><strong>Heap Buffers</strong><br>Store data in the JVM heap space.<br><strong>Direct Buffers</strong><br>Store data outside of heap, this is to avoid copying the buffer content to/from an intermediate buffer before/after a native I/O operation. This is <strong>ideal</strong> for network data transfer.<br>On the other side, it&#39;s harder to allocate and release than heap-based buffers.<br><strong>Composite Buffers</strong><br>It aggregates multiple <strong>ByteBufs</strong>.<br>If we don&#39;t want to reallocate both bufferes for each message, it&#39;s a good fit. (if messages contain same body but different headers, we can keep the body and replace header every time)</p>\n<h2 id=\"5-3-Byte-level-operations\"><a href=\"#5-3-Byte-level-operations\" class=\"headerlink\" title=\"5.3 Byte-level operations\"></a>5.3 Byte-level operations</h2><ol>\n<li>We are able to access <em>ByteBuf</em> randomly by giving the index of the byte we want to get<br><img src=\"bytebuf_internal_segmentation.png\" alt=\"ByteBuf internal segmentation\"></li>\n<li>The segment that is already read is discardable, which will be cleaned by calling <em>discardReadBytes()</em>, which will increase the size of writable bytes, but it also causes memory coping by moving the readable bytes to the beginning of the byteBuf.</li>\n<li>We can use <em>ByteBufProcessor</em> as a parameter of forEachByte() method of <em>ByteBuf</em> to do searching</li>\n<li>We can copy a byteBuf or slice it.</li>\n<li>There are many variants of <em>read</em> and <em>write</em> operations of <em>ByteBuf</em></li>\n<li>Netty uses the <em>PooledByteBufAllocator</em> by default, which can be changed via <em>ChannelConfig</em></li>\n</ol>\n<h2 id=\"5-6-Reference-counting\"><a href=\"#5-6-Reference-counting\" class=\"headerlink\" title=\"5.6 Reference counting\"></a>5.6 Reference counting</h2><p>It tracks the number of active references to a specific object, starting with 0.<br>As long as it&#39;s greater than 0, the object is guaranteed not to be released.</p>"},{"title":"Netty in Action Chapter 8","top":false,"cover":false,"toc":true,"mathjax":true,"date":"2020-04-14T18:54:16.000Z","summary":"Reading notes for Chapter 8 of &laquo;Netty in Action&raquo;","password":null,"_content":"\n# Chapter 8 - Bootstrapping\n<!--more-->\nIn 8.1, the bootstrapping steps common to both server and client are handled by AbstractBootstrap, steps specific to clients/servers are handled by Bootstrap or ServerBootstrap.\n\nIn 8.2, *Bootstrap* class is responsible to create Channels for clients and for applications using connectionless protocols.\n![Bootstrapping process](bootstrapping_process.png)\nWe must make sure to not mix OioEventLoopGroup with NioSocketChannel, it will throw exceptions.\n\nIn 8.3, *ServerBootstrap* creates *ServerChannel* to create Channels which represents accepted connections.\nIn 8.4, we are able to bootstrap clients from a Channel, in case we need to act as a client to a third system while processing a client request. And one general guideline from Netty is to reuse EventLoops wherever possible to reduce the cost of thread creation.\n![EventLoop shared among Channels](eventLoop_shared_among_channels.png)\nIn 8.5, we know that we can add more than one ChannelHandlers during a bootstrap by adding them in the pipeline attached to the bootstrap.\nIn 8.6, we are able to use ChannelOptions to apply configurations for all Channels automatically, it includes low-level properties and buffer settings.\nNetty also offers *AttributeMaps* to associate data item with both client and server Channels.\nIn 8.8, when we need to shut down the application, we will need to shut down the *EventLoopGroup*, which is a matter of calling *EventLoopGroup.shutdownGracefully()*, we can also call *Channel.close()*.","source":"_posts/Netty-in-Action-Chapter-8.md","raw":"---\ntitle: Netty in Action Chapter 8\ntop: false\ncover: false\ntoc: true\nmathjax: true\ndate: 2020-04-14 14:54:16\nsummary: Reading notes for Chapter 8 of &laquo;Netty in Action&raquo;\ncategories: Tech\ntags:\n    - Java\n    - Netty\npassword:\n---\n\n# Chapter 8 - Bootstrapping\n<!--more-->\nIn 8.1, the bootstrapping steps common to both server and client are handled by AbstractBootstrap, steps specific to clients/servers are handled by Bootstrap or ServerBootstrap.\n\nIn 8.2, *Bootstrap* class is responsible to create Channels for clients and for applications using connectionless protocols.\n![Bootstrapping process](bootstrapping_process.png)\nWe must make sure to not mix OioEventLoopGroup with NioSocketChannel, it will throw exceptions.\n\nIn 8.3, *ServerBootstrap* creates *ServerChannel* to create Channels which represents accepted connections.\nIn 8.4, we are able to bootstrap clients from a Channel, in case we need to act as a client to a third system while processing a client request. And one general guideline from Netty is to reuse EventLoops wherever possible to reduce the cost of thread creation.\n![EventLoop shared among Channels](eventLoop_shared_among_channels.png)\nIn 8.5, we know that we can add more than one ChannelHandlers during a bootstrap by adding them in the pipeline attached to the bootstrap.\nIn 8.6, we are able to use ChannelOptions to apply configurations for all Channels automatically, it includes low-level properties and buffer settings.\nNetty also offers *AttributeMaps* to associate data item with both client and server Channels.\nIn 8.8, when we need to shut down the application, we will need to shut down the *EventLoopGroup*, which is a matter of calling *EventLoopGroup.shutdownGracefully()*, we can also call *Channel.close()*.","slug":"Netty-in-Action-Chapter-8","published":1,"updated":"2020-05-05T15:12:36.688Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ckcxuqer0001afkjxyzxex5p2","content":"<h1 id=\"Chapter-8-Bootstrapping\"><a href=\"#Chapter-8-Bootstrapping\" class=\"headerlink\" title=\"Chapter 8 - Bootstrapping\"></a>Chapter 8 - Bootstrapping</h1><a id=\"more\"></a>\n<p>In 8.1, the bootstrapping steps common to both server and client are handled by AbstractBootstrap, steps specific to clients/servers are handled by Bootstrap or ServerBootstrap.</p>\n<p>In 8.2, <em>Bootstrap</em> class is responsible to create Channels for clients and for applications using connectionless protocols.<br><img src=\"bootstrapping_process.png\" alt=\"Bootstrapping process\"><br>We must make sure to not mix OioEventLoopGroup with NioSocketChannel, it will throw exceptions.</p>\n<p>In 8.3, <em>ServerBootstrap</em> creates <em>ServerChannel</em> to create Channels which represents accepted connections.<br>In 8.4, we are able to bootstrap clients from a Channel, in case we need to act as a client to a third system while processing a client request. And one general guideline from Netty is to reuse EventLoops wherever possible to reduce the cost of thread creation.<br><img src=\"eventLoop_shared_among_channels.png\" alt=\"EventLoop shared among Channels\"><br>In 8.5, we know that we can add more than one ChannelHandlers during a bootstrap by adding them in the pipeline attached to the bootstrap.<br>In 8.6, we are able to use ChannelOptions to apply configurations for all Channels automatically, it includes low-level properties and buffer settings.<br>Netty also offers <em>AttributeMaps</em> to associate data item with both client and server Channels.<br>In 8.8, when we need to shut down the application, we will need to shut down the <em>EventLoopGroup</em>, which is a matter of calling <em>EventLoopGroup.shutdownGracefully()</em>, we can also call <em>Channel.close()</em>.</p>\n","site":{"data":{"next":{"override":false,"favicon":{"small":"/uploads/favicon-16x16.png","medium":"/uploads/favicon-32x32.png","apple_touch_icon":"/uploads/apple-touch-icon.png","safari_pinned_tab":"/uploads/favicon.png","ms_browserconfig":"/uploads/browserconfig.xml"},"keywords":"Hexo, NexT","rss":null,"footer":{"icon":"user","copyright":null,"powered":true,"theme":{"enable":true,"version":true}},"canonical":true,"seo":false,"index_with_subtitle":false,"menu":{"home":"/ || home","archives":"/archives/ || archive"},"menu_icons":{"enable":true},"scheme":"Pisces","social_icons":{"enable":true,"icons_only":false,"transition":false},"links_icon":"link","links_title":"Links","links_layout":"block","toc":{"enable":true,"number":true,"wrap":false},"sidebar":{"position":"left","display":"post","offset":12,"b2t":false,"scrollpercent":false,"onmobile":false},"scroll_to_more":true,"save_scroll":false,"excerpt_description":true,"auto_excerpt":{"enable":false,"length":30},"read_more_btn":true,"post_meta":{"item_text":true,"created_at":true,"updated_at":false,"categories":true},"post_wordcount":{"item_text":true,"wordcount":false,"min2read":false,"totalcount":false,"separated_meta":true},"post_copyright":{"enable":false,"license":"CC BY-NC-SA 3.0","license_url":"https://creativecommons.org/licenses/by-nc-sa/3.0/"},"mobile_layout_economy":false,"android_chrome_color":"#222","custom_logo":{"enabled":false,"image":null},"marked":{"smartypants":false},"highlight_theme":"normal","font":{"enable":false,"host":null,"global":{"external":true,"family":"Lato","size":null},"headings":{"external":true,"family":null,"size":null},"posts":{"external":true,"family":null},"logo":{"external":true,"family":null,"size":null},"codes":{"external":true,"family":null,"size":null}},"mathjax":{"enable":false,"per_page":false,"cdn":"//cdn.bootcss.com/mathjax/2.7.1/latest.js?config=TeX-AMS-MML_HTMLorMML"},"han":false,"disqus":{"enable":false,"shortname":null,"count":true},"changyan":{"enable":false,"appid":null,"appkey":null},"valine":{"enable":false,"appid":null,"appkey":null,"notify":false,"verify":false,"placeholder":"Just go go","avatar":"mm","guest_info":"nick,mail,link","pageSize":10},"gitment":{"enable":false,"mint":true,"count":true,"lazy":false,"cleanly":false,"language":null,"github_user":null,"github_repo":null,"client_id":null,"client_secret":null,"proxy_gateway":null,"redirect_protocol":null},"needmoreshare2":{"enable":false,"postbottom":{"enable":false,"options":{"iconStyle":"box","boxForm":"horizontal","position":"bottomCenter","networks":"Weibo,Wechat,Douban,QQZone,Twitter,Facebook"}},"float":{"enable":false,"options":{"iconStyle":"box","boxForm":"horizontal","position":"middleRight","networks":"Weibo,Wechat,Douban,QQZone,Twitter,Facebook"}}},"duoshuo_info":{"ua_enable":true,"admin_enable":false,"user_id":0},"facebook_sdk":{"enable":false,"app_id":null,"fb_admin":null,"like_button":null,"webmaster":null},"facebook_comments_plugin":{"enable":false,"num_of_posts":10,"width":"100%","scheme":"light"},"vkontakte_api":{"enable":false,"app_id":null,"like":true,"comments":true,"num_of_posts":10},"rating":{"enable":false,"id":null,"color":"fc6423"},"leancloud_visitors":{"enable":false,"app_id":null,"app_key":null},"firestore":{"enable":false,"collection":"articles","apiKey":null,"projectId":null,"bluebird":false},"busuanzi_count":{"enable":false,"site_uv":true,"site_uv_header":"<i class=\"fa fa-user\"></i>","site_uv_footer":null,"site_pv":true,"site_pv_header":"<i class=\"fa fa-eye\"></i>","site_pv_footer":null,"page_pv":true,"page_pv_header":"<i class=\"fa fa-file-o\"></i>","page_pv_footer":null},"baidu_push":false,"calendar":{"enable":false,"calendar_id":"<required>","api_key":"<required>","orderBy":"startTime","offsetMax":24,"offsetMin":4,"timeZone":null,"showDeleted":false,"singleEvents":true,"maxResults":250},"algolia_search":{"enable":false,"hits":{"per_page":10},"labels":{"input_placeholder":"Search for Posts","hits_empty":"We didn't find any results for the search: ${query}","hits_stats":"${hits} results found in ${time} ms"}},"local_search":{"enable":false,"trigger":"auto","top_n_per_article":1},"exturl":false,"note":{"style":"simple","icons":false,"border_radius":3,"light_bg_offset":0},"label":true,"tabs":{"enable":true,"transition":{"tabs":false,"labels":true},"border_radius":0},"motion":{"enable":true,"async":false,"transition":{"post_block":"fadeIn","post_header":"slideDownIn","post_body":"slideDownIn","coll_header":"slideLeftIn","sidebar":"slideUpIn"}},"fancybox":true,"pace":false,"pace_theme":"pace-theme-minimal","canvas_nest":false,"three_waves":false,"canvas_lines":false,"canvas_sphere":false,"canvas_ribbon":{"enable":false,"size":300,"alpha":0.6,"zIndex":-1},"vendors":{"_internal":"lib","jquery":null,"fancybox":null,"fancybox_css":null,"fastclick":null,"lazyload":null,"velocity":null,"velocity_ui":null,"ua_parser":null,"fontawesome":null,"algolia_instant_js":null,"algolia_instant_css":null,"pace":null,"pace_css":null,"canvas_nest":null,"three":null,"three_waves":null,"canvas_lines":null,"canvas_sphere":null,"canvas_ribbon":null,"han":null,"needMoreShare2":null},"css":"css","js":"js","images":"images","version":"5.1.4"}}},"excerpt":"<h1 id=\"Chapter-8-Bootstrapping\"><a href=\"#Chapter-8-Bootstrapping\" class=\"headerlink\" title=\"Chapter 8 - Bootstrapping\"></a>Chapter 8 - Bootstrapping</h1>","more":"<p>In 8.1, the bootstrapping steps common to both server and client are handled by AbstractBootstrap, steps specific to clients/servers are handled by Bootstrap or ServerBootstrap.</p>\n<p>In 8.2, <em>Bootstrap</em> class is responsible to create Channels for clients and for applications using connectionless protocols.<br><img src=\"bootstrapping_process.png\" alt=\"Bootstrapping process\"><br>We must make sure to not mix OioEventLoopGroup with NioSocketChannel, it will throw exceptions.</p>\n<p>In 8.3, <em>ServerBootstrap</em> creates <em>ServerChannel</em> to create Channels which represents accepted connections.<br>In 8.4, we are able to bootstrap clients from a Channel, in case we need to act as a client to a third system while processing a client request. And one general guideline from Netty is to reuse EventLoops wherever possible to reduce the cost of thread creation.<br><img src=\"eventLoop_shared_among_channels.png\" alt=\"EventLoop shared among Channels\"><br>In 8.5, we know that we can add more than one ChannelHandlers during a bootstrap by adding them in the pipeline attached to the bootstrap.<br>In 8.6, we are able to use ChannelOptions to apply configurations for all Channels automatically, it includes low-level properties and buffer settings.<br>Netty also offers <em>AttributeMaps</em> to associate data item with both client and server Channels.<br>In 8.8, when we need to shut down the application, we will need to shut down the <em>EventLoopGroup</em>, which is a matter of calling <em>EventLoopGroup.shutdownGracefully()</em>, we can also call <em>Channel.close()</em>.</p>"},{"title":"Netty in Action Chapter 9","top":false,"cover":false,"toc":true,"mathjax":true,"date":"2020-04-17T12:23:59.000Z","summary":"Reading notes for Chapter 9 of &laquo;Netty in Action&raquo;","password":null,"_content":"\n# Chapter 9 - Unit test\n<!--more-->\nIn this chapter, it introduces the use of **EmbeddedChannel**, we can write data into the channel (no matter it's inbound or outbound data), and check the output at the end of the pipeline. It's convenient especially for unit tests.\n![EmbeddedChannel data flow](embedded_channel_workflow.png)\nIn doc of **EmbeddedChannel**, you may find that only this channel has an initialization method where you can put a list of handlers, which is easy for writing tests.\nIn [here](https://github.com/adrrrrrrrian/programs-for-language-learning/tree/master/Java/Netty/Chapter9), unit tests for inbound traffic, outbound traffic and exception handling are listed.","source":"_posts/Netty-in-Action-Chapter-9.md","raw":"---\ntitle: Netty in Action Chapter 9\ntop: false\ncover: false\ntoc: true\nmathjax: true\ndate: 2020-04-17 08:23:59\nsummary: Reading notes for Chapter 9 of &laquo;Netty in Action&raquo;\ncategories: Tech\ntags:\n    - Java\n    - Netty\npassword:\n---\n\n# Chapter 9 - Unit test\n<!--more-->\nIn this chapter, it introduces the use of **EmbeddedChannel**, we can write data into the channel (no matter it's inbound or outbound data), and check the output at the end of the pipeline. It's convenient especially for unit tests.\n![EmbeddedChannel data flow](embedded_channel_workflow.png)\nIn doc of **EmbeddedChannel**, you may find that only this channel has an initialization method where you can put a list of handlers, which is easy for writing tests.\nIn [here](https://github.com/adrrrrrrrian/programs-for-language-learning/tree/master/Java/Netty/Chapter9), unit tests for inbound traffic, outbound traffic and exception handling are listed.","slug":"Netty-in-Action-Chapter-9","published":1,"updated":"2020-05-05T15:12:40.500Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ckcxuqere001cfkjx2lvr1ag9","content":"<h1 id=\"Chapter-9-Unit-test\"><a href=\"#Chapter-9-Unit-test\" class=\"headerlink\" title=\"Chapter 9 - Unit test\"></a>Chapter 9 - Unit test</h1><a id=\"more\"></a>\n<p>In this chapter, it introduces the use of <strong>EmbeddedChannel</strong>, we can write data into the channel (no matter it&#39;s inbound or outbound data), and check the output at the end of the pipeline. It&#39;s convenient especially for unit tests.<br><img src=\"embedded_channel_workflow.png\" alt=\"EmbeddedChannel data flow\"><br>In doc of <strong>EmbeddedChannel</strong>, you may find that only this channel has an initialization method where you can put a list of handlers, which is easy for writing tests.<br>In <a href=\"https://github.com/adrrrrrrrian/programs-for-language-learning/tree/master/Java/Netty/Chapter9\" target=\"_blank\" rel=\"noopener\">here</a>, unit tests for inbound traffic, outbound traffic and exception handling are listed.</p>\n","site":{"data":{"next":{"override":false,"favicon":{"small":"/uploads/favicon-16x16.png","medium":"/uploads/favicon-32x32.png","apple_touch_icon":"/uploads/apple-touch-icon.png","safari_pinned_tab":"/uploads/favicon.png","ms_browserconfig":"/uploads/browserconfig.xml"},"keywords":"Hexo, NexT","rss":null,"footer":{"icon":"user","copyright":null,"powered":true,"theme":{"enable":true,"version":true}},"canonical":true,"seo":false,"index_with_subtitle":false,"menu":{"home":"/ || home","archives":"/archives/ || archive"},"menu_icons":{"enable":true},"scheme":"Pisces","social_icons":{"enable":true,"icons_only":false,"transition":false},"links_icon":"link","links_title":"Links","links_layout":"block","toc":{"enable":true,"number":true,"wrap":false},"sidebar":{"position":"left","display":"post","offset":12,"b2t":false,"scrollpercent":false,"onmobile":false},"scroll_to_more":true,"save_scroll":false,"excerpt_description":true,"auto_excerpt":{"enable":false,"length":30},"read_more_btn":true,"post_meta":{"item_text":true,"created_at":true,"updated_at":false,"categories":true},"post_wordcount":{"item_text":true,"wordcount":false,"min2read":false,"totalcount":false,"separated_meta":true},"post_copyright":{"enable":false,"license":"CC BY-NC-SA 3.0","license_url":"https://creativecommons.org/licenses/by-nc-sa/3.0/"},"mobile_layout_economy":false,"android_chrome_color":"#222","custom_logo":{"enabled":false,"image":null},"marked":{"smartypants":false},"highlight_theme":"normal","font":{"enable":false,"host":null,"global":{"external":true,"family":"Lato","size":null},"headings":{"external":true,"family":null,"size":null},"posts":{"external":true,"family":null},"logo":{"external":true,"family":null,"size":null},"codes":{"external":true,"family":null,"size":null}},"mathjax":{"enable":false,"per_page":false,"cdn":"//cdn.bootcss.com/mathjax/2.7.1/latest.js?config=TeX-AMS-MML_HTMLorMML"},"han":false,"disqus":{"enable":false,"shortname":null,"count":true},"changyan":{"enable":false,"appid":null,"appkey":null},"valine":{"enable":false,"appid":null,"appkey":null,"notify":false,"verify":false,"placeholder":"Just go go","avatar":"mm","guest_info":"nick,mail,link","pageSize":10},"gitment":{"enable":false,"mint":true,"count":true,"lazy":false,"cleanly":false,"language":null,"github_user":null,"github_repo":null,"client_id":null,"client_secret":null,"proxy_gateway":null,"redirect_protocol":null},"needmoreshare2":{"enable":false,"postbottom":{"enable":false,"options":{"iconStyle":"box","boxForm":"horizontal","position":"bottomCenter","networks":"Weibo,Wechat,Douban,QQZone,Twitter,Facebook"}},"float":{"enable":false,"options":{"iconStyle":"box","boxForm":"horizontal","position":"middleRight","networks":"Weibo,Wechat,Douban,QQZone,Twitter,Facebook"}}},"duoshuo_info":{"ua_enable":true,"admin_enable":false,"user_id":0},"facebook_sdk":{"enable":false,"app_id":null,"fb_admin":null,"like_button":null,"webmaster":null},"facebook_comments_plugin":{"enable":false,"num_of_posts":10,"width":"100%","scheme":"light"},"vkontakte_api":{"enable":false,"app_id":null,"like":true,"comments":true,"num_of_posts":10},"rating":{"enable":false,"id":null,"color":"fc6423"},"leancloud_visitors":{"enable":false,"app_id":null,"app_key":null},"firestore":{"enable":false,"collection":"articles","apiKey":null,"projectId":null,"bluebird":false},"busuanzi_count":{"enable":false,"site_uv":true,"site_uv_header":"<i class=\"fa fa-user\"></i>","site_uv_footer":null,"site_pv":true,"site_pv_header":"<i class=\"fa fa-eye\"></i>","site_pv_footer":null,"page_pv":true,"page_pv_header":"<i class=\"fa fa-file-o\"></i>","page_pv_footer":null},"baidu_push":false,"calendar":{"enable":false,"calendar_id":"<required>","api_key":"<required>","orderBy":"startTime","offsetMax":24,"offsetMin":4,"timeZone":null,"showDeleted":false,"singleEvents":true,"maxResults":250},"algolia_search":{"enable":false,"hits":{"per_page":10},"labels":{"input_placeholder":"Search for Posts","hits_empty":"We didn't find any results for the search: ${query}","hits_stats":"${hits} results found in ${time} ms"}},"local_search":{"enable":false,"trigger":"auto","top_n_per_article":1},"exturl":false,"note":{"style":"simple","icons":false,"border_radius":3,"light_bg_offset":0},"label":true,"tabs":{"enable":true,"transition":{"tabs":false,"labels":true},"border_radius":0},"motion":{"enable":true,"async":false,"transition":{"post_block":"fadeIn","post_header":"slideDownIn","post_body":"slideDownIn","coll_header":"slideLeftIn","sidebar":"slideUpIn"}},"fancybox":true,"pace":false,"pace_theme":"pace-theme-minimal","canvas_nest":false,"three_waves":false,"canvas_lines":false,"canvas_sphere":false,"canvas_ribbon":{"enable":false,"size":300,"alpha":0.6,"zIndex":-1},"vendors":{"_internal":"lib","jquery":null,"fancybox":null,"fancybox_css":null,"fastclick":null,"lazyload":null,"velocity":null,"velocity_ui":null,"ua_parser":null,"fontawesome":null,"algolia_instant_js":null,"algolia_instant_css":null,"pace":null,"pace_css":null,"canvas_nest":null,"three":null,"three_waves":null,"canvas_lines":null,"canvas_sphere":null,"canvas_ribbon":null,"han":null,"needMoreShare2":null},"css":"css","js":"js","images":"images","version":"5.1.4"}}},"excerpt":"<h1 id=\"Chapter-9-Unit-test\"><a href=\"#Chapter-9-Unit-test\" class=\"headerlink\" title=\"Chapter 9 - Unit test\"></a>Chapter 9 - Unit test</h1>","more":"<p>In this chapter, it introduces the use of <strong>EmbeddedChannel</strong>, we can write data into the channel (no matter it&#39;s inbound or outbound data), and check the output at the end of the pipeline. It&#39;s convenient especially for unit tests.<br><img src=\"embedded_channel_workflow.png\" alt=\"EmbeddedChannel data flow\"><br>In doc of <strong>EmbeddedChannel</strong>, you may find that only this channel has an initialization method where you can put a list of handlers, which is easy for writing tests.<br>In <a href=\"https://github.com/adrrrrrrrian/programs-for-language-learning/tree/master/Java/Netty/Chapter9\" target=\"_blank\" rel=\"noopener\">here</a>, unit tests for inbound traffic, outbound traffic and exception handling are listed.</p>"},{"title":"Spring security notes","top":false,"cover":false,"toc":true,"mathjax":true,"date":"2020-07-13T02:39:48.000Z","summary":null,"password":null,"_content":"\n\n# Authentication vs authorization\n<!--more-->\n\n\n### Authentication: who you are?\n\n​\t\t\t\n\n1. knowledge based authentication (username password)\n2. possession based authentication (token, text message)\n3. Multi-fact authentication (1+2)\n\n\n\n### Principle: an logged in user\n\n\n\n### Authorization: what do you want to do? Are you allowed to do this?\n\n​\tThis depends on the permission (granted authority) a user has.\n\n1. Authorities are fine grained\n2. Roles are coarse grained (a group of authorities)\n\nOne spring boot application can have multiple authorization providers (LDAP, JWT, Oauth, database auth, in memory auth, etc...), there is a authorization manager who handles the incoming authorization request and propagate that to the proper provider to authorize (the provider has to support the authorization type).\n\n\n\n\n\n# JWT - JSON Web Token\n\n\n\nRFC5741\n\n \n\n### **Session Token - reference token**\n\nToken is created and maintained by server side. \n\nClient passes the token to the server as part of every request.\n\nUsually it is stored in cookies\n\nIssues are: \n\n1. There isn't always just one server, usually there are multiple server nodes under a load balancer;\n2. If we use one shared cache (redis for example) to store the token, it will resolve 1, but introduces single point of failure.\n\n### **JSON Web Token - value token**\n\n**JWT only comes into the picture when authentication is complete.**\n\nServer will not give a reference of the details, instead it gives client the detail itself. \n\n![](image-20200703140104398.png)\n\nThere is a payload that is the core part of JWT, which is surrounded by a header and a signature to make it secure. Although there are chances that the JWT was stolen by others. To prevent that, you will need to be careful of how to transmit your JWT, like using HTTPS instead of HTTP, with a bunch of other authentication and authorization mechanisms, like OAuth.\n\n**How to disable JWTs?**  Have a blacklist of JWTs.\n\n## Structure of JWT\n\nThis [website](https://jwt.io/) will give you the idea of what JWT looks like.\n\nFor signature: \n\n```java\n// signature algorithm\ndata = base64urlEncode( header ) + \".\" + base64urlEncode( payload );\nsignature = Hash( data, secret );\n```\n\n## JWT pros and cons\n\n### PROS\n\n1. No database lookups\n2. \n\n### CONS\n\n1. non revocable (revoke them before they expire can be hard) - keep lifecycle short, revocation list.\n2. \n\n\n\n# OAuth\n\nOAuth is for authorization between services (microservices).\n\n![](image-20200705115002217.png)\n\n### Terminology\n\n1. Resource\n2. Resource owner\n3. Resource server\n4. Client\n\n\n\n### OAuth workflow\n\n1. Authorization code flow\n\n![](image-20200705115533934.png)\n\n- Resource owner sends request to client (I want you to go to my google drive account to get the photo and print it);\n- Client sends request to the authorization server (might be on the same backend server as the resource server)\n- Authorization server asks resource owner for the permission;\n- Owner sends the confirmation back to auth server;\n- After getting the permission from owner, authorization server will send client a **auth token**\n- After getting the **auth token**, client will make another request to auth server for **access token**\n- Auth server sends **access token** to the client\n- Client then uses the **access token** to access the resource in the resource server;\n- Resource server responds with the resource;\n\nThink of **access token** as the hotel room key, **auth token** as booking confirmation.\n\n2. Implicit flow\n\n- Resource owner sends request to client (I want you to go to my google drive account to get the photo and print it);\n- Client sends request to the authorization server (might be on the same backend server as the resource server)\n- Authorization server asks resource owner for the permission;\n- Owner sends the confirmation back to auth server;\n- After getting the permission from owner, authorization server will send client a **access token**\n- Client then uses the **access token** to access the resource in the resource server;\n- Resource server responds with the resource;\n\nIt's less secure than the first flow, and it's primarily used with short-lived access tokens.\n\n3. Client credentials flow (when the client is well trusted - confidential clients)\n\n![image-20200705122105774](image-20200705122105774.png)\n\n- Microservice 1 sends request to auth server;\n- Auth server replies with an **access token**;\n- Microservice 1 sends request to Microservice 2 with this token;\n- Microservice 2 will server the request;\n\n","source":"_posts/Spring-security-notes.md","raw":"---\ntitle: Spring security notes\ntop: false\ncover: false\ntoc: true\nmathjax: true\ndate: 2020-07-12 22:39:48\nsummary:\ncategories: Tech\ntags:\n    - Security\npassword:\n---\n\n\n# Authentication vs authorization\n<!--more-->\n\n\n### Authentication: who you are?\n\n​\t\t\t\n\n1. knowledge based authentication (username password)\n2. possession based authentication (token, text message)\n3. Multi-fact authentication (1+2)\n\n\n\n### Principle: an logged in user\n\n\n\n### Authorization: what do you want to do? Are you allowed to do this?\n\n​\tThis depends on the permission (granted authority) a user has.\n\n1. Authorities are fine grained\n2. Roles are coarse grained (a group of authorities)\n\nOne spring boot application can have multiple authorization providers (LDAP, JWT, Oauth, database auth, in memory auth, etc...), there is a authorization manager who handles the incoming authorization request and propagate that to the proper provider to authorize (the provider has to support the authorization type).\n\n\n\n\n\n# JWT - JSON Web Token\n\n\n\nRFC5741\n\n \n\n### **Session Token - reference token**\n\nToken is created and maintained by server side. \n\nClient passes the token to the server as part of every request.\n\nUsually it is stored in cookies\n\nIssues are: \n\n1. There isn't always just one server, usually there are multiple server nodes under a load balancer;\n2. If we use one shared cache (redis for example) to store the token, it will resolve 1, but introduces single point of failure.\n\n### **JSON Web Token - value token**\n\n**JWT only comes into the picture when authentication is complete.**\n\nServer will not give a reference of the details, instead it gives client the detail itself. \n\n![](image-20200703140104398.png)\n\nThere is a payload that is the core part of JWT, which is surrounded by a header and a signature to make it secure. Although there are chances that the JWT was stolen by others. To prevent that, you will need to be careful of how to transmit your JWT, like using HTTPS instead of HTTP, with a bunch of other authentication and authorization mechanisms, like OAuth.\n\n**How to disable JWTs?**  Have a blacklist of JWTs.\n\n## Structure of JWT\n\nThis [website](https://jwt.io/) will give you the idea of what JWT looks like.\n\nFor signature: \n\n```java\n// signature algorithm\ndata = base64urlEncode( header ) + \".\" + base64urlEncode( payload );\nsignature = Hash( data, secret );\n```\n\n## JWT pros and cons\n\n### PROS\n\n1. No database lookups\n2. \n\n### CONS\n\n1. non revocable (revoke them before they expire can be hard) - keep lifecycle short, revocation list.\n2. \n\n\n\n# OAuth\n\nOAuth is for authorization between services (microservices).\n\n![](image-20200705115002217.png)\n\n### Terminology\n\n1. Resource\n2. Resource owner\n3. Resource server\n4. Client\n\n\n\n### OAuth workflow\n\n1. Authorization code flow\n\n![](image-20200705115533934.png)\n\n- Resource owner sends request to client (I want you to go to my google drive account to get the photo and print it);\n- Client sends request to the authorization server (might be on the same backend server as the resource server)\n- Authorization server asks resource owner for the permission;\n- Owner sends the confirmation back to auth server;\n- After getting the permission from owner, authorization server will send client a **auth token**\n- After getting the **auth token**, client will make another request to auth server for **access token**\n- Auth server sends **access token** to the client\n- Client then uses the **access token** to access the resource in the resource server;\n- Resource server responds with the resource;\n\nThink of **access token** as the hotel room key, **auth token** as booking confirmation.\n\n2. Implicit flow\n\n- Resource owner sends request to client (I want you to go to my google drive account to get the photo and print it);\n- Client sends request to the authorization server (might be on the same backend server as the resource server)\n- Authorization server asks resource owner for the permission;\n- Owner sends the confirmation back to auth server;\n- After getting the permission from owner, authorization server will send client a **access token**\n- Client then uses the **access token** to access the resource in the resource server;\n- Resource server responds with the resource;\n\nIt's less secure than the first flow, and it's primarily used with short-lived access tokens.\n\n3. Client credentials flow (when the client is well trusted - confidential clients)\n\n![image-20200705122105774](image-20200705122105774.png)\n\n- Microservice 1 sends request to auth server;\n- Auth server replies with an **access token**;\n- Microservice 1 sends request to Microservice 2 with this token;\n- Microservice 2 will server the request;\n\n","slug":"Spring-security-notes","published":1,"updated":"2020-07-13T02:46:20.090Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ckcxuqero001gfkjxtsjph8yd","content":"<h1 id=\"Authentication-vs-authorization\"><a href=\"#Authentication-vs-authorization\" class=\"headerlink\" title=\"Authentication vs authorization\"></a>Authentication vs authorization</h1><a id=\"more\"></a>\n\n\n<h3 id=\"Authentication-who-you-are\"><a href=\"#Authentication-who-you-are\" class=\"headerlink\" title=\"Authentication: who you are?\"></a>Authentication: who you are?</h3><p>​            </p>\n<ol>\n<li>knowledge based authentication (username password)</li>\n<li>possession based authentication (token, text message)</li>\n<li>Multi-fact authentication (1+2)</li>\n</ol>\n<h3 id=\"Principle-an-logged-in-user\"><a href=\"#Principle-an-logged-in-user\" class=\"headerlink\" title=\"Principle: an logged in user\"></a>Principle: an logged in user</h3><h3 id=\"Authorization-what-do-you-want-to-do-Are-you-allowed-to-do-this\"><a href=\"#Authorization-what-do-you-want-to-do-Are-you-allowed-to-do-this\" class=\"headerlink\" title=\"Authorization: what do you want to do? Are you allowed to do this?\"></a>Authorization: what do you want to do? Are you allowed to do this?</h3><p>​    This depends on the permission (granted authority) a user has.</p>\n<ol>\n<li>Authorities are fine grained</li>\n<li>Roles are coarse grained (a group of authorities)</li>\n</ol>\n<p>One spring boot application can have multiple authorization providers (LDAP, JWT, Oauth, database auth, in memory auth, etc...), there is a authorization manager who handles the incoming authorization request and propagate that to the proper provider to authorize (the provider has to support the authorization type).</p>\n<h1 id=\"JWT-JSON-Web-Token\"><a href=\"#JWT-JSON-Web-Token\" class=\"headerlink\" title=\"JWT - JSON Web Token\"></a>JWT - JSON Web Token</h1><p>RFC5741</p>\n<h3 id=\"Session-Token-reference-token\"><a href=\"#Session-Token-reference-token\" class=\"headerlink\" title=\"Session Token - reference token\"></a><strong>Session Token - reference token</strong></h3><p>Token is created and maintained by server side. </p>\n<p>Client passes the token to the server as part of every request.</p>\n<p>Usually it is stored in cookies</p>\n<p>Issues are: </p>\n<ol>\n<li>There isn&#39;t always just one server, usually there are multiple server nodes under a load balancer;</li>\n<li>If we use one shared cache (redis for example) to store the token, it will resolve 1, but introduces single point of failure.</li>\n</ol>\n<h3 id=\"JSON-Web-Token-value-token\"><a href=\"#JSON-Web-Token-value-token\" class=\"headerlink\" title=\"JSON Web Token - value token\"></a><strong>JSON Web Token - value token</strong></h3><p><strong>JWT only comes into the picture when authentication is complete.</strong></p>\n<p>Server will not give a reference of the details, instead it gives client the detail itself. </p>\n<p><img src=\"image-20200703140104398.png\" alt></p>\n<p>There is a payload that is the core part of JWT, which is surrounded by a header and a signature to make it secure. Although there are chances that the JWT was stolen by others. To prevent that, you will need to be careful of how to transmit your JWT, like using HTTPS instead of HTTP, with a bunch of other authentication and authorization mechanisms, like OAuth.</p>\n<p><strong>How to disable JWTs?</strong>  Have a blacklist of JWTs.</p>\n<h2 id=\"Structure-of-JWT\"><a href=\"#Structure-of-JWT\" class=\"headerlink\" title=\"Structure of JWT\"></a>Structure of JWT</h2><p>This <a href=\"https://jwt.io/\" target=\"_blank\" rel=\"noopener\">website</a> will give you the idea of what JWT looks like.</p>\n<p>For signature: </p>\n<pre class=\"line-numbers language-java\"><code class=\"language-java\"><span class=\"token comment\" spellcheck=\"true\">// signature algorithm</span>\ndata <span class=\"token operator\">=</span> <span class=\"token function\">base64urlEncode</span><span class=\"token punctuation\">(</span> header <span class=\"token punctuation\">)</span> <span class=\"token operator\">+</span> <span class=\"token string\">\".\"</span> <span class=\"token operator\">+</span> <span class=\"token function\">base64urlEncode</span><span class=\"token punctuation\">(</span> payload <span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\nsignature <span class=\"token operator\">=</span> <span class=\"token function\">Hash</span><span class=\"token punctuation\">(</span> data<span class=\"token punctuation\">,</span> secret <span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span></span></code></pre>\n<h2 id=\"JWT-pros-and-cons\"><a href=\"#JWT-pros-and-cons\" class=\"headerlink\" title=\"JWT pros and cons\"></a>JWT pros and cons</h2><h3 id=\"PROS\"><a href=\"#PROS\" class=\"headerlink\" title=\"PROS\"></a>PROS</h3><ol>\n<li>No database lookups</li>\n<li></li>\n</ol>\n<h3 id=\"CONS\"><a href=\"#CONS\" class=\"headerlink\" title=\"CONS\"></a>CONS</h3><ol>\n<li>non revocable (revoke them before they expire can be hard) - keep lifecycle short, revocation list.</li>\n<li></li>\n</ol>\n<h1 id=\"OAuth\"><a href=\"#OAuth\" class=\"headerlink\" title=\"OAuth\"></a>OAuth</h1><p>OAuth is for authorization between services (microservices).</p>\n<p><img src=\"image-20200705115002217.png\" alt></p>\n<h3 id=\"Terminology\"><a href=\"#Terminology\" class=\"headerlink\" title=\"Terminology\"></a>Terminology</h3><ol>\n<li>Resource</li>\n<li>Resource owner</li>\n<li>Resource server</li>\n<li>Client</li>\n</ol>\n<h3 id=\"OAuth-workflow\"><a href=\"#OAuth-workflow\" class=\"headerlink\" title=\"OAuth workflow\"></a>OAuth workflow</h3><ol>\n<li>Authorization code flow</li>\n</ol>\n<p><img src=\"image-20200705115533934.png\" alt></p>\n<ul>\n<li>Resource owner sends request to client (I want you to go to my google drive account to get the photo and print it);</li>\n<li>Client sends request to the authorization server (might be on the same backend server as the resource server)</li>\n<li>Authorization server asks resource owner for the permission;</li>\n<li>Owner sends the confirmation back to auth server;</li>\n<li>After getting the permission from owner, authorization server will send client a <strong>auth token</strong></li>\n<li>After getting the <strong>auth token</strong>, client will make another request to auth server for <strong>access token</strong></li>\n<li>Auth server sends <strong>access token</strong> to the client</li>\n<li>Client then uses the <strong>access token</strong> to access the resource in the resource server;</li>\n<li>Resource server responds with the resource;</li>\n</ul>\n<p>Think of <strong>access token</strong> as the hotel room key, <strong>auth token</strong> as booking confirmation.</p>\n<ol start=\"2\">\n<li>Implicit flow</li>\n</ol>\n<ul>\n<li>Resource owner sends request to client (I want you to go to my google drive account to get the photo and print it);</li>\n<li>Client sends request to the authorization server (might be on the same backend server as the resource server)</li>\n<li>Authorization server asks resource owner for the permission;</li>\n<li>Owner sends the confirmation back to auth server;</li>\n<li>After getting the permission from owner, authorization server will send client a <strong>access token</strong></li>\n<li>Client then uses the <strong>access token</strong> to access the resource in the resource server;</li>\n<li>Resource server responds with the resource;</li>\n</ul>\n<p>It&#39;s less secure than the first flow, and it&#39;s primarily used with short-lived access tokens.</p>\n<ol start=\"3\">\n<li>Client credentials flow (when the client is well trusted - confidential clients)</li>\n</ol>\n<p><img src=\"image-20200705122105774.png\" alt=\"image-20200705122105774\"></p>\n<ul>\n<li>Microservice 1 sends request to auth server;</li>\n<li>Auth server replies with an <strong>access token</strong>;</li>\n<li>Microservice 1 sends request to Microservice 2 with this token;</li>\n<li>Microservice 2 will server the request;</li>\n</ul>\n","site":{"data":{"next":{"override":false,"favicon":{"small":"/uploads/favicon-16x16.png","medium":"/uploads/favicon-32x32.png","apple_touch_icon":"/uploads/apple-touch-icon.png","safari_pinned_tab":"/uploads/favicon.png","ms_browserconfig":"/uploads/browserconfig.xml"},"keywords":"Hexo, NexT","rss":null,"footer":{"icon":"user","copyright":null,"powered":true,"theme":{"enable":true,"version":true}},"canonical":true,"seo":false,"index_with_subtitle":false,"menu":{"home":"/ || home","archives":"/archives/ || archive"},"menu_icons":{"enable":true},"scheme":"Pisces","social_icons":{"enable":true,"icons_only":false,"transition":false},"links_icon":"link","links_title":"Links","links_layout":"block","toc":{"enable":true,"number":true,"wrap":false},"sidebar":{"position":"left","display":"post","offset":12,"b2t":false,"scrollpercent":false,"onmobile":false},"scroll_to_more":true,"save_scroll":false,"excerpt_description":true,"auto_excerpt":{"enable":false,"length":30},"read_more_btn":true,"post_meta":{"item_text":true,"created_at":true,"updated_at":false,"categories":true},"post_wordcount":{"item_text":true,"wordcount":false,"min2read":false,"totalcount":false,"separated_meta":true},"post_copyright":{"enable":false,"license":"CC BY-NC-SA 3.0","license_url":"https://creativecommons.org/licenses/by-nc-sa/3.0/"},"mobile_layout_economy":false,"android_chrome_color":"#222","custom_logo":{"enabled":false,"image":null},"marked":{"smartypants":false},"highlight_theme":"normal","font":{"enable":false,"host":null,"global":{"external":true,"family":"Lato","size":null},"headings":{"external":true,"family":null,"size":null},"posts":{"external":true,"family":null},"logo":{"external":true,"family":null,"size":null},"codes":{"external":true,"family":null,"size":null}},"mathjax":{"enable":false,"per_page":false,"cdn":"//cdn.bootcss.com/mathjax/2.7.1/latest.js?config=TeX-AMS-MML_HTMLorMML"},"han":false,"disqus":{"enable":false,"shortname":null,"count":true},"changyan":{"enable":false,"appid":null,"appkey":null},"valine":{"enable":false,"appid":null,"appkey":null,"notify":false,"verify":false,"placeholder":"Just go go","avatar":"mm","guest_info":"nick,mail,link","pageSize":10},"gitment":{"enable":false,"mint":true,"count":true,"lazy":false,"cleanly":false,"language":null,"github_user":null,"github_repo":null,"client_id":null,"client_secret":null,"proxy_gateway":null,"redirect_protocol":null},"needmoreshare2":{"enable":false,"postbottom":{"enable":false,"options":{"iconStyle":"box","boxForm":"horizontal","position":"bottomCenter","networks":"Weibo,Wechat,Douban,QQZone,Twitter,Facebook"}},"float":{"enable":false,"options":{"iconStyle":"box","boxForm":"horizontal","position":"middleRight","networks":"Weibo,Wechat,Douban,QQZone,Twitter,Facebook"}}},"duoshuo_info":{"ua_enable":true,"admin_enable":false,"user_id":0},"facebook_sdk":{"enable":false,"app_id":null,"fb_admin":null,"like_button":null,"webmaster":null},"facebook_comments_plugin":{"enable":false,"num_of_posts":10,"width":"100%","scheme":"light"},"vkontakte_api":{"enable":false,"app_id":null,"like":true,"comments":true,"num_of_posts":10},"rating":{"enable":false,"id":null,"color":"fc6423"},"leancloud_visitors":{"enable":false,"app_id":null,"app_key":null},"firestore":{"enable":false,"collection":"articles","apiKey":null,"projectId":null,"bluebird":false},"busuanzi_count":{"enable":false,"site_uv":true,"site_uv_header":"<i class=\"fa fa-user\"></i>","site_uv_footer":null,"site_pv":true,"site_pv_header":"<i class=\"fa fa-eye\"></i>","site_pv_footer":null,"page_pv":true,"page_pv_header":"<i class=\"fa fa-file-o\"></i>","page_pv_footer":null},"baidu_push":false,"calendar":{"enable":false,"calendar_id":"<required>","api_key":"<required>","orderBy":"startTime","offsetMax":24,"offsetMin":4,"timeZone":null,"showDeleted":false,"singleEvents":true,"maxResults":250},"algolia_search":{"enable":false,"hits":{"per_page":10},"labels":{"input_placeholder":"Search for Posts","hits_empty":"We didn't find any results for the search: ${query}","hits_stats":"${hits} results found in ${time} ms"}},"local_search":{"enable":false,"trigger":"auto","top_n_per_article":1},"exturl":false,"note":{"style":"simple","icons":false,"border_radius":3,"light_bg_offset":0},"label":true,"tabs":{"enable":true,"transition":{"tabs":false,"labels":true},"border_radius":0},"motion":{"enable":true,"async":false,"transition":{"post_block":"fadeIn","post_header":"slideDownIn","post_body":"slideDownIn","coll_header":"slideLeftIn","sidebar":"slideUpIn"}},"fancybox":true,"pace":false,"pace_theme":"pace-theme-minimal","canvas_nest":false,"three_waves":false,"canvas_lines":false,"canvas_sphere":false,"canvas_ribbon":{"enable":false,"size":300,"alpha":0.6,"zIndex":-1},"vendors":{"_internal":"lib","jquery":null,"fancybox":null,"fancybox_css":null,"fastclick":null,"lazyload":null,"velocity":null,"velocity_ui":null,"ua_parser":null,"fontawesome":null,"algolia_instant_js":null,"algolia_instant_css":null,"pace":null,"pace_css":null,"canvas_nest":null,"three":null,"three_waves":null,"canvas_lines":null,"canvas_sphere":null,"canvas_ribbon":null,"han":null,"needMoreShare2":null},"css":"css","js":"js","images":"images","version":"5.1.4"}}},"excerpt":"<h1 id=\"Authentication-vs-authorization\"><a href=\"#Authentication-vs-authorization\" class=\"headerlink\" title=\"Authentication vs authorization\"></a>Authentication vs authorization</h1>","more":"<h3 id=\"Authentication-who-you-are\"><a href=\"#Authentication-who-you-are\" class=\"headerlink\" title=\"Authentication: who you are?\"></a>Authentication: who you are?</h3><p>​            </p>\n<ol>\n<li>knowledge based authentication (username password)</li>\n<li>possession based authentication (token, text message)</li>\n<li>Multi-fact authentication (1+2)</li>\n</ol>\n<h3 id=\"Principle-an-logged-in-user\"><a href=\"#Principle-an-logged-in-user\" class=\"headerlink\" title=\"Principle: an logged in user\"></a>Principle: an logged in user</h3><h3 id=\"Authorization-what-do-you-want-to-do-Are-you-allowed-to-do-this\"><a href=\"#Authorization-what-do-you-want-to-do-Are-you-allowed-to-do-this\" class=\"headerlink\" title=\"Authorization: what do you want to do? Are you allowed to do this?\"></a>Authorization: what do you want to do? Are you allowed to do this?</h3><p>​    This depends on the permission (granted authority) a user has.</p>\n<ol>\n<li>Authorities are fine grained</li>\n<li>Roles are coarse grained (a group of authorities)</li>\n</ol>\n<p>One spring boot application can have multiple authorization providers (LDAP, JWT, Oauth, database auth, in memory auth, etc...), there is a authorization manager who handles the incoming authorization request and propagate that to the proper provider to authorize (the provider has to support the authorization type).</p>\n<h1 id=\"JWT-JSON-Web-Token\"><a href=\"#JWT-JSON-Web-Token\" class=\"headerlink\" title=\"JWT - JSON Web Token\"></a>JWT - JSON Web Token</h1><p>RFC5741</p>\n<h3 id=\"Session-Token-reference-token\"><a href=\"#Session-Token-reference-token\" class=\"headerlink\" title=\"Session Token - reference token\"></a><strong>Session Token - reference token</strong></h3><p>Token is created and maintained by server side. </p>\n<p>Client passes the token to the server as part of every request.</p>\n<p>Usually it is stored in cookies</p>\n<p>Issues are: </p>\n<ol>\n<li>There isn&#39;t always just one server, usually there are multiple server nodes under a load balancer;</li>\n<li>If we use one shared cache (redis for example) to store the token, it will resolve 1, but introduces single point of failure.</li>\n</ol>\n<h3 id=\"JSON-Web-Token-value-token\"><a href=\"#JSON-Web-Token-value-token\" class=\"headerlink\" title=\"JSON Web Token - value token\"></a><strong>JSON Web Token - value token</strong></h3><p><strong>JWT only comes into the picture when authentication is complete.</strong></p>\n<p>Server will not give a reference of the details, instead it gives client the detail itself. </p>\n<p><img src=\"image-20200703140104398.png\" alt></p>\n<p>There is a payload that is the core part of JWT, which is surrounded by a header and a signature to make it secure. Although there are chances that the JWT was stolen by others. To prevent that, you will need to be careful of how to transmit your JWT, like using HTTPS instead of HTTP, with a bunch of other authentication and authorization mechanisms, like OAuth.</p>\n<p><strong>How to disable JWTs?</strong>  Have a blacklist of JWTs.</p>\n<h2 id=\"Structure-of-JWT\"><a href=\"#Structure-of-JWT\" class=\"headerlink\" title=\"Structure of JWT\"></a>Structure of JWT</h2><p>This <a href=\"https://jwt.io/\" target=\"_blank\" rel=\"noopener\">website</a> will give you the idea of what JWT looks like.</p>\n<p>For signature: </p>\n<pre><code class=\"java\">// signature algorithm\ndata = base64urlEncode( header ) + &quot;.&quot; + base64urlEncode( payload );\nsignature = Hash( data, secret );</code></pre>\n<h2 id=\"JWT-pros-and-cons\"><a href=\"#JWT-pros-and-cons\" class=\"headerlink\" title=\"JWT pros and cons\"></a>JWT pros and cons</h2><h3 id=\"PROS\"><a href=\"#PROS\" class=\"headerlink\" title=\"PROS\"></a>PROS</h3><ol>\n<li>No database lookups</li>\n<li></li>\n</ol>\n<h3 id=\"CONS\"><a href=\"#CONS\" class=\"headerlink\" title=\"CONS\"></a>CONS</h3><ol>\n<li>non revocable (revoke them before they expire can be hard) - keep lifecycle short, revocation list.</li>\n<li></li>\n</ol>\n<h1 id=\"OAuth\"><a href=\"#OAuth\" class=\"headerlink\" title=\"OAuth\"></a>OAuth</h1><p>OAuth is for authorization between services (microservices).</p>\n<p><img src=\"image-20200705115002217.png\" alt></p>\n<h3 id=\"Terminology\"><a href=\"#Terminology\" class=\"headerlink\" title=\"Terminology\"></a>Terminology</h3><ol>\n<li>Resource</li>\n<li>Resource owner</li>\n<li>Resource server</li>\n<li>Client</li>\n</ol>\n<h3 id=\"OAuth-workflow\"><a href=\"#OAuth-workflow\" class=\"headerlink\" title=\"OAuth workflow\"></a>OAuth workflow</h3><ol>\n<li>Authorization code flow</li>\n</ol>\n<p><img src=\"image-20200705115533934.png\" alt></p>\n<ul>\n<li>Resource owner sends request to client (I want you to go to my google drive account to get the photo and print it);</li>\n<li>Client sends request to the authorization server (might be on the same backend server as the resource server)</li>\n<li>Authorization server asks resource owner for the permission;</li>\n<li>Owner sends the confirmation back to auth server;</li>\n<li>After getting the permission from owner, authorization server will send client a <strong>auth token</strong></li>\n<li>After getting the <strong>auth token</strong>, client will make another request to auth server for <strong>access token</strong></li>\n<li>Auth server sends <strong>access token</strong> to the client</li>\n<li>Client then uses the <strong>access token</strong> to access the resource in the resource server;</li>\n<li>Resource server responds with the resource;</li>\n</ul>\n<p>Think of <strong>access token</strong> as the hotel room key, <strong>auth token</strong> as booking confirmation.</p>\n<ol start=\"2\">\n<li>Implicit flow</li>\n</ol>\n<ul>\n<li>Resource owner sends request to client (I want you to go to my google drive account to get the photo and print it);</li>\n<li>Client sends request to the authorization server (might be on the same backend server as the resource server)</li>\n<li>Authorization server asks resource owner for the permission;</li>\n<li>Owner sends the confirmation back to auth server;</li>\n<li>After getting the permission from owner, authorization server will send client a <strong>access token</strong></li>\n<li>Client then uses the <strong>access token</strong> to access the resource in the resource server;</li>\n<li>Resource server responds with the resource;</li>\n</ul>\n<p>It&#39;s less secure than the first flow, and it&#39;s primarily used with short-lived access tokens.</p>\n<ol start=\"3\">\n<li>Client credentials flow (when the client is well trusted - confidential clients)</li>\n</ol>\n<p><img src=\"image-20200705122105774.png\" alt=\"image-20200705122105774\"></p>\n<ul>\n<li>Microservice 1 sends request to auth server;</li>\n<li>Auth server replies with an <strong>access token</strong>;</li>\n<li>Microservice 1 sends request to Microservice 2 with this token;</li>\n<li>Microservice 2 will server the request;</li>\n</ul>"},{"title":"Technology Sharing May 2020","top":false,"cover":false,"toc":true,"mathjax":true,"date":"2020-05-31T20:46:00.000Z","summary":null,"password":null,"_content":"\n\n\n1.  [AWS Virtualization with Anthony Liguori](https://softwareengineeringdaily.com/2020/05/15/aws-virtualization-with-anthony-liguori/)\n<!--more-->\n\n    这篇podcast 谈论了AWS 虚拟化技术的演进史，从EC2谈起，到之后的Outpost，Fargate，Serverless。\n    \n    最开始EC2用的虚拟化技术是Zen，后来他们开始构建自己的硬件系统，也就是Nitro Project。他们最初的希望是它能够很大程度得简化系统，从而改善性能。\n    \n    谈及Lambda的时候，Anthony谈到了他们最重视的是安全，而EC2 instance是他们安全方面非常成熟的产品，也就自然成为了lambda使用的平台。每个lambda function都是一个EC2 instance。\n    \n    讨论到底层架构，他们说到Nitro 就是一个bare-metal的系统。Firecracker在其之上运行，跑一些程式，一些在Firecracker的代码允许一些程式去启动和执行。Hypervisor是一个平台，你可以在上面启动不同的虚拟机；VMM（virtual machine monitor）是一个针对那些虚拟机的监控器。那Nitro就是Hypervisor，而Firecracker就是VMM。\n    \n    他们针对Fargate和Serverless的优化，简单点来说，就是在启动过程中去除那些陈旧的，对于container不重要的东西，让启动时间减少。\n    \n    Anthony提到，quantum computing是下一个可以改变世界的新技术。\n    \n2.  [Encouraging a Culture of Written Communication](https://www.mcls.io/blog/encouraging-a-culture-of-written-communication)\n    \n\t这篇文章提到了书面交流的文化，我认为对于大多数在特殊时期在家上班的人来说，比较受用。\n\n\t很多人觉得书面交流需要比较正式，但是那些主要是针对更广大的受众，或者是针对上级的交流。对于组内交流或者是问问题，书面交流不一定非要那么正式，错别字，语病都是可以被允许的。\n\n\t书面交流的另一个好处：它容易被搜寻到。但另一个问题是，我们需要有一个平台去存储这些信息和知识，这样人们不会因为太多信息源而迷失方向，书写者也不会因为它而耽误书写的进度。\n\n\t但是太过于依赖书面交流也有不好的地方，在有些时候，一个视频电话可能解决问题更快，更方便。不要在这上面墨守成规。\n\n\tThinking out loud。在你对有些事情不确定的情况下，可以把思路写在公用的频道里，让别人也看到，这样别人可以给你反馈。在软件事故发生的时候，这会变得很有用，大家会快速得交流，也就能够很快得对事故有一个一致的理解和解决方案。没有私人对话或者视频会话，这会变得更搞笑。\n\n3.  [Soft Skills: Gaining Technical Breadth](https://www.youtube.com/watch?v=vRplv975ce0&list=PLdsOZAx8I5umhnn5LLTNJbFgwA3xbycar&index=77)\n\n\t这个视频谈及了如何增长技术广度，如图所示，“你知道的技术”被认为是技术深度，“你知道你不知道的技术”被认为是技术广度。作为一个相当架构师的人来说，我们需要增加技术广度，然后增加技术深度。\n![Tech pyramid](pyramid.png)\n\tMark提到三个信息源：InfoQ，Thoughtworks Tech Radar，DZone。\n\n\t他每天的习惯是花20分钟浏览收到的订阅邮件，然后如果有感兴趣的内容，会标注下，留到晚上或者周末细读。日积月累后，就会增长技术广度。\n\n4. [Controlled Chaos: Taming Organic, Federated Growth of Microservices](https://www.infoq.com/presentations/microservices-federated-growth/)\n\n\tThis talk mentions that microservices architecture is evolving through organic federated growth. The agility that the enterprises crave ends up with an architecture that we can't control. And in such a distributed architecture, metrics and tracing might not work that well. One interesting thing he mentioned is that building distributed systems may force a new waterfall thinking on devs as there is a long ramp before you can deploy that. Instead, build resilient federations based on DDD, and compensation strategy if anything happens. For operators, rapid detect-react loops are really important, which should be based on golden signals(requests, latency, concurrency, bandwidth), metrics, etc...","source":"_posts/Technology-Sharing-May-2020.md","raw":"---\ntitle: Technology Sharing May 2020\ntop: false\ncover: false\ntoc: true\nmathjax: true\ndate: 2020-05-31 16:46:00\nsummary:\ntags: [Sharing, Architecture]\ncategories: [Tech]\npassword:\n---\n\n\n\n1.  [AWS Virtualization with Anthony Liguori](https://softwareengineeringdaily.com/2020/05/15/aws-virtualization-with-anthony-liguori/)\n<!--more-->\n\n    这篇podcast 谈论了AWS 虚拟化技术的演进史，从EC2谈起，到之后的Outpost，Fargate，Serverless。\n    \n    最开始EC2用的虚拟化技术是Zen，后来他们开始构建自己的硬件系统，也就是Nitro Project。他们最初的希望是它能够很大程度得简化系统，从而改善性能。\n    \n    谈及Lambda的时候，Anthony谈到了他们最重视的是安全，而EC2 instance是他们安全方面非常成熟的产品，也就自然成为了lambda使用的平台。每个lambda function都是一个EC2 instance。\n    \n    讨论到底层架构，他们说到Nitro 就是一个bare-metal的系统。Firecracker在其之上运行，跑一些程式，一些在Firecracker的代码允许一些程式去启动和执行。Hypervisor是一个平台，你可以在上面启动不同的虚拟机；VMM（virtual machine monitor）是一个针对那些虚拟机的监控器。那Nitro就是Hypervisor，而Firecracker就是VMM。\n    \n    他们针对Fargate和Serverless的优化，简单点来说，就是在启动过程中去除那些陈旧的，对于container不重要的东西，让启动时间减少。\n    \n    Anthony提到，quantum computing是下一个可以改变世界的新技术。\n    \n2.  [Encouraging a Culture of Written Communication](https://www.mcls.io/blog/encouraging-a-culture-of-written-communication)\n    \n\t这篇文章提到了书面交流的文化，我认为对于大多数在特殊时期在家上班的人来说，比较受用。\n\n\t很多人觉得书面交流需要比较正式，但是那些主要是针对更广大的受众，或者是针对上级的交流。对于组内交流或者是问问题，书面交流不一定非要那么正式，错别字，语病都是可以被允许的。\n\n\t书面交流的另一个好处：它容易被搜寻到。但另一个问题是，我们需要有一个平台去存储这些信息和知识，这样人们不会因为太多信息源而迷失方向，书写者也不会因为它而耽误书写的进度。\n\n\t但是太过于依赖书面交流也有不好的地方，在有些时候，一个视频电话可能解决问题更快，更方便。不要在这上面墨守成规。\n\n\tThinking out loud。在你对有些事情不确定的情况下，可以把思路写在公用的频道里，让别人也看到，这样别人可以给你反馈。在软件事故发生的时候，这会变得很有用，大家会快速得交流，也就能够很快得对事故有一个一致的理解和解决方案。没有私人对话或者视频会话，这会变得更搞笑。\n\n3.  [Soft Skills: Gaining Technical Breadth](https://www.youtube.com/watch?v=vRplv975ce0&list=PLdsOZAx8I5umhnn5LLTNJbFgwA3xbycar&index=77)\n\n\t这个视频谈及了如何增长技术广度，如图所示，“你知道的技术”被认为是技术深度，“你知道你不知道的技术”被认为是技术广度。作为一个相当架构师的人来说，我们需要增加技术广度，然后增加技术深度。\n![Tech pyramid](pyramid.png)\n\tMark提到三个信息源：InfoQ，Thoughtworks Tech Radar，DZone。\n\n\t他每天的习惯是花20分钟浏览收到的订阅邮件，然后如果有感兴趣的内容，会标注下，留到晚上或者周末细读。日积月累后，就会增长技术广度。\n\n4. [Controlled Chaos: Taming Organic, Federated Growth of Microservices](https://www.infoq.com/presentations/microservices-federated-growth/)\n\n\tThis talk mentions that microservices architecture is evolving through organic federated growth. The agility that the enterprises crave ends up with an architecture that we can't control. And in such a distributed architecture, metrics and tracing might not work that well. One interesting thing he mentioned is that building distributed systems may force a new waterfall thinking on devs as there is a long ramp before you can deploy that. Instead, build resilient federations based on DDD, and compensation strategy if anything happens. For operators, rapid detect-react loops are really important, which should be based on golden signals(requests, latency, concurrency, bandwidth), metrics, etc...","slug":"Technology-Sharing-May-2020","published":1,"updated":"2020-05-31T20:58:38.287Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ckcxuqerv001jfkjxm5h5v4jj","content":"<ol>\n<li><p><a href=\"https://softwareengineeringdaily.com/2020/05/15/aws-virtualization-with-anthony-liguori/\" target=\"_blank\" rel=\"noopener\">AWS Virtualization with Anthony Liguori</a></p>\n<a id=\"more\"></a>\n\n<p>这篇podcast 谈论了AWS 虚拟化技术的演进史，从EC2谈起，到之后的Outpost，Fargate，Serverless。</p>\n<p>最开始EC2用的虚拟化技术是Zen，后来他们开始构建自己的硬件系统，也就是Nitro Project。他们最初的希望是它能够很大程度得简化系统，从而改善性能。</p>\n<p>谈及Lambda的时候，Anthony谈到了他们最重视的是安全，而EC2 instance是他们安全方面非常成熟的产品，也就自然成为了lambda使用的平台。每个lambda function都是一个EC2 instance。</p>\n<p>讨论到底层架构，他们说到Nitro 就是一个bare-metal的系统。Firecracker在其之上运行，跑一些程式，一些在Firecracker的代码允许一些程式去启动和执行。Hypervisor是一个平台，你可以在上面启动不同的虚拟机；VMM（virtual machine monitor）是一个针对那些虚拟机的监控器。那Nitro就是Hypervisor，而Firecracker就是VMM。</p>\n<p>他们针对Fargate和Serverless的优化，简单点来说，就是在启动过程中去除那些陈旧的，对于container不重要的东西，让启动时间减少。</p>\n<p>Anthony提到，quantum computing是下一个可以改变世界的新技术。</p>\n</li>\n<li><p><a href=\"https://www.mcls.io/blog/encouraging-a-culture-of-written-communication\" target=\"_blank\" rel=\"noopener\">Encouraging a Culture of Written Communication</a></p>\n<p>这篇文章提到了书面交流的文化，我认为对于大多数在特殊时期在家上班的人来说，比较受用。</p>\n<p>很多人觉得书面交流需要比较正式，但是那些主要是针对更广大的受众，或者是针对上级的交流。对于组内交流或者是问问题，书面交流不一定非要那么正式，错别字，语病都是可以被允许的。</p>\n<p>书面交流的另一个好处：它容易被搜寻到。但另一个问题是，我们需要有一个平台去存储这些信息和知识，这样人们不会因为太多信息源而迷失方向，书写者也不会因为它而耽误书写的进度。</p>\n<p>但是太过于依赖书面交流也有不好的地方，在有些时候，一个视频电话可能解决问题更快，更方便。不要在这上面墨守成规。</p>\n<p>Thinking out loud。在你对有些事情不确定的情况下，可以把思路写在公用的频道里，让别人也看到，这样别人可以给你反馈。在软件事故发生的时候，这会变得很有用，大家会快速得交流，也就能够很快得对事故有一个一致的理解和解决方案。没有私人对话或者视频会话，这会变得更搞笑。</p>\n</li>\n<li><p><a href=\"https://www.youtube.com/watch?v=vRplv975ce0&list=PLdsOZAx8I5umhnn5LLTNJbFgwA3xbycar&index=77\" target=\"_blank\" rel=\"noopener\">Soft Skills: Gaining Technical Breadth</a></p>\n<p>这个视频谈及了如何增长技术广度，如图所示，“你知道的技术”被认为是技术深度，“你知道你不知道的技术”被认为是技术广度。作为一个相当架构师的人来说，我们需要增加技术广度，然后增加技术深度。<br><img src=\"pyramid.png\" alt=\"Tech pyramid\"><br>Mark提到三个信息源：InfoQ，Thoughtworks Tech Radar，DZone。</p>\n<p>他每天的习惯是花20分钟浏览收到的订阅邮件，然后如果有感兴趣的内容，会标注下，留到晚上或者周末细读。日积月累后，就会增长技术广度。</p>\n</li>\n<li><p><a href=\"https://www.infoq.com/presentations/microservices-federated-growth/\" target=\"_blank\" rel=\"noopener\">Controlled Chaos: Taming Organic, Federated Growth of Microservices</a></p>\n<p> This talk mentions that microservices architecture is evolving through organic federated growth. The agility that the enterprises crave ends up with an architecture that we can&#39;t control. And in such a distributed architecture, metrics and tracing might not work that well. One interesting thing he mentioned is that building distributed systems may force a new waterfall thinking on devs as there is a long ramp before you can deploy that. Instead, build resilient federations based on DDD, and compensation strategy if anything happens. For operators, rapid detect-react loops are really important, which should be based on golden signals(requests, latency, concurrency, bandwidth), metrics, etc...</p>\n</li>\n</ol>\n","site":{"data":{"next":{"override":false,"favicon":{"small":"/uploads/favicon-16x16.png","medium":"/uploads/favicon-32x32.png","apple_touch_icon":"/uploads/apple-touch-icon.png","safari_pinned_tab":"/uploads/favicon.png","ms_browserconfig":"/uploads/browserconfig.xml"},"keywords":"Hexo, NexT","rss":null,"footer":{"icon":"user","copyright":null,"powered":true,"theme":{"enable":true,"version":true}},"canonical":true,"seo":false,"index_with_subtitle":false,"menu":{"home":"/ || home","archives":"/archives/ || archive"},"menu_icons":{"enable":true},"scheme":"Pisces","social_icons":{"enable":true,"icons_only":false,"transition":false},"links_icon":"link","links_title":"Links","links_layout":"block","toc":{"enable":true,"number":true,"wrap":false},"sidebar":{"position":"left","display":"post","offset":12,"b2t":false,"scrollpercent":false,"onmobile":false},"scroll_to_more":true,"save_scroll":false,"excerpt_description":true,"auto_excerpt":{"enable":false,"length":30},"read_more_btn":true,"post_meta":{"item_text":true,"created_at":true,"updated_at":false,"categories":true},"post_wordcount":{"item_text":true,"wordcount":false,"min2read":false,"totalcount":false,"separated_meta":true},"post_copyright":{"enable":false,"license":"CC BY-NC-SA 3.0","license_url":"https://creativecommons.org/licenses/by-nc-sa/3.0/"},"mobile_layout_economy":false,"android_chrome_color":"#222","custom_logo":{"enabled":false,"image":null},"marked":{"smartypants":false},"highlight_theme":"normal","font":{"enable":false,"host":null,"global":{"external":true,"family":"Lato","size":null},"headings":{"external":true,"family":null,"size":null},"posts":{"external":true,"family":null},"logo":{"external":true,"family":null,"size":null},"codes":{"external":true,"family":null,"size":null}},"mathjax":{"enable":false,"per_page":false,"cdn":"//cdn.bootcss.com/mathjax/2.7.1/latest.js?config=TeX-AMS-MML_HTMLorMML"},"han":false,"disqus":{"enable":false,"shortname":null,"count":true},"changyan":{"enable":false,"appid":null,"appkey":null},"valine":{"enable":false,"appid":null,"appkey":null,"notify":false,"verify":false,"placeholder":"Just go go","avatar":"mm","guest_info":"nick,mail,link","pageSize":10},"gitment":{"enable":false,"mint":true,"count":true,"lazy":false,"cleanly":false,"language":null,"github_user":null,"github_repo":null,"client_id":null,"client_secret":null,"proxy_gateway":null,"redirect_protocol":null},"needmoreshare2":{"enable":false,"postbottom":{"enable":false,"options":{"iconStyle":"box","boxForm":"horizontal","position":"bottomCenter","networks":"Weibo,Wechat,Douban,QQZone,Twitter,Facebook"}},"float":{"enable":false,"options":{"iconStyle":"box","boxForm":"horizontal","position":"middleRight","networks":"Weibo,Wechat,Douban,QQZone,Twitter,Facebook"}}},"duoshuo_info":{"ua_enable":true,"admin_enable":false,"user_id":0},"facebook_sdk":{"enable":false,"app_id":null,"fb_admin":null,"like_button":null,"webmaster":null},"facebook_comments_plugin":{"enable":false,"num_of_posts":10,"width":"100%","scheme":"light"},"vkontakte_api":{"enable":false,"app_id":null,"like":true,"comments":true,"num_of_posts":10},"rating":{"enable":false,"id":null,"color":"fc6423"},"leancloud_visitors":{"enable":false,"app_id":null,"app_key":null},"firestore":{"enable":false,"collection":"articles","apiKey":null,"projectId":null,"bluebird":false},"busuanzi_count":{"enable":false,"site_uv":true,"site_uv_header":"<i class=\"fa fa-user\"></i>","site_uv_footer":null,"site_pv":true,"site_pv_header":"<i class=\"fa fa-eye\"></i>","site_pv_footer":null,"page_pv":true,"page_pv_header":"<i class=\"fa fa-file-o\"></i>","page_pv_footer":null},"baidu_push":false,"calendar":{"enable":false,"calendar_id":"<required>","api_key":"<required>","orderBy":"startTime","offsetMax":24,"offsetMin":4,"timeZone":null,"showDeleted":false,"singleEvents":true,"maxResults":250},"algolia_search":{"enable":false,"hits":{"per_page":10},"labels":{"input_placeholder":"Search for Posts","hits_empty":"We didn't find any results for the search: ${query}","hits_stats":"${hits} results found in ${time} ms"}},"local_search":{"enable":false,"trigger":"auto","top_n_per_article":1},"exturl":false,"note":{"style":"simple","icons":false,"border_radius":3,"light_bg_offset":0},"label":true,"tabs":{"enable":true,"transition":{"tabs":false,"labels":true},"border_radius":0},"motion":{"enable":true,"async":false,"transition":{"post_block":"fadeIn","post_header":"slideDownIn","post_body":"slideDownIn","coll_header":"slideLeftIn","sidebar":"slideUpIn"}},"fancybox":true,"pace":false,"pace_theme":"pace-theme-minimal","canvas_nest":false,"three_waves":false,"canvas_lines":false,"canvas_sphere":false,"canvas_ribbon":{"enable":false,"size":300,"alpha":0.6,"zIndex":-1},"vendors":{"_internal":"lib","jquery":null,"fancybox":null,"fancybox_css":null,"fastclick":null,"lazyload":null,"velocity":null,"velocity_ui":null,"ua_parser":null,"fontawesome":null,"algolia_instant_js":null,"algolia_instant_css":null,"pace":null,"pace_css":null,"canvas_nest":null,"three":null,"three_waves":null,"canvas_lines":null,"canvas_sphere":null,"canvas_ribbon":null,"han":null,"needMoreShare2":null},"css":"css","js":"js","images":"images","version":"5.1.4"}}},"excerpt":"<ol>\n<li><p><a href=\"https://softwareengineeringdaily.com/2020/05/15/aws-virtualization-with-anthony-liguori/\" target=\"_blank\" rel=\"noopener\">AWS Virtualization with Anthony Liguori</a></p>","more":"<p>这篇podcast 谈论了AWS 虚拟化技术的演进史，从EC2谈起，到之后的Outpost，Fargate，Serverless。</p>\n<p>最开始EC2用的虚拟化技术是Zen，后来他们开始构建自己的硬件系统，也就是Nitro Project。他们最初的希望是它能够很大程度得简化系统，从而改善性能。</p>\n<p>谈及Lambda的时候，Anthony谈到了他们最重视的是安全，而EC2 instance是他们安全方面非常成熟的产品，也就自然成为了lambda使用的平台。每个lambda function都是一个EC2 instance。</p>\n<p>讨论到底层架构，他们说到Nitro 就是一个bare-metal的系统。Firecracker在其之上运行，跑一些程式，一些在Firecracker的代码允许一些程式去启动和执行。Hypervisor是一个平台，你可以在上面启动不同的虚拟机；VMM（virtual machine monitor）是一个针对那些虚拟机的监控器。那Nitro就是Hypervisor，而Firecracker就是VMM。</p>\n<p>他们针对Fargate和Serverless的优化，简单点来说，就是在启动过程中去除那些陈旧的，对于container不重要的东西，让启动时间减少。</p>\n<p>Anthony提到，quantum computing是下一个可以改变世界的新技术。</p>\n</li>\n<li><p><a href=\"https://www.mcls.io/blog/encouraging-a-culture-of-written-communication\" target=\"_blank\" rel=\"noopener\">Encouraging a Culture of Written Communication</a></p>\n<p>这篇文章提到了书面交流的文化，我认为对于大多数在特殊时期在家上班的人来说，比较受用。</p>\n<p>很多人觉得书面交流需要比较正式，但是那些主要是针对更广大的受众，或者是针对上级的交流。对于组内交流或者是问问题，书面交流不一定非要那么正式，错别字，语病都是可以被允许的。</p>\n<p>书面交流的另一个好处：它容易被搜寻到。但另一个问题是，我们需要有一个平台去存储这些信息和知识，这样人们不会因为太多信息源而迷失方向，书写者也不会因为它而耽误书写的进度。</p>\n<p>但是太过于依赖书面交流也有不好的地方，在有些时候，一个视频电话可能解决问题更快，更方便。不要在这上面墨守成规。</p>\n<p>Thinking out loud。在你对有些事情不确定的情况下，可以把思路写在公用的频道里，让别人也看到，这样别人可以给你反馈。在软件事故发生的时候，这会变得很有用，大家会快速得交流，也就能够很快得对事故有一个一致的理解和解决方案。没有私人对话或者视频会话，这会变得更搞笑。</p>\n</li>\n<li><p><a href=\"https://www.youtube.com/watch?v=vRplv975ce0&list=PLdsOZAx8I5umhnn5LLTNJbFgwA3xbycar&index=77\" target=\"_blank\" rel=\"noopener\">Soft Skills: Gaining Technical Breadth</a></p>\n<p>这个视频谈及了如何增长技术广度，如图所示，“你知道的技术”被认为是技术深度，“你知道你不知道的技术”被认为是技术广度。作为一个相当架构师的人来说，我们需要增加技术广度，然后增加技术深度。<br><img src=\"pyramid.png\" alt=\"Tech pyramid\"><br>Mark提到三个信息源：InfoQ，Thoughtworks Tech Radar，DZone。</p>\n<p>他每天的习惯是花20分钟浏览收到的订阅邮件，然后如果有感兴趣的内容，会标注下，留到晚上或者周末细读。日积月累后，就会增长技术广度。</p>\n</li>\n<li><p><a href=\"https://www.infoq.com/presentations/microservices-federated-growth/\" target=\"_blank\" rel=\"noopener\">Controlled Chaos: Taming Organic, Federated Growth of Microservices</a></p>\n<p> This talk mentions that microservices architecture is evolving through organic federated growth. The agility that the enterprises crave ends up with an architecture that we can&#39;t control. And in such a distributed architecture, metrics and tracing might not work that well. One interesting thing he mentioned is that building distributed systems may force a new waterfall thinking on devs as there is a long ramp before you can deploy that. Instead, build resilient federations based on DDD, and compensation strategy if anything happens. For operators, rapid detect-react loops are really important, which should be based on golden signals(requests, latency, concurrency, bandwidth), metrics, etc...</p>\n</li>\n</ol>"},{"title":"The Pragmatic Programmer-Chapter 2","top":false,"cover":false,"toc":true,"mathjax":true,"date":"2020-05-25T20:12:35.000Z","summary":null,"password":null,"_content":"\n\n\n# Chapter 2 A Pragmatic Approach\n<!--more-->\n## Topic 8: The essence of good design\n\n-   Good design is easier to change than bad design\n-   If you can't make sure what form change will take, 1. try to make what you write replaceable; 2. treat this as a way to develop instincts\n\n## Topic 9: DRY\n\n-   DRY principle: Every piece of knowledge must have a single, unambiguous, authoritative representation within a system.\n-   Do you find yourself making a change in multiple places, and in multiple different formats? If so, your code isn't dry\n-   Not all code duplication is knowledge duplication\n-   Comments can be duplicated as well. If the code can say what it does, why we need docs?\n-   Whenever a module exposes a data structure, you're coupling all the code that uses that structure to the implementation of that module.\n-   Foster an environment where it's easier to find and reuse existing stuff than to write it yourself.\n\n## Topic 10: Orthogonality\n\n-   Two things are orthogonal if changes in one do not affect any of the others\n-   Two major benefits of orthogonal systems: increased productivity and reduced risk\n\n\t-   Changes are localized\n\t-   It promotes reuse\n\t-   Diseased code is isolated\n\t-   System is less fragile\n\t-   Better for testing\n\t-   Not tightly tied to a particular vendor\n\n-   Ask yourself, if I dramatically change the requirements behind a particular function, how many modules are affected? The answer should be one for orthogonal system\n-   How to maintain orthogonality:\n\n\t-   Keep your code decoupled - Law of Demeter, if you need to change an object's state, get the object to do it for you.\n\t-   Avoid global data\n\t-   Avoid similar functions - take a look at Strategy Pattern\n\n## Topic 11: Reversibility\n\n-   You can't plan for rapid change of architectural volatility. But what you can do is to make it easy to change\n-   Hide third-party APIs behind your own abstraction layers\n-   Break code into components\n\n## Topic 12 Tracer Bullets\n\n-   With tracer ability, we are able to track the progress\n-   Advantages of trace code\n\t-   Users get to see something working early and tell you how close to the target\n\t-   Developers build a structure to work in\n\t-   An integration platform\n\t-   You have something to demonstrate\n\t-   You have a better feel for progress\n\n-   Tracer code vs. Prototyping\n\t-   Tracer code makes the whole structure, while prototyping focuses on one part of the structure\n\t-   Prototyping generates disposable code, while tracer code is lean but complete.\n\n## Topic 13: Prototypes and Post-it notes\n\n-   How to use prototypes\n\t-   Correctness - may use dummy data\n\t-   Completeness - may function in a very limited case\n\t-   Robustness - Error checking is likely to be incomplete or missing\n\t-   Style - Won't have much in the way of comments or documentation\n\n## Topic 14: Domain Languages\n\n-   Internal domain language gives you the advantage of power your pipeline, but it limits the choice of the language;\n-   External domain language needs a parser, but you don't have any restrictions on what language to use;\n-   The rule is: Don't spend more effort than you save\n\n## Topic 15: Estimate\n\n-   Where do estimates come from?\n\t-   Understand what's being asked - the scope\n\t-   Build a model of the system - mental model for the project\n\t-   Break it into components\n\t-   Give each parameter a value - to work out which parameter have the most impact on the result\n\t-   Keep track of the estimations\n\n-   PERT (Programming Evaluation Review Technique) usually has an optimistic, a most likely, and a pessimistic estimate","source":"_posts/The-Pragmatic-Programmer-Chapter-2.md","raw":"---\ntitle: The Pragmatic Programmer-Chapter 2\ntop: false\ncover: false\ntoc: true\nmathjax: true\ndate: 2020-05-25 16:12:35\nsummary:\ntags: [Career]\ncategories: [Tech]\npassword:\n---\n\n\n\n# Chapter 2 A Pragmatic Approach\n<!--more-->\n## Topic 8: The essence of good design\n\n-   Good design is easier to change than bad design\n-   If you can't make sure what form change will take, 1. try to make what you write replaceable; 2. treat this as a way to develop instincts\n\n## Topic 9: DRY\n\n-   DRY principle: Every piece of knowledge must have a single, unambiguous, authoritative representation within a system.\n-   Do you find yourself making a change in multiple places, and in multiple different formats? If so, your code isn't dry\n-   Not all code duplication is knowledge duplication\n-   Comments can be duplicated as well. If the code can say what it does, why we need docs?\n-   Whenever a module exposes a data structure, you're coupling all the code that uses that structure to the implementation of that module.\n-   Foster an environment where it's easier to find and reuse existing stuff than to write it yourself.\n\n## Topic 10: Orthogonality\n\n-   Two things are orthogonal if changes in one do not affect any of the others\n-   Two major benefits of orthogonal systems: increased productivity and reduced risk\n\n\t-   Changes are localized\n\t-   It promotes reuse\n\t-   Diseased code is isolated\n\t-   System is less fragile\n\t-   Better for testing\n\t-   Not tightly tied to a particular vendor\n\n-   Ask yourself, if I dramatically change the requirements behind a particular function, how many modules are affected? The answer should be one for orthogonal system\n-   How to maintain orthogonality:\n\n\t-   Keep your code decoupled - Law of Demeter, if you need to change an object's state, get the object to do it for you.\n\t-   Avoid global data\n\t-   Avoid similar functions - take a look at Strategy Pattern\n\n## Topic 11: Reversibility\n\n-   You can't plan for rapid change of architectural volatility. But what you can do is to make it easy to change\n-   Hide third-party APIs behind your own abstraction layers\n-   Break code into components\n\n## Topic 12 Tracer Bullets\n\n-   With tracer ability, we are able to track the progress\n-   Advantages of trace code\n\t-   Users get to see something working early and tell you how close to the target\n\t-   Developers build a structure to work in\n\t-   An integration platform\n\t-   You have something to demonstrate\n\t-   You have a better feel for progress\n\n-   Tracer code vs. Prototyping\n\t-   Tracer code makes the whole structure, while prototyping focuses on one part of the structure\n\t-   Prototyping generates disposable code, while tracer code is lean but complete.\n\n## Topic 13: Prototypes and Post-it notes\n\n-   How to use prototypes\n\t-   Correctness - may use dummy data\n\t-   Completeness - may function in a very limited case\n\t-   Robustness - Error checking is likely to be incomplete or missing\n\t-   Style - Won't have much in the way of comments or documentation\n\n## Topic 14: Domain Languages\n\n-   Internal domain language gives you the advantage of power your pipeline, but it limits the choice of the language;\n-   External domain language needs a parser, but you don't have any restrictions on what language to use;\n-   The rule is: Don't spend more effort than you save\n\n## Topic 15: Estimate\n\n-   Where do estimates come from?\n\t-   Understand what's being asked - the scope\n\t-   Build a model of the system - mental model for the project\n\t-   Break it into components\n\t-   Give each parameter a value - to work out which parameter have the most impact on the result\n\t-   Keep track of the estimations\n\n-   PERT (Programming Evaluation Review Technique) usually has an optimistic, a most likely, and a pessimistic estimate","slug":"The-Pragmatic-Programmer-Chapter-2","published":1,"updated":"2020-05-25T20:46:47.219Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ckcxuqes6001nfkjxkuq4epy5","content":"<h1 id=\"Chapter-2-A-Pragmatic-Approach\"><a href=\"#Chapter-2-A-Pragmatic-Approach\" class=\"headerlink\" title=\"Chapter 2 A Pragmatic Approach\"></a>Chapter 2 A Pragmatic Approach</h1><a id=\"more\"></a>\n<h2 id=\"Topic-8-The-essence-of-good-design\"><a href=\"#Topic-8-The-essence-of-good-design\" class=\"headerlink\" title=\"Topic 8: The essence of good design\"></a>Topic 8: The essence of good design</h2><ul>\n<li>Good design is easier to change than bad design</li>\n<li>If you can&#39;t make sure what form change will take, 1. try to make what you write replaceable; 2. treat this as a way to develop instincts</li>\n</ul>\n<h2 id=\"Topic-9-DRY\"><a href=\"#Topic-9-DRY\" class=\"headerlink\" title=\"Topic 9: DRY\"></a>Topic 9: DRY</h2><ul>\n<li>DRY principle: Every piece of knowledge must have a single, unambiguous, authoritative representation within a system.</li>\n<li>Do you find yourself making a change in multiple places, and in multiple different formats? If so, your code isn&#39;t dry</li>\n<li>Not all code duplication is knowledge duplication</li>\n<li>Comments can be duplicated as well. If the code can say what it does, why we need docs?</li>\n<li>Whenever a module exposes a data structure, you&#39;re coupling all the code that uses that structure to the implementation of that module.</li>\n<li>Foster an environment where it&#39;s easier to find and reuse existing stuff than to write it yourself.</li>\n</ul>\n<h2 id=\"Topic-10-Orthogonality\"><a href=\"#Topic-10-Orthogonality\" class=\"headerlink\" title=\"Topic 10: Orthogonality\"></a>Topic 10: Orthogonality</h2><ul>\n<li><p>Two things are orthogonal if changes in one do not affect any of the others</p>\n</li>\n<li><p>Two major benefits of orthogonal systems: increased productivity and reduced risk</p>\n<ul>\n<li>Changes are localized</li>\n<li>It promotes reuse</li>\n<li>Diseased code is isolated</li>\n<li>System is less fragile</li>\n<li>Better for testing</li>\n<li>Not tightly tied to a particular vendor</li>\n</ul>\n</li>\n<li><p>Ask yourself, if I dramatically change the requirements behind a particular function, how many modules are affected? The answer should be one for orthogonal system</p>\n</li>\n<li><p>How to maintain orthogonality:</p>\n<ul>\n<li>Keep your code decoupled - Law of Demeter, if you need to change an object&#39;s state, get the object to do it for you.</li>\n<li>Avoid global data</li>\n<li>Avoid similar functions - take a look at Strategy Pattern</li>\n</ul>\n</li>\n</ul>\n<h2 id=\"Topic-11-Reversibility\"><a href=\"#Topic-11-Reversibility\" class=\"headerlink\" title=\"Topic 11: Reversibility\"></a>Topic 11: Reversibility</h2><ul>\n<li>You can&#39;t plan for rapid change of architectural volatility. But what you can do is to make it easy to change</li>\n<li>Hide third-party APIs behind your own abstraction layers</li>\n<li>Break code into components</li>\n</ul>\n<h2 id=\"Topic-12-Tracer-Bullets\"><a href=\"#Topic-12-Tracer-Bullets\" class=\"headerlink\" title=\"Topic 12 Tracer Bullets\"></a>Topic 12 Tracer Bullets</h2><ul>\n<li><p>With tracer ability, we are able to track the progress</p>\n</li>\n<li><p>Advantages of trace code</p>\n<ul>\n<li>Users get to see something working early and tell you how close to the target</li>\n<li>Developers build a structure to work in</li>\n<li>An integration platform</li>\n<li>You have something to demonstrate</li>\n<li>You have a better feel for progress</li>\n</ul>\n</li>\n<li><p>Tracer code vs. Prototyping</p>\n<ul>\n<li>Tracer code makes the whole structure, while prototyping focuses on one part of the structure</li>\n<li>Prototyping generates disposable code, while tracer code is lean but complete.</li>\n</ul>\n</li>\n</ul>\n<h2 id=\"Topic-13-Prototypes-and-Post-it-notes\"><a href=\"#Topic-13-Prototypes-and-Post-it-notes\" class=\"headerlink\" title=\"Topic 13: Prototypes and Post-it notes\"></a>Topic 13: Prototypes and Post-it notes</h2><ul>\n<li>How to use prototypes<ul>\n<li>Correctness - may use dummy data</li>\n<li>Completeness - may function in a very limited case</li>\n<li>Robustness - Error checking is likely to be incomplete or missing</li>\n<li>Style - Won&#39;t have much in the way of comments or documentation</li>\n</ul>\n</li>\n</ul>\n<h2 id=\"Topic-14-Domain-Languages\"><a href=\"#Topic-14-Domain-Languages\" class=\"headerlink\" title=\"Topic 14: Domain Languages\"></a>Topic 14: Domain Languages</h2><ul>\n<li>Internal domain language gives you the advantage of power your pipeline, but it limits the choice of the language;</li>\n<li>External domain language needs a parser, but you don&#39;t have any restrictions on what language to use;</li>\n<li>The rule is: Don&#39;t spend more effort than you save</li>\n</ul>\n<h2 id=\"Topic-15-Estimate\"><a href=\"#Topic-15-Estimate\" class=\"headerlink\" title=\"Topic 15: Estimate\"></a>Topic 15: Estimate</h2><ul>\n<li><p>Where do estimates come from?</p>\n<ul>\n<li>Understand what&#39;s being asked - the scope</li>\n<li>Build a model of the system - mental model for the project</li>\n<li>Break it into components</li>\n<li>Give each parameter a value - to work out which parameter have the most impact on the result</li>\n<li>Keep track of the estimations</li>\n</ul>\n</li>\n<li><p>PERT (Programming Evaluation Review Technique) usually has an optimistic, a most likely, and a pessimistic estimate</p>\n</li>\n</ul>\n","site":{"data":{"next":{"override":false,"favicon":{"small":"/uploads/favicon-16x16.png","medium":"/uploads/favicon-32x32.png","apple_touch_icon":"/uploads/apple-touch-icon.png","safari_pinned_tab":"/uploads/favicon.png","ms_browserconfig":"/uploads/browserconfig.xml"},"keywords":"Hexo, NexT","rss":null,"footer":{"icon":"user","copyright":null,"powered":true,"theme":{"enable":true,"version":true}},"canonical":true,"seo":false,"index_with_subtitle":false,"menu":{"home":"/ || home","archives":"/archives/ || archive"},"menu_icons":{"enable":true},"scheme":"Pisces","social_icons":{"enable":true,"icons_only":false,"transition":false},"links_icon":"link","links_title":"Links","links_layout":"block","toc":{"enable":true,"number":true,"wrap":false},"sidebar":{"position":"left","display":"post","offset":12,"b2t":false,"scrollpercent":false,"onmobile":false},"scroll_to_more":true,"save_scroll":false,"excerpt_description":true,"auto_excerpt":{"enable":false,"length":30},"read_more_btn":true,"post_meta":{"item_text":true,"created_at":true,"updated_at":false,"categories":true},"post_wordcount":{"item_text":true,"wordcount":false,"min2read":false,"totalcount":false,"separated_meta":true},"post_copyright":{"enable":false,"license":"CC BY-NC-SA 3.0","license_url":"https://creativecommons.org/licenses/by-nc-sa/3.0/"},"mobile_layout_economy":false,"android_chrome_color":"#222","custom_logo":{"enabled":false,"image":null},"marked":{"smartypants":false},"highlight_theme":"normal","font":{"enable":false,"host":null,"global":{"external":true,"family":"Lato","size":null},"headings":{"external":true,"family":null,"size":null},"posts":{"external":true,"family":null},"logo":{"external":true,"family":null,"size":null},"codes":{"external":true,"family":null,"size":null}},"mathjax":{"enable":false,"per_page":false,"cdn":"//cdn.bootcss.com/mathjax/2.7.1/latest.js?config=TeX-AMS-MML_HTMLorMML"},"han":false,"disqus":{"enable":false,"shortname":null,"count":true},"changyan":{"enable":false,"appid":null,"appkey":null},"valine":{"enable":false,"appid":null,"appkey":null,"notify":false,"verify":false,"placeholder":"Just go go","avatar":"mm","guest_info":"nick,mail,link","pageSize":10},"gitment":{"enable":false,"mint":true,"count":true,"lazy":false,"cleanly":false,"language":null,"github_user":null,"github_repo":null,"client_id":null,"client_secret":null,"proxy_gateway":null,"redirect_protocol":null},"needmoreshare2":{"enable":false,"postbottom":{"enable":false,"options":{"iconStyle":"box","boxForm":"horizontal","position":"bottomCenter","networks":"Weibo,Wechat,Douban,QQZone,Twitter,Facebook"}},"float":{"enable":false,"options":{"iconStyle":"box","boxForm":"horizontal","position":"middleRight","networks":"Weibo,Wechat,Douban,QQZone,Twitter,Facebook"}}},"duoshuo_info":{"ua_enable":true,"admin_enable":false,"user_id":0},"facebook_sdk":{"enable":false,"app_id":null,"fb_admin":null,"like_button":null,"webmaster":null},"facebook_comments_plugin":{"enable":false,"num_of_posts":10,"width":"100%","scheme":"light"},"vkontakte_api":{"enable":false,"app_id":null,"like":true,"comments":true,"num_of_posts":10},"rating":{"enable":false,"id":null,"color":"fc6423"},"leancloud_visitors":{"enable":false,"app_id":null,"app_key":null},"firestore":{"enable":false,"collection":"articles","apiKey":null,"projectId":null,"bluebird":false},"busuanzi_count":{"enable":false,"site_uv":true,"site_uv_header":"<i class=\"fa fa-user\"></i>","site_uv_footer":null,"site_pv":true,"site_pv_header":"<i class=\"fa fa-eye\"></i>","site_pv_footer":null,"page_pv":true,"page_pv_header":"<i class=\"fa fa-file-o\"></i>","page_pv_footer":null},"baidu_push":false,"calendar":{"enable":false,"calendar_id":"<required>","api_key":"<required>","orderBy":"startTime","offsetMax":24,"offsetMin":4,"timeZone":null,"showDeleted":false,"singleEvents":true,"maxResults":250},"algolia_search":{"enable":false,"hits":{"per_page":10},"labels":{"input_placeholder":"Search for Posts","hits_empty":"We didn't find any results for the search: ${query}","hits_stats":"${hits} results found in ${time} ms"}},"local_search":{"enable":false,"trigger":"auto","top_n_per_article":1},"exturl":false,"note":{"style":"simple","icons":false,"border_radius":3,"light_bg_offset":0},"label":true,"tabs":{"enable":true,"transition":{"tabs":false,"labels":true},"border_radius":0},"motion":{"enable":true,"async":false,"transition":{"post_block":"fadeIn","post_header":"slideDownIn","post_body":"slideDownIn","coll_header":"slideLeftIn","sidebar":"slideUpIn"}},"fancybox":true,"pace":false,"pace_theme":"pace-theme-minimal","canvas_nest":false,"three_waves":false,"canvas_lines":false,"canvas_sphere":false,"canvas_ribbon":{"enable":false,"size":300,"alpha":0.6,"zIndex":-1},"vendors":{"_internal":"lib","jquery":null,"fancybox":null,"fancybox_css":null,"fastclick":null,"lazyload":null,"velocity":null,"velocity_ui":null,"ua_parser":null,"fontawesome":null,"algolia_instant_js":null,"algolia_instant_css":null,"pace":null,"pace_css":null,"canvas_nest":null,"three":null,"three_waves":null,"canvas_lines":null,"canvas_sphere":null,"canvas_ribbon":null,"han":null,"needMoreShare2":null},"css":"css","js":"js","images":"images","version":"5.1.4"}}},"excerpt":"<h1 id=\"Chapter-2-A-Pragmatic-Approach\"><a href=\"#Chapter-2-A-Pragmatic-Approach\" class=\"headerlink\" title=\"Chapter 2 A Pragmatic Approach\"></a>Chapter 2 A Pragmatic Approach</h1>","more":"<h2 id=\"Topic-8-The-essence-of-good-design\"><a href=\"#Topic-8-The-essence-of-good-design\" class=\"headerlink\" title=\"Topic 8: The essence of good design\"></a>Topic 8: The essence of good design</h2><ul>\n<li>Good design is easier to change than bad design</li>\n<li>If you can&#39;t make sure what form change will take, 1. try to make what you write replaceable; 2. treat this as a way to develop instincts</li>\n</ul>\n<h2 id=\"Topic-9-DRY\"><a href=\"#Topic-9-DRY\" class=\"headerlink\" title=\"Topic 9: DRY\"></a>Topic 9: DRY</h2><ul>\n<li>DRY principle: Every piece of knowledge must have a single, unambiguous, authoritative representation within a system.</li>\n<li>Do you find yourself making a change in multiple places, and in multiple different formats? If so, your code isn&#39;t dry</li>\n<li>Not all code duplication is knowledge duplication</li>\n<li>Comments can be duplicated as well. If the code can say what it does, why we need docs?</li>\n<li>Whenever a module exposes a data structure, you&#39;re coupling all the code that uses that structure to the implementation of that module.</li>\n<li>Foster an environment where it&#39;s easier to find and reuse existing stuff than to write it yourself.</li>\n</ul>\n<h2 id=\"Topic-10-Orthogonality\"><a href=\"#Topic-10-Orthogonality\" class=\"headerlink\" title=\"Topic 10: Orthogonality\"></a>Topic 10: Orthogonality</h2><ul>\n<li><p>Two things are orthogonal if changes in one do not affect any of the others</p>\n</li>\n<li><p>Two major benefits of orthogonal systems: increased productivity and reduced risk</p>\n<ul>\n<li>Changes are localized</li>\n<li>It promotes reuse</li>\n<li>Diseased code is isolated</li>\n<li>System is less fragile</li>\n<li>Better for testing</li>\n<li>Not tightly tied to a particular vendor</li>\n</ul>\n</li>\n<li><p>Ask yourself, if I dramatically change the requirements behind a particular function, how many modules are affected? The answer should be one for orthogonal system</p>\n</li>\n<li><p>How to maintain orthogonality:</p>\n<ul>\n<li>Keep your code decoupled - Law of Demeter, if you need to change an object&#39;s state, get the object to do it for you.</li>\n<li>Avoid global data</li>\n<li>Avoid similar functions - take a look at Strategy Pattern</li>\n</ul>\n</li>\n</ul>\n<h2 id=\"Topic-11-Reversibility\"><a href=\"#Topic-11-Reversibility\" class=\"headerlink\" title=\"Topic 11: Reversibility\"></a>Topic 11: Reversibility</h2><ul>\n<li>You can&#39;t plan for rapid change of architectural volatility. But what you can do is to make it easy to change</li>\n<li>Hide third-party APIs behind your own abstraction layers</li>\n<li>Break code into components</li>\n</ul>\n<h2 id=\"Topic-12-Tracer-Bullets\"><a href=\"#Topic-12-Tracer-Bullets\" class=\"headerlink\" title=\"Topic 12 Tracer Bullets\"></a>Topic 12 Tracer Bullets</h2><ul>\n<li><p>With tracer ability, we are able to track the progress</p>\n</li>\n<li><p>Advantages of trace code</p>\n<ul>\n<li>Users get to see something working early and tell you how close to the target</li>\n<li>Developers build a structure to work in</li>\n<li>An integration platform</li>\n<li>You have something to demonstrate</li>\n<li>You have a better feel for progress</li>\n</ul>\n</li>\n<li><p>Tracer code vs. Prototyping</p>\n<ul>\n<li>Tracer code makes the whole structure, while prototyping focuses on one part of the structure</li>\n<li>Prototyping generates disposable code, while tracer code is lean but complete.</li>\n</ul>\n</li>\n</ul>\n<h2 id=\"Topic-13-Prototypes-and-Post-it-notes\"><a href=\"#Topic-13-Prototypes-and-Post-it-notes\" class=\"headerlink\" title=\"Topic 13: Prototypes and Post-it notes\"></a>Topic 13: Prototypes and Post-it notes</h2><ul>\n<li>How to use prototypes<ul>\n<li>Correctness - may use dummy data</li>\n<li>Completeness - may function in a very limited case</li>\n<li>Robustness - Error checking is likely to be incomplete or missing</li>\n<li>Style - Won&#39;t have much in the way of comments or documentation</li>\n</ul>\n</li>\n</ul>\n<h2 id=\"Topic-14-Domain-Languages\"><a href=\"#Topic-14-Domain-Languages\" class=\"headerlink\" title=\"Topic 14: Domain Languages\"></a>Topic 14: Domain Languages</h2><ul>\n<li>Internal domain language gives you the advantage of power your pipeline, but it limits the choice of the language;</li>\n<li>External domain language needs a parser, but you don&#39;t have any restrictions on what language to use;</li>\n<li>The rule is: Don&#39;t spend more effort than you save</li>\n</ul>\n<h2 id=\"Topic-15-Estimate\"><a href=\"#Topic-15-Estimate\" class=\"headerlink\" title=\"Topic 15: Estimate\"></a>Topic 15: Estimate</h2><ul>\n<li><p>Where do estimates come from?</p>\n<ul>\n<li>Understand what&#39;s being asked - the scope</li>\n<li>Build a model of the system - mental model for the project</li>\n<li>Break it into components</li>\n<li>Give each parameter a value - to work out which parameter have the most impact on the result</li>\n<li>Keep track of the estimations</li>\n</ul>\n</li>\n<li><p>PERT (Programming Evaluation Review Technique) usually has an optimistic, a most likely, and a pessimistic estimate</p>\n</li>\n</ul>"},{"title":"The Pragmatic Programmer - Chapter 1","top":false,"cover":false,"toc":true,"mathjax":true,"date":"2020-05-09T16:00:12.000Z","password":null,"_content":"\n\n\n# Chapter 1 A pragmatic strategy\n<!--more-->\n## Topic 1: It's your life\n\nMany developers are frustrated and have lots of complaints about technology has passed them by, their team sucks, etc…\n\nWhy can't you change it?\n\n-   Martin Fowler says [you can change your organization or change your organization](http://wiki.c2.com/?ChangeYourOrganization)\n\n-   Make time to learn, even if it requires some of your personal time.\n\n-   Ask if you want to work remotely. If they say no, then find someone who says yes.\n\n## Topic 2: The cat ate my source code\n\nEven the best projects can have mistakes. These things happen, and we try to deal with them as professionally as we can. We must own up to our shortcomings - our ignorance and our mistakes.\n-   Trust in a team is absolutely essential for creativity and collaboration. In a healthy environment, you can safely speak your mind, present your ideas, and rely on your team members who can in turn rely on you.\n-   When you accept the responsibility for an outcome, you should expect to be held accountable for it. **When you make a mistake, admit it honestly and try to offer options.**\n-   **Don't blame on someone or something else, or make up an excuse. Any of these may play a role, but it's up to you to provide solutions, not excuses.**\n-   If there was a risk that the vendor wouldn't come through for you, you should have had a contingency plan.If your mass storage melts, and you don't have a backup, it's your fault.\n-   Before approaching to anyone to tell them why something is not working, stop and listen to yourself. Talk to the rubber duck on your monitor: does your excuse sound reasonable or stupid? How's it going to sound to your boss?\n-   **Instead of excuses, provide options.** Don't say it can't be done, explain what can be done to salvage the situation.\n\t-   Does code have to be deleted?\n\t-   Do you need to spend time prototyping to determine the best way to proceed?\n\t-   Do you need to introduce better testing or automation?\n\t-   Do you need other people to help?\n\t-   Do you need to spend more time with the users?\n\t-   Do you need to learn some technique in greater depth? Would a book or a course help?\n-   Try not to flush out the lame excuses before voicing them aloud. If you must, tell your cat first.\n-   When you find yourself saying \"I don't know\", be sure to follow it up with \"but I'll find out.\" It's a great way to admit what you don't know, but then take responsibility like a pro.\n\n## Topic 3: Software entropy\n\n-   A broken window can turn a clean intact inhabited building into a smashed and abandoned derelict very quickly.\n-   Don't live with broken window, fix them as soon as it's discovered. If you don't have enough time, board it up.\n-   Don't cause collateral damage just because there's a crisis of some sort. One broken window is one too many.\n\n## Topic 4: Stone soup and boiled frogs\n\n-   Start-up fatigue: you may be in a situation where you know what needs to be done, and you know you are right. But ask permission to tackle the thing and you will be met with delays and blank stares. People will form committees, budgets will need approval and things will get complicated. Everyone will guard their own resources.\n-   People find it easier to join an ongoing success.\n-   It's often the accumulation of small things that breaks morale and teams.\n\n## Topic 5: Good-enough software\n\n-   It's equally unprofessional to promise impossible time scales and to cut basic engineering corners to meet a deadline\n-   Don't spoil a perfectly good program by over-embellishment and over-refinement. Move on, and let your code stand in its own right for a while.\n\n## Topic 6: Your knowledge portfolio\n\n-   Your knowledge and experience are your most important day-to-day professional assets. **Unfortunately, they are expiring assets**.\n-   Your ability to learn new things is your most important strategic asset.\n\t-   Invest regularly - you must invest in your knowledge portfolio regularly even if it's just a small amount. The habit is as important as the sums, so plan to use a consistent time and place, away from interruptions.\n\t\t-   Learn at least one new language every year\n\t\t-   Read a technical book each month\n\t\t-   Read non-technical books too\n\t\t-   Take classes\n\t\t-   Participate in local user groups and meetups, actively participate\n\t\t-   Experiment with different environments\n\t\t-   Stay current\n\t-   Diversify - The more technologies you are comfortable with, the better you will be to adjust to change. And don't forget all the other skills you need, including non-technical areas.\n\t-   Manage risk - Don't put all your technical eggs in one basket\n\t-   Buy low, sell high\n\t-   Review and re-balance - This is a very dynamic industry, maybe the technology you started investing is already stone cold by now, maybe you need to brush up on the database technology you haven't used in a while.\n-   The process of learning will expand your thinking, opening you to new possibilities and new ways of doing things.\n-   If you can't find answer yourself, find out who can.\n-   All of this reading and researching takes time, so you need to plan ahead. Always have something to read in an otherwise dead moment. Time spent waiting for doctors and dentists can be a great opportunity to catch up on your reading.\n-   Ask \"why\" five times.\n\t-   Who does the benefit?\n\t-   What's the context?\n\t-   When or where would this work?\n\t-   Why is this a problem?\n-   If you are doing very detailed implementation and coding, read a book on design and architecture. If you are doing high-level design, read a book on coding techniques\n\n## Topic 7: Communicate\n\n -   A large part of our day is spent communicating, so we need to do it well.\n -   Treat English as just another programming language.\n -   The meaning of your communication is the response you get.\n -   Plan what you want to say - ask yourself \"does this communicate what I want to express to my audience in a way that works for them?\"\n -   Make what you're saying relevant in time, as well as in content. Sometimes all it takes is the simple question: \"Is this a good time to talk about…?\"\n -   Make it look good, don't just concentrate solely on content. Use markdown for example.\n -   We often find that the documents end up being less important than the process we go thru to produce them. If possible, involve your readers with early drafts of your document.\n -   Be a listener\n -   Keep people informed makes them far more forgiving of the occasional slip, and makes them feel that you haven't forgotten them.\n -   We want to apply all of our pragmatic principles to documentation as well as to code\n -   **SUMMARY** \n\t - Know what you want to say. \n\t - Know your audience. \n\t - Choose your moment. \n\t - Choose a style. \n\t - Make it look good. \n\t - Involve your audience. \n\t - Be a listener. \n\t - Get back to people. \n\t - Keep code and documentation together.\n","source":"_posts/The-Pragmatic-Programmer-Chapter-1.md","raw":"---\ntitle: The Pragmatic Programmer - Chapter 1\ntop: false\ncover: false\ntoc: true\nmathjax: true\ndate: 2020-05-09 12:00:12\ntags: [Career]\ncategories: [Tech]\npassword:\n---\n\n\n\n# Chapter 1 A pragmatic strategy\n<!--more-->\n## Topic 1: It's your life\n\nMany developers are frustrated and have lots of complaints about technology has passed them by, their team sucks, etc…\n\nWhy can't you change it?\n\n-   Martin Fowler says [you can change your organization or change your organization](http://wiki.c2.com/?ChangeYourOrganization)\n\n-   Make time to learn, even if it requires some of your personal time.\n\n-   Ask if you want to work remotely. If they say no, then find someone who says yes.\n\n## Topic 2: The cat ate my source code\n\nEven the best projects can have mistakes. These things happen, and we try to deal with them as professionally as we can. We must own up to our shortcomings - our ignorance and our mistakes.\n-   Trust in a team is absolutely essential for creativity and collaboration. In a healthy environment, you can safely speak your mind, present your ideas, and rely on your team members who can in turn rely on you.\n-   When you accept the responsibility for an outcome, you should expect to be held accountable for it. **When you make a mistake, admit it honestly and try to offer options.**\n-   **Don't blame on someone or something else, or make up an excuse. Any of these may play a role, but it's up to you to provide solutions, not excuses.**\n-   If there was a risk that the vendor wouldn't come through for you, you should have had a contingency plan.If your mass storage melts, and you don't have a backup, it's your fault.\n-   Before approaching to anyone to tell them why something is not working, stop and listen to yourself. Talk to the rubber duck on your monitor: does your excuse sound reasonable or stupid? How's it going to sound to your boss?\n-   **Instead of excuses, provide options.** Don't say it can't be done, explain what can be done to salvage the situation.\n\t-   Does code have to be deleted?\n\t-   Do you need to spend time prototyping to determine the best way to proceed?\n\t-   Do you need to introduce better testing or automation?\n\t-   Do you need other people to help?\n\t-   Do you need to spend more time with the users?\n\t-   Do you need to learn some technique in greater depth? Would a book or a course help?\n-   Try not to flush out the lame excuses before voicing them aloud. If you must, tell your cat first.\n-   When you find yourself saying \"I don't know\", be sure to follow it up with \"but I'll find out.\" It's a great way to admit what you don't know, but then take responsibility like a pro.\n\n## Topic 3: Software entropy\n\n-   A broken window can turn a clean intact inhabited building into a smashed and abandoned derelict very quickly.\n-   Don't live with broken window, fix them as soon as it's discovered. If you don't have enough time, board it up.\n-   Don't cause collateral damage just because there's a crisis of some sort. One broken window is one too many.\n\n## Topic 4: Stone soup and boiled frogs\n\n-   Start-up fatigue: you may be in a situation where you know what needs to be done, and you know you are right. But ask permission to tackle the thing and you will be met with delays and blank stares. People will form committees, budgets will need approval and things will get complicated. Everyone will guard their own resources.\n-   People find it easier to join an ongoing success.\n-   It's often the accumulation of small things that breaks morale and teams.\n\n## Topic 5: Good-enough software\n\n-   It's equally unprofessional to promise impossible time scales and to cut basic engineering corners to meet a deadline\n-   Don't spoil a perfectly good program by over-embellishment and over-refinement. Move on, and let your code stand in its own right for a while.\n\n## Topic 6: Your knowledge portfolio\n\n-   Your knowledge and experience are your most important day-to-day professional assets. **Unfortunately, they are expiring assets**.\n-   Your ability to learn new things is your most important strategic asset.\n\t-   Invest regularly - you must invest in your knowledge portfolio regularly even if it's just a small amount. The habit is as important as the sums, so plan to use a consistent time and place, away from interruptions.\n\t\t-   Learn at least one new language every year\n\t\t-   Read a technical book each month\n\t\t-   Read non-technical books too\n\t\t-   Take classes\n\t\t-   Participate in local user groups and meetups, actively participate\n\t\t-   Experiment with different environments\n\t\t-   Stay current\n\t-   Diversify - The more technologies you are comfortable with, the better you will be to adjust to change. And don't forget all the other skills you need, including non-technical areas.\n\t-   Manage risk - Don't put all your technical eggs in one basket\n\t-   Buy low, sell high\n\t-   Review and re-balance - This is a very dynamic industry, maybe the technology you started investing is already stone cold by now, maybe you need to brush up on the database technology you haven't used in a while.\n-   The process of learning will expand your thinking, opening you to new possibilities and new ways of doing things.\n-   If you can't find answer yourself, find out who can.\n-   All of this reading and researching takes time, so you need to plan ahead. Always have something to read in an otherwise dead moment. Time spent waiting for doctors and dentists can be a great opportunity to catch up on your reading.\n-   Ask \"why\" five times.\n\t-   Who does the benefit?\n\t-   What's the context?\n\t-   When or where would this work?\n\t-   Why is this a problem?\n-   If you are doing very detailed implementation and coding, read a book on design and architecture. If you are doing high-level design, read a book on coding techniques\n\n## Topic 7: Communicate\n\n -   A large part of our day is spent communicating, so we need to do it well.\n -   Treat English as just another programming language.\n -   The meaning of your communication is the response you get.\n -   Plan what you want to say - ask yourself \"does this communicate what I want to express to my audience in a way that works for them?\"\n -   Make what you're saying relevant in time, as well as in content. Sometimes all it takes is the simple question: \"Is this a good time to talk about…?\"\n -   Make it look good, don't just concentrate solely on content. Use markdown for example.\n -   We often find that the documents end up being less important than the process we go thru to produce them. If possible, involve your readers with early drafts of your document.\n -   Be a listener\n -   Keep people informed makes them far more forgiving of the occasional slip, and makes them feel that you haven't forgotten them.\n -   We want to apply all of our pragmatic principles to documentation as well as to code\n -   **SUMMARY** \n\t - Know what you want to say. \n\t - Know your audience. \n\t - Choose your moment. \n\t - Choose a style. \n\t - Make it look good. \n\t - Involve your audience. \n\t - Be a listener. \n\t - Get back to people. \n\t - Keep code and documentation together.\n","slug":"The-Pragmatic-Programmer-Chapter-1","published":1,"updated":"2020-05-09T16:40:17.856Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ckcxuqesd001qfkjxlg42pmpg","content":"<h1 id=\"Chapter-1-A-pragmatic-strategy\"><a href=\"#Chapter-1-A-pragmatic-strategy\" class=\"headerlink\" title=\"Chapter 1 A pragmatic strategy\"></a>Chapter 1 A pragmatic strategy</h1><a id=\"more\"></a>\n<h2 id=\"Topic-1-It-39-s-your-life\"><a href=\"#Topic-1-It-39-s-your-life\" class=\"headerlink\" title=\"Topic 1: It&#39;s your life\"></a>Topic 1: It&#39;s your life</h2><p>Many developers are frustrated and have lots of complaints about technology has passed them by, their team sucks, etc…</p>\n<p>Why can&#39;t you change it?</p>\n<ul>\n<li><p>Martin Fowler says <a href=\"http://wiki.c2.com/?ChangeYourOrganization\" target=\"_blank\" rel=\"noopener\">you can change your organization or change your organization</a></p>\n</li>\n<li><p>Make time to learn, even if it requires some of your personal time.</p>\n</li>\n<li><p>Ask if you want to work remotely. If they say no, then find someone who says yes.</p>\n</li>\n</ul>\n<h2 id=\"Topic-2-The-cat-ate-my-source-code\"><a href=\"#Topic-2-The-cat-ate-my-source-code\" class=\"headerlink\" title=\"Topic 2: The cat ate my source code\"></a>Topic 2: The cat ate my source code</h2><p>Even the best projects can have mistakes. These things happen, and we try to deal with them as professionally as we can. We must own up to our shortcomings - our ignorance and our mistakes.</p>\n<ul>\n<li>Trust in a team is absolutely essential for creativity and collaboration. In a healthy environment, you can safely speak your mind, present your ideas, and rely on your team members who can in turn rely on you.</li>\n<li>When you accept the responsibility for an outcome, you should expect to be held accountable for it. <strong>When you make a mistake, admit it honestly and try to offer options.</strong></li>\n<li><strong>Don&#39;t blame on someone or something else, or make up an excuse. Any of these may play a role, but it&#39;s up to you to provide solutions, not excuses.</strong></li>\n<li>If there was a risk that the vendor wouldn&#39;t come through for you, you should have had a contingency plan.If your mass storage melts, and you don&#39;t have a backup, it&#39;s your fault.</li>\n<li>Before approaching to anyone to tell them why something is not working, stop and listen to yourself. Talk to the rubber duck on your monitor: does your excuse sound reasonable or stupid? How&#39;s it going to sound to your boss?</li>\n<li><strong>Instead of excuses, provide options.</strong> Don&#39;t say it can&#39;t be done, explain what can be done to salvage the situation.<ul>\n<li>Does code have to be deleted?</li>\n<li>Do you need to spend time prototyping to determine the best way to proceed?</li>\n<li>Do you need to introduce better testing or automation?</li>\n<li>Do you need other people to help?</li>\n<li>Do you need to spend more time with the users?</li>\n<li>Do you need to learn some technique in greater depth? Would a book or a course help?</li>\n</ul>\n</li>\n<li>Try not to flush out the lame excuses before voicing them aloud. If you must, tell your cat first.</li>\n<li>When you find yourself saying &quot;I don&#39;t know&quot;, be sure to follow it up with &quot;but I&#39;ll find out.&quot; It&#39;s a great way to admit what you don&#39;t know, but then take responsibility like a pro.</li>\n</ul>\n<h2 id=\"Topic-3-Software-entropy\"><a href=\"#Topic-3-Software-entropy\" class=\"headerlink\" title=\"Topic 3: Software entropy\"></a>Topic 3: Software entropy</h2><ul>\n<li>A broken window can turn a clean intact inhabited building into a smashed and abandoned derelict very quickly.</li>\n<li>Don&#39;t live with broken window, fix them as soon as it&#39;s discovered. If you don&#39;t have enough time, board it up.</li>\n<li>Don&#39;t cause collateral damage just because there&#39;s a crisis of some sort. One broken window is one too many.</li>\n</ul>\n<h2 id=\"Topic-4-Stone-soup-and-boiled-frogs\"><a href=\"#Topic-4-Stone-soup-and-boiled-frogs\" class=\"headerlink\" title=\"Topic 4: Stone soup and boiled frogs\"></a>Topic 4: Stone soup and boiled frogs</h2><ul>\n<li>Start-up fatigue: you may be in a situation where you know what needs to be done, and you know you are right. But ask permission to tackle the thing and you will be met with delays and blank stares. People will form committees, budgets will need approval and things will get complicated. Everyone will guard their own resources.</li>\n<li>People find it easier to join an ongoing success.</li>\n<li>It&#39;s often the accumulation of small things that breaks morale and teams.</li>\n</ul>\n<h2 id=\"Topic-5-Good-enough-software\"><a href=\"#Topic-5-Good-enough-software\" class=\"headerlink\" title=\"Topic 5: Good-enough software\"></a>Topic 5: Good-enough software</h2><ul>\n<li>It&#39;s equally unprofessional to promise impossible time scales and to cut basic engineering corners to meet a deadline</li>\n<li>Don&#39;t spoil a perfectly good program by over-embellishment and over-refinement. Move on, and let your code stand in its own right for a while.</li>\n</ul>\n<h2 id=\"Topic-6-Your-knowledge-portfolio\"><a href=\"#Topic-6-Your-knowledge-portfolio\" class=\"headerlink\" title=\"Topic 6: Your knowledge portfolio\"></a>Topic 6: Your knowledge portfolio</h2><ul>\n<li>Your knowledge and experience are your most important day-to-day professional assets. <strong>Unfortunately, they are expiring assets</strong>.</li>\n<li>Your ability to learn new things is your most important strategic asset.<ul>\n<li>Invest regularly - you must invest in your knowledge portfolio regularly even if it&#39;s just a small amount. The habit is as important as the sums, so plan to use a consistent time and place, away from interruptions.<ul>\n<li>Learn at least one new language every year</li>\n<li>Read a technical book each month</li>\n<li>Read non-technical books too</li>\n<li>Take classes</li>\n<li>Participate in local user groups and meetups, actively participate</li>\n<li>Experiment with different environments</li>\n<li>Stay current</li>\n</ul>\n</li>\n<li>Diversify - The more technologies you are comfortable with, the better you will be to adjust to change. And don&#39;t forget all the other skills you need, including non-technical areas.</li>\n<li>Manage risk - Don&#39;t put all your technical eggs in one basket</li>\n<li>Buy low, sell high</li>\n<li>Review and re-balance - This is a very dynamic industry, maybe the technology you started investing is already stone cold by now, maybe you need to brush up on the database technology you haven&#39;t used in a while.</li>\n</ul>\n</li>\n<li>The process of learning will expand your thinking, opening you to new possibilities and new ways of doing things.</li>\n<li>If you can&#39;t find answer yourself, find out who can.</li>\n<li>All of this reading and researching takes time, so you need to plan ahead. Always have something to read in an otherwise dead moment. Time spent waiting for doctors and dentists can be a great opportunity to catch up on your reading.</li>\n<li>Ask &quot;why&quot; five times.<ul>\n<li>Who does the benefit?</li>\n<li>What&#39;s the context?</li>\n<li>When or where would this work?</li>\n<li>Why is this a problem?</li>\n</ul>\n</li>\n<li>If you are doing very detailed implementation and coding, read a book on design and architecture. If you are doing high-level design, read a book on coding techniques</li>\n</ul>\n<h2 id=\"Topic-7-Communicate\"><a href=\"#Topic-7-Communicate\" class=\"headerlink\" title=\"Topic 7: Communicate\"></a>Topic 7: Communicate</h2><ul>\n<li>A large part of our day is spent communicating, so we need to do it well.</li>\n<li>Treat English as just another programming language.</li>\n<li>The meaning of your communication is the response you get.</li>\n<li>Plan what you want to say - ask yourself &quot;does this communicate what I want to express to my audience in a way that works for them?&quot;</li>\n<li>Make what you&#39;re saying relevant in time, as well as in content. Sometimes all it takes is the simple question: &quot;Is this a good time to talk about…?&quot;</li>\n<li>Make it look good, don&#39;t just concentrate solely on content. Use markdown for example.</li>\n<li>We often find that the documents end up being less important than the process we go thru to produce them. If possible, involve your readers with early drafts of your document.</li>\n<li>Be a listener</li>\n<li>Keep people informed makes them far more forgiving of the occasional slip, and makes them feel that you haven&#39;t forgotten them.</li>\n<li>We want to apply all of our pragmatic principles to documentation as well as to code</li>\n<li><strong>SUMMARY</strong> <ul>\n<li>Know what you want to say. </li>\n<li>Know your audience. </li>\n<li>Choose your moment. </li>\n<li>Choose a style. </li>\n<li>Make it look good. </li>\n<li>Involve your audience. </li>\n<li>Be a listener. </li>\n<li>Get back to people. </li>\n<li>Keep code and documentation together.</li>\n</ul>\n</li>\n</ul>\n","site":{"data":{"next":{"override":false,"favicon":{"small":"/uploads/favicon-16x16.png","medium":"/uploads/favicon-32x32.png","apple_touch_icon":"/uploads/apple-touch-icon.png","safari_pinned_tab":"/uploads/favicon.png","ms_browserconfig":"/uploads/browserconfig.xml"},"keywords":"Hexo, NexT","rss":null,"footer":{"icon":"user","copyright":null,"powered":true,"theme":{"enable":true,"version":true}},"canonical":true,"seo":false,"index_with_subtitle":false,"menu":{"home":"/ || home","archives":"/archives/ || archive"},"menu_icons":{"enable":true},"scheme":"Pisces","social_icons":{"enable":true,"icons_only":false,"transition":false},"links_icon":"link","links_title":"Links","links_layout":"block","toc":{"enable":true,"number":true,"wrap":false},"sidebar":{"position":"left","display":"post","offset":12,"b2t":false,"scrollpercent":false,"onmobile":false},"scroll_to_more":true,"save_scroll":false,"excerpt_description":true,"auto_excerpt":{"enable":false,"length":30},"read_more_btn":true,"post_meta":{"item_text":true,"created_at":true,"updated_at":false,"categories":true},"post_wordcount":{"item_text":true,"wordcount":false,"min2read":false,"totalcount":false,"separated_meta":true},"post_copyright":{"enable":false,"license":"CC BY-NC-SA 3.0","license_url":"https://creativecommons.org/licenses/by-nc-sa/3.0/"},"mobile_layout_economy":false,"android_chrome_color":"#222","custom_logo":{"enabled":false,"image":null},"marked":{"smartypants":false},"highlight_theme":"normal","font":{"enable":false,"host":null,"global":{"external":true,"family":"Lato","size":null},"headings":{"external":true,"family":null,"size":null},"posts":{"external":true,"family":null},"logo":{"external":true,"family":null,"size":null},"codes":{"external":true,"family":null,"size":null}},"mathjax":{"enable":false,"per_page":false,"cdn":"//cdn.bootcss.com/mathjax/2.7.1/latest.js?config=TeX-AMS-MML_HTMLorMML"},"han":false,"disqus":{"enable":false,"shortname":null,"count":true},"changyan":{"enable":false,"appid":null,"appkey":null},"valine":{"enable":false,"appid":null,"appkey":null,"notify":false,"verify":false,"placeholder":"Just go go","avatar":"mm","guest_info":"nick,mail,link","pageSize":10},"gitment":{"enable":false,"mint":true,"count":true,"lazy":false,"cleanly":false,"language":null,"github_user":null,"github_repo":null,"client_id":null,"client_secret":null,"proxy_gateway":null,"redirect_protocol":null},"needmoreshare2":{"enable":false,"postbottom":{"enable":false,"options":{"iconStyle":"box","boxForm":"horizontal","position":"bottomCenter","networks":"Weibo,Wechat,Douban,QQZone,Twitter,Facebook"}},"float":{"enable":false,"options":{"iconStyle":"box","boxForm":"horizontal","position":"middleRight","networks":"Weibo,Wechat,Douban,QQZone,Twitter,Facebook"}}},"duoshuo_info":{"ua_enable":true,"admin_enable":false,"user_id":0},"facebook_sdk":{"enable":false,"app_id":null,"fb_admin":null,"like_button":null,"webmaster":null},"facebook_comments_plugin":{"enable":false,"num_of_posts":10,"width":"100%","scheme":"light"},"vkontakte_api":{"enable":false,"app_id":null,"like":true,"comments":true,"num_of_posts":10},"rating":{"enable":false,"id":null,"color":"fc6423"},"leancloud_visitors":{"enable":false,"app_id":null,"app_key":null},"firestore":{"enable":false,"collection":"articles","apiKey":null,"projectId":null,"bluebird":false},"busuanzi_count":{"enable":false,"site_uv":true,"site_uv_header":"<i class=\"fa fa-user\"></i>","site_uv_footer":null,"site_pv":true,"site_pv_header":"<i class=\"fa fa-eye\"></i>","site_pv_footer":null,"page_pv":true,"page_pv_header":"<i class=\"fa fa-file-o\"></i>","page_pv_footer":null},"baidu_push":false,"calendar":{"enable":false,"calendar_id":"<required>","api_key":"<required>","orderBy":"startTime","offsetMax":24,"offsetMin":4,"timeZone":null,"showDeleted":false,"singleEvents":true,"maxResults":250},"algolia_search":{"enable":false,"hits":{"per_page":10},"labels":{"input_placeholder":"Search for Posts","hits_empty":"We didn't find any results for the search: ${query}","hits_stats":"${hits} results found in ${time} ms"}},"local_search":{"enable":false,"trigger":"auto","top_n_per_article":1},"exturl":false,"note":{"style":"simple","icons":false,"border_radius":3,"light_bg_offset":0},"label":true,"tabs":{"enable":true,"transition":{"tabs":false,"labels":true},"border_radius":0},"motion":{"enable":true,"async":false,"transition":{"post_block":"fadeIn","post_header":"slideDownIn","post_body":"slideDownIn","coll_header":"slideLeftIn","sidebar":"slideUpIn"}},"fancybox":true,"pace":false,"pace_theme":"pace-theme-minimal","canvas_nest":false,"three_waves":false,"canvas_lines":false,"canvas_sphere":false,"canvas_ribbon":{"enable":false,"size":300,"alpha":0.6,"zIndex":-1},"vendors":{"_internal":"lib","jquery":null,"fancybox":null,"fancybox_css":null,"fastclick":null,"lazyload":null,"velocity":null,"velocity_ui":null,"ua_parser":null,"fontawesome":null,"algolia_instant_js":null,"algolia_instant_css":null,"pace":null,"pace_css":null,"canvas_nest":null,"three":null,"three_waves":null,"canvas_lines":null,"canvas_sphere":null,"canvas_ribbon":null,"han":null,"needMoreShare2":null},"css":"css","js":"js","images":"images","version":"5.1.4"}}},"excerpt":"<h1 id=\"Chapter-1-A-pragmatic-strategy\"><a href=\"#Chapter-1-A-pragmatic-strategy\" class=\"headerlink\" title=\"Chapter 1 A pragmatic strategy\"></a>Chapter 1 A pragmatic strategy</h1>","more":"<h2 id=\"Topic-1-It-39-s-your-life\"><a href=\"#Topic-1-It-39-s-your-life\" class=\"headerlink\" title=\"Topic 1: It&#39;s your life\"></a>Topic 1: It&#39;s your life</h2><p>Many developers are frustrated and have lots of complaints about technology has passed them by, their team sucks, etc…</p>\n<p>Why can&#39;t you change it?</p>\n<ul>\n<li><p>Martin Fowler says <a href=\"http://wiki.c2.com/?ChangeYourOrganization\" target=\"_blank\" rel=\"noopener\">you can change your organization or change your organization</a></p>\n</li>\n<li><p>Make time to learn, even if it requires some of your personal time.</p>\n</li>\n<li><p>Ask if you want to work remotely. If they say no, then find someone who says yes.</p>\n</li>\n</ul>\n<h2 id=\"Topic-2-The-cat-ate-my-source-code\"><a href=\"#Topic-2-The-cat-ate-my-source-code\" class=\"headerlink\" title=\"Topic 2: The cat ate my source code\"></a>Topic 2: The cat ate my source code</h2><p>Even the best projects can have mistakes. These things happen, and we try to deal with them as professionally as we can. We must own up to our shortcomings - our ignorance and our mistakes.</p>\n<ul>\n<li>Trust in a team is absolutely essential for creativity and collaboration. In a healthy environment, you can safely speak your mind, present your ideas, and rely on your team members who can in turn rely on you.</li>\n<li>When you accept the responsibility for an outcome, you should expect to be held accountable for it. <strong>When you make a mistake, admit it honestly and try to offer options.</strong></li>\n<li><strong>Don&#39;t blame on someone or something else, or make up an excuse. Any of these may play a role, but it&#39;s up to you to provide solutions, not excuses.</strong></li>\n<li>If there was a risk that the vendor wouldn&#39;t come through for you, you should have had a contingency plan.If your mass storage melts, and you don&#39;t have a backup, it&#39;s your fault.</li>\n<li>Before approaching to anyone to tell them why something is not working, stop and listen to yourself. Talk to the rubber duck on your monitor: does your excuse sound reasonable or stupid? How&#39;s it going to sound to your boss?</li>\n<li><strong>Instead of excuses, provide options.</strong> Don&#39;t say it can&#39;t be done, explain what can be done to salvage the situation.<ul>\n<li>Does code have to be deleted?</li>\n<li>Do you need to spend time prototyping to determine the best way to proceed?</li>\n<li>Do you need to introduce better testing or automation?</li>\n<li>Do you need other people to help?</li>\n<li>Do you need to spend more time with the users?</li>\n<li>Do you need to learn some technique in greater depth? Would a book or a course help?</li>\n</ul>\n</li>\n<li>Try not to flush out the lame excuses before voicing them aloud. If you must, tell your cat first.</li>\n<li>When you find yourself saying &quot;I don&#39;t know&quot;, be sure to follow it up with &quot;but I&#39;ll find out.&quot; It&#39;s a great way to admit what you don&#39;t know, but then take responsibility like a pro.</li>\n</ul>\n<h2 id=\"Topic-3-Software-entropy\"><a href=\"#Topic-3-Software-entropy\" class=\"headerlink\" title=\"Topic 3: Software entropy\"></a>Topic 3: Software entropy</h2><ul>\n<li>A broken window can turn a clean intact inhabited building into a smashed and abandoned derelict very quickly.</li>\n<li>Don&#39;t live with broken window, fix them as soon as it&#39;s discovered. If you don&#39;t have enough time, board it up.</li>\n<li>Don&#39;t cause collateral damage just because there&#39;s a crisis of some sort. One broken window is one too many.</li>\n</ul>\n<h2 id=\"Topic-4-Stone-soup-and-boiled-frogs\"><a href=\"#Topic-4-Stone-soup-and-boiled-frogs\" class=\"headerlink\" title=\"Topic 4: Stone soup and boiled frogs\"></a>Topic 4: Stone soup and boiled frogs</h2><ul>\n<li>Start-up fatigue: you may be in a situation where you know what needs to be done, and you know you are right. But ask permission to tackle the thing and you will be met with delays and blank stares. People will form committees, budgets will need approval and things will get complicated. Everyone will guard their own resources.</li>\n<li>People find it easier to join an ongoing success.</li>\n<li>It&#39;s often the accumulation of small things that breaks morale and teams.</li>\n</ul>\n<h2 id=\"Topic-5-Good-enough-software\"><a href=\"#Topic-5-Good-enough-software\" class=\"headerlink\" title=\"Topic 5: Good-enough software\"></a>Topic 5: Good-enough software</h2><ul>\n<li>It&#39;s equally unprofessional to promise impossible time scales and to cut basic engineering corners to meet a deadline</li>\n<li>Don&#39;t spoil a perfectly good program by over-embellishment and over-refinement. Move on, and let your code stand in its own right for a while.</li>\n</ul>\n<h2 id=\"Topic-6-Your-knowledge-portfolio\"><a href=\"#Topic-6-Your-knowledge-portfolio\" class=\"headerlink\" title=\"Topic 6: Your knowledge portfolio\"></a>Topic 6: Your knowledge portfolio</h2><ul>\n<li>Your knowledge and experience are your most important day-to-day professional assets. <strong>Unfortunately, they are expiring assets</strong>.</li>\n<li>Your ability to learn new things is your most important strategic asset.<ul>\n<li>Invest regularly - you must invest in your knowledge portfolio regularly even if it&#39;s just a small amount. The habit is as important as the sums, so plan to use a consistent time and place, away from interruptions.<ul>\n<li>Learn at least one new language every year</li>\n<li>Read a technical book each month</li>\n<li>Read non-technical books too</li>\n<li>Take classes</li>\n<li>Participate in local user groups and meetups, actively participate</li>\n<li>Experiment with different environments</li>\n<li>Stay current</li>\n</ul>\n</li>\n<li>Diversify - The more technologies you are comfortable with, the better you will be to adjust to change. And don&#39;t forget all the other skills you need, including non-technical areas.</li>\n<li>Manage risk - Don&#39;t put all your technical eggs in one basket</li>\n<li>Buy low, sell high</li>\n<li>Review and re-balance - This is a very dynamic industry, maybe the technology you started investing is already stone cold by now, maybe you need to brush up on the database technology you haven&#39;t used in a while.</li>\n</ul>\n</li>\n<li>The process of learning will expand your thinking, opening you to new possibilities and new ways of doing things.</li>\n<li>If you can&#39;t find answer yourself, find out who can.</li>\n<li>All of this reading and researching takes time, so you need to plan ahead. Always have something to read in an otherwise dead moment. Time spent waiting for doctors and dentists can be a great opportunity to catch up on your reading.</li>\n<li>Ask &quot;why&quot; five times.<ul>\n<li>Who does the benefit?</li>\n<li>What&#39;s the context?</li>\n<li>When or where would this work?</li>\n<li>Why is this a problem?</li>\n</ul>\n</li>\n<li>If you are doing very detailed implementation and coding, read a book on design and architecture. If you are doing high-level design, read a book on coding techniques</li>\n</ul>\n<h2 id=\"Topic-7-Communicate\"><a href=\"#Topic-7-Communicate\" class=\"headerlink\" title=\"Topic 7: Communicate\"></a>Topic 7: Communicate</h2><ul>\n<li>A large part of our day is spent communicating, so we need to do it well.</li>\n<li>Treat English as just another programming language.</li>\n<li>The meaning of your communication is the response you get.</li>\n<li>Plan what you want to say - ask yourself &quot;does this communicate what I want to express to my audience in a way that works for them?&quot;</li>\n<li>Make what you&#39;re saying relevant in time, as well as in content. Sometimes all it takes is the simple question: &quot;Is this a good time to talk about…?&quot;</li>\n<li>Make it look good, don&#39;t just concentrate solely on content. Use markdown for example.</li>\n<li>We often find that the documents end up being less important than the process we go thru to produce them. If possible, involve your readers with early drafts of your document.</li>\n<li>Be a listener</li>\n<li>Keep people informed makes them far more forgiving of the occasional slip, and makes them feel that you haven&#39;t forgotten them.</li>\n<li>We want to apply all of our pragmatic principles to documentation as well as to code</li>\n<li><strong>SUMMARY</strong> <ul>\n<li>Know what you want to say. </li>\n<li>Know your audience. </li>\n<li>Choose your moment. </li>\n<li>Choose a style. </li>\n<li>Make it look good. </li>\n<li>Involve your audience. </li>\n<li>Be a listener. </li>\n<li>Get back to people. </li>\n<li>Keep code and documentation together.</li>\n</ul>\n</li>\n</ul>"},{"title":"The Pragmatic Programmer - Chapter 7","top":false,"cover":false,"toc":true,"mathjax":true,"date":"2020-07-15T03:16:12.000Z","summary":null,"password":null,"_content":"\n# The Pragmatic Programmer - Chapter 7 While you are coding\n<!--more-->\n## Listen to your lizard brain\n\n> The trick is first to notice it is happening, and then to work out why. \n>\n> (Page 328). \n\n## Programming by coincidence\n\n- Always be aware of what you are doing. Fred let things get slowly out of hand, until he ended up boiled, like the frog here. \n- Can you explain the code, in detail, to a more junior programmer? If not, perhaps you are relying on coincidences. \n- Don’t code in the dark. Build an application you don’t fully grasp, or use a technology you don’t understand, and you’ll likely be bitten by coincidences. If you’re not sure why it works, you won’t know why it fails. \n- Proceed from a plan, whether that plan is in your head, on the back of a cocktail napkin, or on a whiteboard.\n- Rely only on reliable things. Don’t depend on assumptions. If you can’t tell if something is reliable, assume the worst. \n- Document your assumptions. Topic 23, Design by Contract, can help clarify your assumptions in your own mind, as well as help communicate them to others. \n- Don’t just test your code, but test your assumptions as well. Don’t guess; actually try it. Write an assertion to test your assumptions (see Topic 25, Assertive Programming). If your assertion is right, you have improved the documentation in your code. If you discover your assumption is wrong, then count yourself lucky.\n- Prioritize your effort. Spend time on the important aspects; more than likely, these are the hard parts. If you don’t have fundamentals or infrastructure correct, brilliant bells and whistles will be irrelevant. \n- Don’t be a slave to history. Don’t let existing code dictate future code. All code can be replaced if it is no longer appropriate. Even within one program, don’t let what you’ve already done constrain what you do next—be ready to refactor (see Topic 40, Refactoring). This decision may impact the project schedule. The assumption is that the impact will be less than the cost of not making the change.\n\n\n\n## Algorithm speed\n\n## Refactoring\n\n> disciplined technique for restructuring an existing body of code, altering its internal structure without changing its external behavior.\n>\n> -- Martin Fowler\n\n### Refactor scenarios:\n\n1. Duplication\n2. Nonorthogonal design\n3. requirement change\n4. Performance\n5. Outdated knowledge\n\n### Refactor tips\n\n1. Don’t try to refactor and add functionality at the same time. \n2. Make sure you have good tests before you begin refactoring. Run the tests as often as possible. That way you will know quickly if your changes have broken anything.\n3. Take short, deliberate steps: move a field from one class to another, split a method, rename a variable. Refactoring often involves making many localized changes that result in a larger-scale change. If you keep your steps small, and test after each step, you will avoid prolonged debugging.\n\n## Test to code\n\n- Tests can definitely help drive development, but as with every drive, unless you have a destination in mind, you can end up going in circles.\n\n- Contract\n\n  If module A has two components A1 and A2, we should test: \n\n  1. A1's contract in full;\n  2. A2's contract in full;\n  3. A's contract\n\n  If A1 and A2 contact tests passed but A's tests failed, then we are sure the problem is on A or how A uses A1/A2.\n\n- Try to feed tests with real-world data;\n\n- Have a magic URL which exposes diagnostic info of the system;\n\n- Property-based testing can surprise you and help you\n\n## Stay safe our there\n\n1. Minimize attack surface area;\n   1. Code complexity\n   2. Input data\n   3. Authorized user\n   4. Unauthenticated services\n   5. Output data\n   6. Debug info\n2. Principle of Least Privilege \n3. Secure Defaults \n   1. The default setting should be the most secure value\n4. Encrypt Sensitive Data \n5. Maintain Security Updates\n\n## Naming things\n\n","source":"_posts/The-Pragmatic-Programmer-Chapter-7.md","raw":"---\ntitle: The Pragmatic Programmer - Chapter 7\ntop: false\ncover: false\ntoc: true\nmathjax: true\ndate: 2020-07-14 23:16:12\nsummary:\ntags: [Career]\ncategories: [Tech]\npassword:\n---\n\n# The Pragmatic Programmer - Chapter 7 While you are coding\n<!--more-->\n## Listen to your lizard brain\n\n> The trick is first to notice it is happening, and then to work out why. \n>\n> (Page 328). \n\n## Programming by coincidence\n\n- Always be aware of what you are doing. Fred let things get slowly out of hand, until he ended up boiled, like the frog here. \n- Can you explain the code, in detail, to a more junior programmer? If not, perhaps you are relying on coincidences. \n- Don’t code in the dark. Build an application you don’t fully grasp, or use a technology you don’t understand, and you’ll likely be bitten by coincidences. If you’re not sure why it works, you won’t know why it fails. \n- Proceed from a plan, whether that plan is in your head, on the back of a cocktail napkin, or on a whiteboard.\n- Rely only on reliable things. Don’t depend on assumptions. If you can’t tell if something is reliable, assume the worst. \n- Document your assumptions. Topic 23, Design by Contract, can help clarify your assumptions in your own mind, as well as help communicate them to others. \n- Don’t just test your code, but test your assumptions as well. Don’t guess; actually try it. Write an assertion to test your assumptions (see Topic 25, Assertive Programming). If your assertion is right, you have improved the documentation in your code. If you discover your assumption is wrong, then count yourself lucky.\n- Prioritize your effort. Spend time on the important aspects; more than likely, these are the hard parts. If you don’t have fundamentals or infrastructure correct, brilliant bells and whistles will be irrelevant. \n- Don’t be a slave to history. Don’t let existing code dictate future code. All code can be replaced if it is no longer appropriate. Even within one program, don’t let what you’ve already done constrain what you do next—be ready to refactor (see Topic 40, Refactoring). This decision may impact the project schedule. The assumption is that the impact will be less than the cost of not making the change.\n\n\n\n## Algorithm speed\n\n## Refactoring\n\n> disciplined technique for restructuring an existing body of code, altering its internal structure without changing its external behavior.\n>\n> -- Martin Fowler\n\n### Refactor scenarios:\n\n1. Duplication\n2. Nonorthogonal design\n3. requirement change\n4. Performance\n5. Outdated knowledge\n\n### Refactor tips\n\n1. Don’t try to refactor and add functionality at the same time. \n2. Make sure you have good tests before you begin refactoring. Run the tests as often as possible. That way you will know quickly if your changes have broken anything.\n3. Take short, deliberate steps: move a field from one class to another, split a method, rename a variable. Refactoring often involves making many localized changes that result in a larger-scale change. If you keep your steps small, and test after each step, you will avoid prolonged debugging.\n\n## Test to code\n\n- Tests can definitely help drive development, but as with every drive, unless you have a destination in mind, you can end up going in circles.\n\n- Contract\n\n  If module A has two components A1 and A2, we should test: \n\n  1. A1's contract in full;\n  2. A2's contract in full;\n  3. A's contract\n\n  If A1 and A2 contact tests passed but A's tests failed, then we are sure the problem is on A or how A uses A1/A2.\n\n- Try to feed tests with real-world data;\n\n- Have a magic URL which exposes diagnostic info of the system;\n\n- Property-based testing can surprise you and help you\n\n## Stay safe our there\n\n1. Minimize attack surface area;\n   1. Code complexity\n   2. Input data\n   3. Authorized user\n   4. Unauthenticated services\n   5. Output data\n   6. Debug info\n2. Principle of Least Privilege \n3. Secure Defaults \n   1. The default setting should be the most secure value\n4. Encrypt Sensitive Data \n5. Maintain Security Updates\n\n## Naming things\n\n","slug":"The-Pragmatic-Programmer-Chapter-7","published":1,"updated":"2020-07-22T20:59:06.179Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ckcxuqesn001ufkjx00x4864m","content":"<h1 id=\"The-Pragmatic-Programmer-Chapter-7-While-you-are-coding\"><a href=\"#The-Pragmatic-Programmer-Chapter-7-While-you-are-coding\" class=\"headerlink\" title=\"The Pragmatic Programmer - Chapter 7 While you are coding\"></a>The Pragmatic Programmer - Chapter 7 While you are coding</h1><a id=\"more\"></a>\n<h2 id=\"Listen-to-your-lizard-brain\"><a href=\"#Listen-to-your-lizard-brain\" class=\"headerlink\" title=\"Listen to your lizard brain\"></a>Listen to your lizard brain</h2><blockquote>\n<p>The trick is first to notice it is happening, and then to work out why. </p>\n<p>(Page 328). </p>\n</blockquote>\n<h2 id=\"Programming-by-coincidence\"><a href=\"#Programming-by-coincidence\" class=\"headerlink\" title=\"Programming by coincidence\"></a>Programming by coincidence</h2><ul>\n<li>Always be aware of what you are doing. Fred let things get slowly out of hand, until he ended up boiled, like the frog here. </li>\n<li>Can you explain the code, in detail, to a more junior programmer? If not, perhaps you are relying on coincidences. </li>\n<li>Don’t code in the dark. Build an application you don’t fully grasp, or use a technology you don’t understand, and you’ll likely be bitten by coincidences. If you’re not sure why it works, you won’t know why it fails. </li>\n<li>Proceed from a plan, whether that plan is in your head, on the back of a cocktail napkin, or on a whiteboard.</li>\n<li>Rely only on reliable things. Don’t depend on assumptions. If you can’t tell if something is reliable, assume the worst. </li>\n<li>Document your assumptions. Topic 23, Design by Contract, can help clarify your assumptions in your own mind, as well as help communicate them to others. </li>\n<li>Don’t just test your code, but test your assumptions as well. Don’t guess; actually try it. Write an assertion to test your assumptions (see Topic 25, Assertive Programming). If your assertion is right, you have improved the documentation in your code. If you discover your assumption is wrong, then count yourself lucky.</li>\n<li>Prioritize your effort. Spend time on the important aspects; more than likely, these are the hard parts. If you don’t have fundamentals or infrastructure correct, brilliant bells and whistles will be irrelevant. </li>\n<li>Don’t be a slave to history. Don’t let existing code dictate future code. All code can be replaced if it is no longer appropriate. Even within one program, don’t let what you’ve already done constrain what you do next—be ready to refactor (see Topic 40, Refactoring). This decision may impact the project schedule. The assumption is that the impact will be less than the cost of not making the change.</li>\n</ul>\n<h2 id=\"Algorithm-speed\"><a href=\"#Algorithm-speed\" class=\"headerlink\" title=\"Algorithm speed\"></a>Algorithm speed</h2><h2 id=\"Refactoring\"><a href=\"#Refactoring\" class=\"headerlink\" title=\"Refactoring\"></a>Refactoring</h2><blockquote>\n<p>disciplined technique for restructuring an existing body of code, altering its internal structure without changing its external behavior.</p>\n<p>-- Martin Fowler</p>\n</blockquote>\n<h3 id=\"Refactor-scenarios\"><a href=\"#Refactor-scenarios\" class=\"headerlink\" title=\"Refactor scenarios:\"></a>Refactor scenarios:</h3><ol>\n<li>Duplication</li>\n<li>Nonorthogonal design</li>\n<li>requirement change</li>\n<li>Performance</li>\n<li>Outdated knowledge</li>\n</ol>\n<h3 id=\"Refactor-tips\"><a href=\"#Refactor-tips\" class=\"headerlink\" title=\"Refactor tips\"></a>Refactor tips</h3><ol>\n<li>Don’t try to refactor and add functionality at the same time. </li>\n<li>Make sure you have good tests before you begin refactoring. Run the tests as often as possible. That way you will know quickly if your changes have broken anything.</li>\n<li>Take short, deliberate steps: move a field from one class to another, split a method, rename a variable. Refactoring often involves making many localized changes that result in a larger-scale change. If you keep your steps small, and test after each step, you will avoid prolonged debugging.</li>\n</ol>\n<h2 id=\"Test-to-code\"><a href=\"#Test-to-code\" class=\"headerlink\" title=\"Test to code\"></a>Test to code</h2><ul>\n<li><p>Tests can definitely help drive development, but as with every drive, unless you have a destination in mind, you can end up going in circles.</p>\n</li>\n<li><p>Contract</p>\n<p>If module A has two components A1 and A2, we should test: </p>\n<ol>\n<li>A1&#39;s contract in full;</li>\n<li>A2&#39;s contract in full;</li>\n<li>A&#39;s contract</li>\n</ol>\n<p>If A1 and A2 contact tests passed but A&#39;s tests failed, then we are sure the problem is on A or how A uses A1/A2.</p>\n</li>\n<li><p>Try to feed tests with real-world data;</p>\n</li>\n<li><p>Have a magic URL which exposes diagnostic info of the system;</p>\n</li>\n<li><p>Property-based testing can surprise you and help you</p>\n</li>\n</ul>\n<h2 id=\"Stay-safe-our-there\"><a href=\"#Stay-safe-our-there\" class=\"headerlink\" title=\"Stay safe our there\"></a>Stay safe our there</h2><ol>\n<li>Minimize attack surface area;<ol>\n<li>Code complexity</li>\n<li>Input data</li>\n<li>Authorized user</li>\n<li>Unauthenticated services</li>\n<li>Output data</li>\n<li>Debug info</li>\n</ol>\n</li>\n<li>Principle of Least Privilege </li>\n<li>Secure Defaults <ol>\n<li>The default setting should be the most secure value</li>\n</ol>\n</li>\n<li>Encrypt Sensitive Data </li>\n<li>Maintain Security Updates</li>\n</ol>\n<h2 id=\"Naming-things\"><a href=\"#Naming-things\" class=\"headerlink\" title=\"Naming things\"></a>Naming things</h2>","site":{"data":{"next":{"override":false,"favicon":{"small":"/uploads/favicon-16x16.png","medium":"/uploads/favicon-32x32.png","apple_touch_icon":"/uploads/apple-touch-icon.png","safari_pinned_tab":"/uploads/favicon.png","ms_browserconfig":"/uploads/browserconfig.xml"},"keywords":"Hexo, NexT","rss":null,"footer":{"icon":"user","copyright":null,"powered":true,"theme":{"enable":true,"version":true}},"canonical":true,"seo":false,"index_with_subtitle":false,"menu":{"home":"/ || home","archives":"/archives/ || archive"},"menu_icons":{"enable":true},"scheme":"Pisces","social_icons":{"enable":true,"icons_only":false,"transition":false},"links_icon":"link","links_title":"Links","links_layout":"block","toc":{"enable":true,"number":true,"wrap":false},"sidebar":{"position":"left","display":"post","offset":12,"b2t":false,"scrollpercent":false,"onmobile":false},"scroll_to_more":true,"save_scroll":false,"excerpt_description":true,"auto_excerpt":{"enable":false,"length":30},"read_more_btn":true,"post_meta":{"item_text":true,"created_at":true,"updated_at":false,"categories":true},"post_wordcount":{"item_text":true,"wordcount":false,"min2read":false,"totalcount":false,"separated_meta":true},"post_copyright":{"enable":false,"license":"CC BY-NC-SA 3.0","license_url":"https://creativecommons.org/licenses/by-nc-sa/3.0/"},"mobile_layout_economy":false,"android_chrome_color":"#222","custom_logo":{"enabled":false,"image":null},"marked":{"smartypants":false},"highlight_theme":"normal","font":{"enable":false,"host":null,"global":{"external":true,"family":"Lato","size":null},"headings":{"external":true,"family":null,"size":null},"posts":{"external":true,"family":null},"logo":{"external":true,"family":null,"size":null},"codes":{"external":true,"family":null,"size":null}},"mathjax":{"enable":false,"per_page":false,"cdn":"//cdn.bootcss.com/mathjax/2.7.1/latest.js?config=TeX-AMS-MML_HTMLorMML"},"han":false,"disqus":{"enable":false,"shortname":null,"count":true},"changyan":{"enable":false,"appid":null,"appkey":null},"valine":{"enable":false,"appid":null,"appkey":null,"notify":false,"verify":false,"placeholder":"Just go go","avatar":"mm","guest_info":"nick,mail,link","pageSize":10},"gitment":{"enable":false,"mint":true,"count":true,"lazy":false,"cleanly":false,"language":null,"github_user":null,"github_repo":null,"client_id":null,"client_secret":null,"proxy_gateway":null,"redirect_protocol":null},"needmoreshare2":{"enable":false,"postbottom":{"enable":false,"options":{"iconStyle":"box","boxForm":"horizontal","position":"bottomCenter","networks":"Weibo,Wechat,Douban,QQZone,Twitter,Facebook"}},"float":{"enable":false,"options":{"iconStyle":"box","boxForm":"horizontal","position":"middleRight","networks":"Weibo,Wechat,Douban,QQZone,Twitter,Facebook"}}},"duoshuo_info":{"ua_enable":true,"admin_enable":false,"user_id":0},"facebook_sdk":{"enable":false,"app_id":null,"fb_admin":null,"like_button":null,"webmaster":null},"facebook_comments_plugin":{"enable":false,"num_of_posts":10,"width":"100%","scheme":"light"},"vkontakte_api":{"enable":false,"app_id":null,"like":true,"comments":true,"num_of_posts":10},"rating":{"enable":false,"id":null,"color":"fc6423"},"leancloud_visitors":{"enable":false,"app_id":null,"app_key":null},"firestore":{"enable":false,"collection":"articles","apiKey":null,"projectId":null,"bluebird":false},"busuanzi_count":{"enable":false,"site_uv":true,"site_uv_header":"<i class=\"fa fa-user\"></i>","site_uv_footer":null,"site_pv":true,"site_pv_header":"<i class=\"fa fa-eye\"></i>","site_pv_footer":null,"page_pv":true,"page_pv_header":"<i class=\"fa fa-file-o\"></i>","page_pv_footer":null},"baidu_push":false,"calendar":{"enable":false,"calendar_id":"<required>","api_key":"<required>","orderBy":"startTime","offsetMax":24,"offsetMin":4,"timeZone":null,"showDeleted":false,"singleEvents":true,"maxResults":250},"algolia_search":{"enable":false,"hits":{"per_page":10},"labels":{"input_placeholder":"Search for Posts","hits_empty":"We didn't find any results for the search: ${query}","hits_stats":"${hits} results found in ${time} ms"}},"local_search":{"enable":false,"trigger":"auto","top_n_per_article":1},"exturl":false,"note":{"style":"simple","icons":false,"border_radius":3,"light_bg_offset":0},"label":true,"tabs":{"enable":true,"transition":{"tabs":false,"labels":true},"border_radius":0},"motion":{"enable":true,"async":false,"transition":{"post_block":"fadeIn","post_header":"slideDownIn","post_body":"slideDownIn","coll_header":"slideLeftIn","sidebar":"slideUpIn"}},"fancybox":true,"pace":false,"pace_theme":"pace-theme-minimal","canvas_nest":false,"three_waves":false,"canvas_lines":false,"canvas_sphere":false,"canvas_ribbon":{"enable":false,"size":300,"alpha":0.6,"zIndex":-1},"vendors":{"_internal":"lib","jquery":null,"fancybox":null,"fancybox_css":null,"fastclick":null,"lazyload":null,"velocity":null,"velocity_ui":null,"ua_parser":null,"fontawesome":null,"algolia_instant_js":null,"algolia_instant_css":null,"pace":null,"pace_css":null,"canvas_nest":null,"three":null,"three_waves":null,"canvas_lines":null,"canvas_sphere":null,"canvas_ribbon":null,"han":null,"needMoreShare2":null},"css":"css","js":"js","images":"images","version":"5.1.4"}}},"excerpt":"<h1 id=\"The-Pragmatic-Programmer-Chapter-7-While-you-are-coding\"><a href=\"#The-Pragmatic-Programmer-Chapter-7-While-you-are-coding\" class=\"headerlink\" title=\"The Pragmatic Programmer - Chapter 7 While you are coding\"></a>The Pragmatic Programmer - Chapter 7 While you are coding</h1>","more":"<h2 id=\"Listen-to-your-lizard-brain\"><a href=\"#Listen-to-your-lizard-brain\" class=\"headerlink\" title=\"Listen to your lizard brain\"></a>Listen to your lizard brain</h2><blockquote>\n<p>The trick is first to notice it is happening, and then to work out why. </p>\n<p>(Page 328). </p>\n</blockquote>\n<h2 id=\"Programming-by-coincidence\"><a href=\"#Programming-by-coincidence\" class=\"headerlink\" title=\"Programming by coincidence\"></a>Programming by coincidence</h2><ul>\n<li>Always be aware of what you are doing. Fred let things get slowly out of hand, until he ended up boiled, like the frog here. </li>\n<li>Can you explain the code, in detail, to a more junior programmer? If not, perhaps you are relying on coincidences. </li>\n<li>Don’t code in the dark. Build an application you don’t fully grasp, or use a technology you don’t understand, and you’ll likely be bitten by coincidences. If you’re not sure why it works, you won’t know why it fails. </li>\n<li>Proceed from a plan, whether that plan is in your head, on the back of a cocktail napkin, or on a whiteboard.</li>\n<li>Rely only on reliable things. Don’t depend on assumptions. If you can’t tell if something is reliable, assume the worst. </li>\n<li>Document your assumptions. Topic 23, Design by Contract, can help clarify your assumptions in your own mind, as well as help communicate them to others. </li>\n<li>Don’t just test your code, but test your assumptions as well. Don’t guess; actually try it. Write an assertion to test your assumptions (see Topic 25, Assertive Programming). If your assertion is right, you have improved the documentation in your code. If you discover your assumption is wrong, then count yourself lucky.</li>\n<li>Prioritize your effort. Spend time on the important aspects; more than likely, these are the hard parts. If you don’t have fundamentals or infrastructure correct, brilliant bells and whistles will be irrelevant. </li>\n<li>Don’t be a slave to history. Don’t let existing code dictate future code. All code can be replaced if it is no longer appropriate. Even within one program, don’t let what you’ve already done constrain what you do next—be ready to refactor (see Topic 40, Refactoring). This decision may impact the project schedule. The assumption is that the impact will be less than the cost of not making the change.</li>\n</ul>\n<h2 id=\"Algorithm-speed\"><a href=\"#Algorithm-speed\" class=\"headerlink\" title=\"Algorithm speed\"></a>Algorithm speed</h2><h2 id=\"Refactoring\"><a href=\"#Refactoring\" class=\"headerlink\" title=\"Refactoring\"></a>Refactoring</h2><blockquote>\n<p>disciplined technique for restructuring an existing body of code, altering its internal structure without changing its external behavior.</p>\n<p>-- Martin Fowler</p>\n</blockquote>\n<h3 id=\"Refactor-scenarios\"><a href=\"#Refactor-scenarios\" class=\"headerlink\" title=\"Refactor scenarios:\"></a>Refactor scenarios:</h3><ol>\n<li>Duplication</li>\n<li>Nonorthogonal design</li>\n<li>requirement change</li>\n<li>Performance</li>\n<li>Outdated knowledge</li>\n</ol>\n<h3 id=\"Refactor-tips\"><a href=\"#Refactor-tips\" class=\"headerlink\" title=\"Refactor tips\"></a>Refactor tips</h3><ol>\n<li>Don’t try to refactor and add functionality at the same time. </li>\n<li>Make sure you have good tests before you begin refactoring. Run the tests as often as possible. That way you will know quickly if your changes have broken anything.</li>\n<li>Take short, deliberate steps: move a field from one class to another, split a method, rename a variable. Refactoring often involves making many localized changes that result in a larger-scale change. If you keep your steps small, and test after each step, you will avoid prolonged debugging.</li>\n</ol>\n<h2 id=\"Test-to-code\"><a href=\"#Test-to-code\" class=\"headerlink\" title=\"Test to code\"></a>Test to code</h2><ul>\n<li><p>Tests can definitely help drive development, but as with every drive, unless you have a destination in mind, you can end up going in circles.</p>\n</li>\n<li><p>Contract</p>\n<p>If module A has two components A1 and A2, we should test: </p>\n<ol>\n<li>A1&#39;s contract in full;</li>\n<li>A2&#39;s contract in full;</li>\n<li>A&#39;s contract</li>\n</ol>\n<p>If A1 and A2 contact tests passed but A&#39;s tests failed, then we are sure the problem is on A or how A uses A1/A2.</p>\n</li>\n<li><p>Try to feed tests with real-world data;</p>\n</li>\n<li><p>Have a magic URL which exposes diagnostic info of the system;</p>\n</li>\n<li><p>Property-based testing can surprise you and help you</p>\n</li>\n</ul>\n<h2 id=\"Stay-safe-our-there\"><a href=\"#Stay-safe-our-there\" class=\"headerlink\" title=\"Stay safe our there\"></a>Stay safe our there</h2><ol>\n<li>Minimize attack surface area;<ol>\n<li>Code complexity</li>\n<li>Input data</li>\n<li>Authorized user</li>\n<li>Unauthenticated services</li>\n<li>Output data</li>\n<li>Debug info</li>\n</ol>\n</li>\n<li>Principle of Least Privilege </li>\n<li>Secure Defaults <ol>\n<li>The default setting should be the most secure value</li>\n</ol>\n</li>\n<li>Encrypt Sensitive Data </li>\n<li>Maintain Security Updates</li>\n</ol>\n<h2 id=\"Naming-things\"><a href=\"#Naming-things\" class=\"headerlink\" title=\"Naming things\"></a>Naming things</h2>"},{"title":"The Pragmatic Programmer Chapter 8","top":false,"cover":false,"toc":true,"mathjax":true,"date":"2020-07-22T20:58:18.000Z","summary":null,"password":null,"_content":"\n# The Pragmatic Programmer - Chapter 8 Before the project\n<!--more-->\n\n## The requirements kit\n\n1. Requirements are learned in a feedback loop\n2. What user wants vs. how user wants it\n3. Documents are not for clients but for developers to plan\n\n## Solving impossible puzzles\n\nYour conscious brain is aware of the problem, but your conscious brain is really pretty dumb (no offense). So it’s time to give your real brain, that amazing associative neural net that lurks below your consciousness, some space. You’ll be amazed how often the answer will just pop into your head when you deliberately distract yourself.\n\nTo put it plainly—people who were distracted did better on a complex problem-solving task than people who put in conscious effort.\n\n## Working together\n\n- Build the code, not your ego. It’s not about who’s brightest; we all have our moments, good and bad. \n- Start small. Mob with only 4-5 people, or start with just a few pairs, in short sessions. \n- Criticize the code, not the person. “Let’s look at this block” sounds much better than “you’re wrong.” \n- Listen and try to understand others’ viewpoints. Different isn’t wrong.\n- Conduct frequent retrospectives to try and improve for next time.\n\n## The essence of agility\n\nPrinciple of Agile:\n\n- **Individuals and interactions** over processes and tools \n- **Working software** over comprehensive documentation \n- **Customer collaboration** over contract negotiation \n- **Responding to change** over following a plan\n\nWhat do we do?\n\n1. Work out where you are\n2. Make the smallest meaningful step towards where you want to be\n3. Evaluate where you end up, and fix anything you broke","source":"_posts/The-Pragmatic-Programmer-Chapter-8.md","raw":"---\ntitle: The Pragmatic Programmer Chapter 8\ntop: false\ncover: false\ntoc: true\nmathjax: true\ndate: 2020-07-22 16:58:18\nsummary:\ntags: [Career]\ncategories: [Tech]\npassword:\n---\n\n# The Pragmatic Programmer - Chapter 8 Before the project\n<!--more-->\n\n## The requirements kit\n\n1. Requirements are learned in a feedback loop\n2. What user wants vs. how user wants it\n3. Documents are not for clients but for developers to plan\n\n## Solving impossible puzzles\n\nYour conscious brain is aware of the problem, but your conscious brain is really pretty dumb (no offense). So it’s time to give your real brain, that amazing associative neural net that lurks below your consciousness, some space. You’ll be amazed how often the answer will just pop into your head when you deliberately distract yourself.\n\nTo put it plainly—people who were distracted did better on a complex problem-solving task than people who put in conscious effort.\n\n## Working together\n\n- Build the code, not your ego. It’s not about who’s brightest; we all have our moments, good and bad. \n- Start small. Mob with only 4-5 people, or start with just a few pairs, in short sessions. \n- Criticize the code, not the person. “Let’s look at this block” sounds much better than “you’re wrong.” \n- Listen and try to understand others’ viewpoints. Different isn’t wrong.\n- Conduct frequent retrospectives to try and improve for next time.\n\n## The essence of agility\n\nPrinciple of Agile:\n\n- **Individuals and interactions** over processes and tools \n- **Working software** over comprehensive documentation \n- **Customer collaboration** over contract negotiation \n- **Responding to change** over following a plan\n\nWhat do we do?\n\n1. Work out where you are\n2. Make the smallest meaningful step towards where you want to be\n3. Evaluate where you end up, and fix anything you broke","slug":"The-Pragmatic-Programmer-Chapter-8","published":1,"updated":"2020-07-22T20:59:26.927Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ckcxuqest001xfkjx45ip2snq","content":"<h1 id=\"The-Pragmatic-Programmer-Chapter-8-Before-the-project\"><a href=\"#The-Pragmatic-Programmer-Chapter-8-Before-the-project\" class=\"headerlink\" title=\"The Pragmatic Programmer - Chapter 8 Before the project\"></a>The Pragmatic Programmer - Chapter 8 Before the project</h1><a id=\"more\"></a>\n\n<h2 id=\"The-requirements-kit\"><a href=\"#The-requirements-kit\" class=\"headerlink\" title=\"The requirements kit\"></a>The requirements kit</h2><ol>\n<li>Requirements are learned in a feedback loop</li>\n<li>What user wants vs. how user wants it</li>\n<li>Documents are not for clients but for developers to plan</li>\n</ol>\n<h2 id=\"Solving-impossible-puzzles\"><a href=\"#Solving-impossible-puzzles\" class=\"headerlink\" title=\"Solving impossible puzzles\"></a>Solving impossible puzzles</h2><p>Your conscious brain is aware of the problem, but your conscious brain is really pretty dumb (no offense). So it’s time to give your real brain, that amazing associative neural net that lurks below your consciousness, some space. You’ll be amazed how often the answer will just pop into your head when you deliberately distract yourself.</p>\n<p>To put it plainly—people who were distracted did better on a complex problem-solving task than people who put in conscious effort.</p>\n<h2 id=\"Working-together\"><a href=\"#Working-together\" class=\"headerlink\" title=\"Working together\"></a>Working together</h2><ul>\n<li>Build the code, not your ego. It’s not about who’s brightest; we all have our moments, good and bad. </li>\n<li>Start small. Mob with only 4-5 people, or start with just a few pairs, in short sessions. </li>\n<li>Criticize the code, not the person. “Let’s look at this block” sounds much better than “you’re wrong.” </li>\n<li>Listen and try to understand others’ viewpoints. Different isn’t wrong.</li>\n<li>Conduct frequent retrospectives to try and improve for next time.</li>\n</ul>\n<h2 id=\"The-essence-of-agility\"><a href=\"#The-essence-of-agility\" class=\"headerlink\" title=\"The essence of agility\"></a>The essence of agility</h2><p>Principle of Agile:</p>\n<ul>\n<li><strong>Individuals and interactions</strong> over processes and tools </li>\n<li><strong>Working software</strong> over comprehensive documentation </li>\n<li><strong>Customer collaboration</strong> over contract negotiation </li>\n<li><strong>Responding to change</strong> over following a plan</li>\n</ul>\n<p>What do we do?</p>\n<ol>\n<li>Work out where you are</li>\n<li>Make the smallest meaningful step towards where you want to be</li>\n<li>Evaluate where you end up, and fix anything you broke</li>\n</ol>\n","site":{"data":{"next":{"override":false,"favicon":{"small":"/uploads/favicon-16x16.png","medium":"/uploads/favicon-32x32.png","apple_touch_icon":"/uploads/apple-touch-icon.png","safari_pinned_tab":"/uploads/favicon.png","ms_browserconfig":"/uploads/browserconfig.xml"},"keywords":"Hexo, NexT","rss":null,"footer":{"icon":"user","copyright":null,"powered":true,"theme":{"enable":true,"version":true}},"canonical":true,"seo":false,"index_with_subtitle":false,"menu":{"home":"/ || home","archives":"/archives/ || archive"},"menu_icons":{"enable":true},"scheme":"Pisces","social_icons":{"enable":true,"icons_only":false,"transition":false},"links_icon":"link","links_title":"Links","links_layout":"block","toc":{"enable":true,"number":true,"wrap":false},"sidebar":{"position":"left","display":"post","offset":12,"b2t":false,"scrollpercent":false,"onmobile":false},"scroll_to_more":true,"save_scroll":false,"excerpt_description":true,"auto_excerpt":{"enable":false,"length":30},"read_more_btn":true,"post_meta":{"item_text":true,"created_at":true,"updated_at":false,"categories":true},"post_wordcount":{"item_text":true,"wordcount":false,"min2read":false,"totalcount":false,"separated_meta":true},"post_copyright":{"enable":false,"license":"CC BY-NC-SA 3.0","license_url":"https://creativecommons.org/licenses/by-nc-sa/3.0/"},"mobile_layout_economy":false,"android_chrome_color":"#222","custom_logo":{"enabled":false,"image":null},"marked":{"smartypants":false},"highlight_theme":"normal","font":{"enable":false,"host":null,"global":{"external":true,"family":"Lato","size":null},"headings":{"external":true,"family":null,"size":null},"posts":{"external":true,"family":null},"logo":{"external":true,"family":null,"size":null},"codes":{"external":true,"family":null,"size":null}},"mathjax":{"enable":false,"per_page":false,"cdn":"//cdn.bootcss.com/mathjax/2.7.1/latest.js?config=TeX-AMS-MML_HTMLorMML"},"han":false,"disqus":{"enable":false,"shortname":null,"count":true},"changyan":{"enable":false,"appid":null,"appkey":null},"valine":{"enable":false,"appid":null,"appkey":null,"notify":false,"verify":false,"placeholder":"Just go go","avatar":"mm","guest_info":"nick,mail,link","pageSize":10},"gitment":{"enable":false,"mint":true,"count":true,"lazy":false,"cleanly":false,"language":null,"github_user":null,"github_repo":null,"client_id":null,"client_secret":null,"proxy_gateway":null,"redirect_protocol":null},"needmoreshare2":{"enable":false,"postbottom":{"enable":false,"options":{"iconStyle":"box","boxForm":"horizontal","position":"bottomCenter","networks":"Weibo,Wechat,Douban,QQZone,Twitter,Facebook"}},"float":{"enable":false,"options":{"iconStyle":"box","boxForm":"horizontal","position":"middleRight","networks":"Weibo,Wechat,Douban,QQZone,Twitter,Facebook"}}},"duoshuo_info":{"ua_enable":true,"admin_enable":false,"user_id":0},"facebook_sdk":{"enable":false,"app_id":null,"fb_admin":null,"like_button":null,"webmaster":null},"facebook_comments_plugin":{"enable":false,"num_of_posts":10,"width":"100%","scheme":"light"},"vkontakte_api":{"enable":false,"app_id":null,"like":true,"comments":true,"num_of_posts":10},"rating":{"enable":false,"id":null,"color":"fc6423"},"leancloud_visitors":{"enable":false,"app_id":null,"app_key":null},"firestore":{"enable":false,"collection":"articles","apiKey":null,"projectId":null,"bluebird":false},"busuanzi_count":{"enable":false,"site_uv":true,"site_uv_header":"<i class=\"fa fa-user\"></i>","site_uv_footer":null,"site_pv":true,"site_pv_header":"<i class=\"fa fa-eye\"></i>","site_pv_footer":null,"page_pv":true,"page_pv_header":"<i class=\"fa fa-file-o\"></i>","page_pv_footer":null},"baidu_push":false,"calendar":{"enable":false,"calendar_id":"<required>","api_key":"<required>","orderBy":"startTime","offsetMax":24,"offsetMin":4,"timeZone":null,"showDeleted":false,"singleEvents":true,"maxResults":250},"algolia_search":{"enable":false,"hits":{"per_page":10},"labels":{"input_placeholder":"Search for Posts","hits_empty":"We didn't find any results for the search: ${query}","hits_stats":"${hits} results found in ${time} ms"}},"local_search":{"enable":false,"trigger":"auto","top_n_per_article":1},"exturl":false,"note":{"style":"simple","icons":false,"border_radius":3,"light_bg_offset":0},"label":true,"tabs":{"enable":true,"transition":{"tabs":false,"labels":true},"border_radius":0},"motion":{"enable":true,"async":false,"transition":{"post_block":"fadeIn","post_header":"slideDownIn","post_body":"slideDownIn","coll_header":"slideLeftIn","sidebar":"slideUpIn"}},"fancybox":true,"pace":false,"pace_theme":"pace-theme-minimal","canvas_nest":false,"three_waves":false,"canvas_lines":false,"canvas_sphere":false,"canvas_ribbon":{"enable":false,"size":300,"alpha":0.6,"zIndex":-1},"vendors":{"_internal":"lib","jquery":null,"fancybox":null,"fancybox_css":null,"fastclick":null,"lazyload":null,"velocity":null,"velocity_ui":null,"ua_parser":null,"fontawesome":null,"algolia_instant_js":null,"algolia_instant_css":null,"pace":null,"pace_css":null,"canvas_nest":null,"three":null,"three_waves":null,"canvas_lines":null,"canvas_sphere":null,"canvas_ribbon":null,"han":null,"needMoreShare2":null},"css":"css","js":"js","images":"images","version":"5.1.4"}}},"excerpt":"<h1 id=\"The-Pragmatic-Programmer-Chapter-8-Before-the-project\"><a href=\"#The-Pragmatic-Programmer-Chapter-8-Before-the-project\" class=\"headerlink\" title=\"The Pragmatic Programmer - Chapter 8 Before the project\"></a>The Pragmatic Programmer - Chapter 8 Before the project</h1>","more":"<h2 id=\"The-requirements-kit\"><a href=\"#The-requirements-kit\" class=\"headerlink\" title=\"The requirements kit\"></a>The requirements kit</h2><ol>\n<li>Requirements are learned in a feedback loop</li>\n<li>What user wants vs. how user wants it</li>\n<li>Documents are not for clients but for developers to plan</li>\n</ol>\n<h2 id=\"Solving-impossible-puzzles\"><a href=\"#Solving-impossible-puzzles\" class=\"headerlink\" title=\"Solving impossible puzzles\"></a>Solving impossible puzzles</h2><p>Your conscious brain is aware of the problem, but your conscious brain is really pretty dumb (no offense). So it’s time to give your real brain, that amazing associative neural net that lurks below your consciousness, some space. You’ll be amazed how often the answer will just pop into your head when you deliberately distract yourself.</p>\n<p>To put it plainly—people who were distracted did better on a complex problem-solving task than people who put in conscious effort.</p>\n<h2 id=\"Working-together\"><a href=\"#Working-together\" class=\"headerlink\" title=\"Working together\"></a>Working together</h2><ul>\n<li>Build the code, not your ego. It’s not about who’s brightest; we all have our moments, good and bad. </li>\n<li>Start small. Mob with only 4-5 people, or start with just a few pairs, in short sessions. </li>\n<li>Criticize the code, not the person. “Let’s look at this block” sounds much better than “you’re wrong.” </li>\n<li>Listen and try to understand others’ viewpoints. Different isn’t wrong.</li>\n<li>Conduct frequent retrospectives to try and improve for next time.</li>\n</ul>\n<h2 id=\"The-essence-of-agility\"><a href=\"#The-essence-of-agility\" class=\"headerlink\" title=\"The essence of agility\"></a>The essence of agility</h2><p>Principle of Agile:</p>\n<ul>\n<li><strong>Individuals and interactions</strong> over processes and tools </li>\n<li><strong>Working software</strong> over comprehensive documentation </li>\n<li><strong>Customer collaboration</strong> over contract negotiation </li>\n<li><strong>Responding to change</strong> over following a plan</li>\n</ul>\n<p>What do we do?</p>\n<ol>\n<li>Work out where you are</li>\n<li>Make the smallest meaningful step towards where you want to be</li>\n<li>Evaluate where you end up, and fix anything you broke</li>\n</ol>"},{"title":"work from home 体会","top":false,"cover":false,"toc":true,"mathjax":true,"date":"2020-04-23T12:27:19.000Z","summary":null,"password":null,"_content":"\n目前wfh的节奏虽然还在不断适应，但总体已经到了一个很舒服的程度。\n个人生活的质量有较大的提高，我不用担心做明天的中饭的问题，可以在中午简单地做一个meal，晚上有时候我fasting，所以省下一整块时间做自己的事。\n工作方面，有时候当你有非常明确的东西去做的时候，我可以变得非常高效。但对于别的工作比如说需要和别人去交涉，或者需要别人的一些帮忙时，有时候线上的交流会有一些delay，交流的热情也不如在公司里那么强烈。\n<!--more-->\n我刚开始会有一些struggle，所以我每天给自己定两个大目标，你有对公司做足够的贡献吗？你有对自己做足够的贡献吗？\n更细化一点的话，我会列出三个最重要的事情，今天必须实现，比如一个比较重要的活，或者针对一个topic做一个research，或者写一篇文章，继续读书计划等等。对我来说，清晨的效率比较高，适合做这些事，特别是阅读。\n然后我会列一些不那么重要但是Nice to have的东西，比如读一篇技术类文章，看一个技术类视频，etc...\n\n有一些对工作效率有影响的东西，比如刷手机，是需要想办法去杜绝的，比如早上干完第一件事之前，强制自己不要去刷，因为容易扰乱心神。\n有一个比较有趣的发现是，我是一个内向的人，在家让我非常舒服，我可以在想中断的时候在家里到处走走，这样很助于我转换思路，激发创造力。而如果在公司的话，我会尽量去避免随意走动，因为不想碰到同事而去硬着头皮尬聊。\n\n在家里也很难避免地需要去做更多的house work，做得多了，会开始去思考如何优化他们，比如厨房用品如何更好地摆放，橱柜怎么收拾会更方便使用和整理，为此而改造了不少东西，也买了一些提高家务活效率的东西。想得多了，渐渐发现之前有些日常用品的购买被收了智商税，比如电动牙刷的刷头或者打印机的墨盒，如果在亚马逊买适合型号的非官方用品的话，会比官方用品便宜非常多。\n\n厨艺的提高是不可避免的，现在甚至让我觉得我完全不需要去外面吃了，follow了老饭骨这个频道后，觉得一切都可以自己做。上周迷上了做面，从做鲜奶馒头开始，到杂粮馒头，再到流沙包，虽然成功率有起伏，但起码可以对外宣扬会做一些面食了，之后希望能学油泼面。\n\n我也开始了yard work，之前拖了很久都没有开动的后院deck计划被改成了patio，因为更简单一点，每天下午花一点时间刨土，现在已经刨出了一个10ft * 10ft小区域，之后就是填gravel和砖块的活了，暑假竣工后，终于可以好好享受后院了。\n\n女友和我都认为，这可能是一辈子唯一的机会能在一起呆那么多天，24小时都不分开，我们都很珍惜这个机会，虽然偶有分歧和争吵，但在一起做了很多有意思的事情，非常幸福。猫女儿也很幸福，虽然大部分时间是在睡觉，但需要我们的时候，我们总是随叫随到的。\n\n也许再过一两个月就要复工了，老板跟我聊天的时候说到有的同事会跟他说希望复工后也能保持一周有几天在家上班的节奏，我深有所感。找到自己的节奏的话，在家里会更加高效，因为完全可以做到免除打扰，有些不必要的会议也可以不去参加。\n\n也许人们之后会努力让自己成为自由职业者？至少我会开始有这样的想法了。\n\n不管在哪里，都要努力的生活啊！","source":"_posts/work-from-home-体会.md","raw":"---\ntitle: work from home 体会\ntop: false\ncover: false\ntoc: true\nmathjax: true\ndate: 2020-04-23 08:27:19\nsummary: \ncategories: Life\ntags: \n    - Efficiency\npassword:\n---\n\n目前wfh的节奏虽然还在不断适应，但总体已经到了一个很舒服的程度。\n个人生活的质量有较大的提高，我不用担心做明天的中饭的问题，可以在中午简单地做一个meal，晚上有时候我fasting，所以省下一整块时间做自己的事。\n工作方面，有时候当你有非常明确的东西去做的时候，我可以变得非常高效。但对于别的工作比如说需要和别人去交涉，或者需要别人的一些帮忙时，有时候线上的交流会有一些delay，交流的热情也不如在公司里那么强烈。\n<!--more-->\n我刚开始会有一些struggle，所以我每天给自己定两个大目标，你有对公司做足够的贡献吗？你有对自己做足够的贡献吗？\n更细化一点的话，我会列出三个最重要的事情，今天必须实现，比如一个比较重要的活，或者针对一个topic做一个research，或者写一篇文章，继续读书计划等等。对我来说，清晨的效率比较高，适合做这些事，特别是阅读。\n然后我会列一些不那么重要但是Nice to have的东西，比如读一篇技术类文章，看一个技术类视频，etc...\n\n有一些对工作效率有影响的东西，比如刷手机，是需要想办法去杜绝的，比如早上干完第一件事之前，强制自己不要去刷，因为容易扰乱心神。\n有一个比较有趣的发现是，我是一个内向的人，在家让我非常舒服，我可以在想中断的时候在家里到处走走，这样很助于我转换思路，激发创造力。而如果在公司的话，我会尽量去避免随意走动，因为不想碰到同事而去硬着头皮尬聊。\n\n在家里也很难避免地需要去做更多的house work，做得多了，会开始去思考如何优化他们，比如厨房用品如何更好地摆放，橱柜怎么收拾会更方便使用和整理，为此而改造了不少东西，也买了一些提高家务活效率的东西。想得多了，渐渐发现之前有些日常用品的购买被收了智商税，比如电动牙刷的刷头或者打印机的墨盒，如果在亚马逊买适合型号的非官方用品的话，会比官方用品便宜非常多。\n\n厨艺的提高是不可避免的，现在甚至让我觉得我完全不需要去外面吃了，follow了老饭骨这个频道后，觉得一切都可以自己做。上周迷上了做面，从做鲜奶馒头开始，到杂粮馒头，再到流沙包，虽然成功率有起伏，但起码可以对外宣扬会做一些面食了，之后希望能学油泼面。\n\n我也开始了yard work，之前拖了很久都没有开动的后院deck计划被改成了patio，因为更简单一点，每天下午花一点时间刨土，现在已经刨出了一个10ft * 10ft小区域，之后就是填gravel和砖块的活了，暑假竣工后，终于可以好好享受后院了。\n\n女友和我都认为，这可能是一辈子唯一的机会能在一起呆那么多天，24小时都不分开，我们都很珍惜这个机会，虽然偶有分歧和争吵，但在一起做了很多有意思的事情，非常幸福。猫女儿也很幸福，虽然大部分时间是在睡觉，但需要我们的时候，我们总是随叫随到的。\n\n也许再过一两个月就要复工了，老板跟我聊天的时候说到有的同事会跟他说希望复工后也能保持一周有几天在家上班的节奏，我深有所感。找到自己的节奏的话，在家里会更加高效，因为完全可以做到免除打扰，有些不必要的会议也可以不去参加。\n\n也许人们之后会努力让自己成为自由职业者？至少我会开始有这样的想法了。\n\n不管在哪里，都要努力的生活啊！","slug":"work-from-home-体会","published":1,"updated":"2020-05-05T15:16:04.712Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ckcxuqetd0021fkjxgytkceje","content":"<p>目前wfh的节奏虽然还在不断适应，但总体已经到了一个很舒服的程度。<br>个人生活的质量有较大的提高，我不用担心做明天的中饭的问题，可以在中午简单地做一个meal，晚上有时候我fasting，所以省下一整块时间做自己的事。<br>工作方面，有时候当你有非常明确的东西去做的时候，我可以变得非常高效。但对于别的工作比如说需要和别人去交涉，或者需要别人的一些帮忙时，有时候线上的交流会有一些delay，交流的热情也不如在公司里那么强烈。</p>\n<a id=\"more\"></a>\n<p>我刚开始会有一些struggle，所以我每天给自己定两个大目标，你有对公司做足够的贡献吗？你有对自己做足够的贡献吗？<br>更细化一点的话，我会列出三个最重要的事情，今天必须实现，比如一个比较重要的活，或者针对一个topic做一个research，或者写一篇文章，继续读书计划等等。对我来说，清晨的效率比较高，适合做这些事，特别是阅读。<br>然后我会列一些不那么重要但是Nice to have的东西，比如读一篇技术类文章，看一个技术类视频，etc...</p>\n<p>有一些对工作效率有影响的东西，比如刷手机，是需要想办法去杜绝的，比如早上干完第一件事之前，强制自己不要去刷，因为容易扰乱心神。<br>有一个比较有趣的发现是，我是一个内向的人，在家让我非常舒服，我可以在想中断的时候在家里到处走走，这样很助于我转换思路，激发创造力。而如果在公司的话，我会尽量去避免随意走动，因为不想碰到同事而去硬着头皮尬聊。</p>\n<p>在家里也很难避免地需要去做更多的house work，做得多了，会开始去思考如何优化他们，比如厨房用品如何更好地摆放，橱柜怎么收拾会更方便使用和整理，为此而改造了不少东西，也买了一些提高家务活效率的东西。想得多了，渐渐发现之前有些日常用品的购买被收了智商税，比如电动牙刷的刷头或者打印机的墨盒，如果在亚马逊买适合型号的非官方用品的话，会比官方用品便宜非常多。</p>\n<p>厨艺的提高是不可避免的，现在甚至让我觉得我完全不需要去外面吃了，follow了老饭骨这个频道后，觉得一切都可以自己做。上周迷上了做面，从做鲜奶馒头开始，到杂粮馒头，再到流沙包，虽然成功率有起伏，但起码可以对外宣扬会做一些面食了，之后希望能学油泼面。</p>\n<p>我也开始了yard work，之前拖了很久都没有开动的后院deck计划被改成了patio，因为更简单一点，每天下午花一点时间刨土，现在已经刨出了一个10ft * 10ft小区域，之后就是填gravel和砖块的活了，暑假竣工后，终于可以好好享受后院了。</p>\n<p>女友和我都认为，这可能是一辈子唯一的机会能在一起呆那么多天，24小时都不分开，我们都很珍惜这个机会，虽然偶有分歧和争吵，但在一起做了很多有意思的事情，非常幸福。猫女儿也很幸福，虽然大部分时间是在睡觉，但需要我们的时候，我们总是随叫随到的。</p>\n<p>也许再过一两个月就要复工了，老板跟我聊天的时候说到有的同事会跟他说希望复工后也能保持一周有几天在家上班的节奏，我深有所感。找到自己的节奏的话，在家里会更加高效，因为完全可以做到免除打扰，有些不必要的会议也可以不去参加。</p>\n<p>也许人们之后会努力让自己成为自由职业者？至少我会开始有这样的想法了。</p>\n<p>不管在哪里，都要努力的生活啊！</p>\n","site":{"data":{"next":{"override":false,"favicon":{"small":"/uploads/favicon-16x16.png","medium":"/uploads/favicon-32x32.png","apple_touch_icon":"/uploads/apple-touch-icon.png","safari_pinned_tab":"/uploads/favicon.png","ms_browserconfig":"/uploads/browserconfig.xml"},"keywords":"Hexo, NexT","rss":null,"footer":{"icon":"user","copyright":null,"powered":true,"theme":{"enable":true,"version":true}},"canonical":true,"seo":false,"index_with_subtitle":false,"menu":{"home":"/ || home","archives":"/archives/ || archive"},"menu_icons":{"enable":true},"scheme":"Pisces","social_icons":{"enable":true,"icons_only":false,"transition":false},"links_icon":"link","links_title":"Links","links_layout":"block","toc":{"enable":true,"number":true,"wrap":false},"sidebar":{"position":"left","display":"post","offset":12,"b2t":false,"scrollpercent":false,"onmobile":false},"scroll_to_more":true,"save_scroll":false,"excerpt_description":true,"auto_excerpt":{"enable":false,"length":30},"read_more_btn":true,"post_meta":{"item_text":true,"created_at":true,"updated_at":false,"categories":true},"post_wordcount":{"item_text":true,"wordcount":false,"min2read":false,"totalcount":false,"separated_meta":true},"post_copyright":{"enable":false,"license":"CC BY-NC-SA 3.0","license_url":"https://creativecommons.org/licenses/by-nc-sa/3.0/"},"mobile_layout_economy":false,"android_chrome_color":"#222","custom_logo":{"enabled":false,"image":null},"marked":{"smartypants":false},"highlight_theme":"normal","font":{"enable":false,"host":null,"global":{"external":true,"family":"Lato","size":null},"headings":{"external":true,"family":null,"size":null},"posts":{"external":true,"family":null},"logo":{"external":true,"family":null,"size":null},"codes":{"external":true,"family":null,"size":null}},"mathjax":{"enable":false,"per_page":false,"cdn":"//cdn.bootcss.com/mathjax/2.7.1/latest.js?config=TeX-AMS-MML_HTMLorMML"},"han":false,"disqus":{"enable":false,"shortname":null,"count":true},"changyan":{"enable":false,"appid":null,"appkey":null},"valine":{"enable":false,"appid":null,"appkey":null,"notify":false,"verify":false,"placeholder":"Just go go","avatar":"mm","guest_info":"nick,mail,link","pageSize":10},"gitment":{"enable":false,"mint":true,"count":true,"lazy":false,"cleanly":false,"language":null,"github_user":null,"github_repo":null,"client_id":null,"client_secret":null,"proxy_gateway":null,"redirect_protocol":null},"needmoreshare2":{"enable":false,"postbottom":{"enable":false,"options":{"iconStyle":"box","boxForm":"horizontal","position":"bottomCenter","networks":"Weibo,Wechat,Douban,QQZone,Twitter,Facebook"}},"float":{"enable":false,"options":{"iconStyle":"box","boxForm":"horizontal","position":"middleRight","networks":"Weibo,Wechat,Douban,QQZone,Twitter,Facebook"}}},"duoshuo_info":{"ua_enable":true,"admin_enable":false,"user_id":0},"facebook_sdk":{"enable":false,"app_id":null,"fb_admin":null,"like_button":null,"webmaster":null},"facebook_comments_plugin":{"enable":false,"num_of_posts":10,"width":"100%","scheme":"light"},"vkontakte_api":{"enable":false,"app_id":null,"like":true,"comments":true,"num_of_posts":10},"rating":{"enable":false,"id":null,"color":"fc6423"},"leancloud_visitors":{"enable":false,"app_id":null,"app_key":null},"firestore":{"enable":false,"collection":"articles","apiKey":null,"projectId":null,"bluebird":false},"busuanzi_count":{"enable":false,"site_uv":true,"site_uv_header":"<i class=\"fa fa-user\"></i>","site_uv_footer":null,"site_pv":true,"site_pv_header":"<i class=\"fa fa-eye\"></i>","site_pv_footer":null,"page_pv":true,"page_pv_header":"<i class=\"fa fa-file-o\"></i>","page_pv_footer":null},"baidu_push":false,"calendar":{"enable":false,"calendar_id":"<required>","api_key":"<required>","orderBy":"startTime","offsetMax":24,"offsetMin":4,"timeZone":null,"showDeleted":false,"singleEvents":true,"maxResults":250},"algolia_search":{"enable":false,"hits":{"per_page":10},"labels":{"input_placeholder":"Search for Posts","hits_empty":"We didn't find any results for the search: ${query}","hits_stats":"${hits} results found in ${time} ms"}},"local_search":{"enable":false,"trigger":"auto","top_n_per_article":1},"exturl":false,"note":{"style":"simple","icons":false,"border_radius":3,"light_bg_offset":0},"label":true,"tabs":{"enable":true,"transition":{"tabs":false,"labels":true},"border_radius":0},"motion":{"enable":true,"async":false,"transition":{"post_block":"fadeIn","post_header":"slideDownIn","post_body":"slideDownIn","coll_header":"slideLeftIn","sidebar":"slideUpIn"}},"fancybox":true,"pace":false,"pace_theme":"pace-theme-minimal","canvas_nest":false,"three_waves":false,"canvas_lines":false,"canvas_sphere":false,"canvas_ribbon":{"enable":false,"size":300,"alpha":0.6,"zIndex":-1},"vendors":{"_internal":"lib","jquery":null,"fancybox":null,"fancybox_css":null,"fastclick":null,"lazyload":null,"velocity":null,"velocity_ui":null,"ua_parser":null,"fontawesome":null,"algolia_instant_js":null,"algolia_instant_css":null,"pace":null,"pace_css":null,"canvas_nest":null,"three":null,"three_waves":null,"canvas_lines":null,"canvas_sphere":null,"canvas_ribbon":null,"han":null,"needMoreShare2":null},"css":"css","js":"js","images":"images","version":"5.1.4"}}},"excerpt":"<p>目前wfh的节奏虽然还在不断适应，但总体已经到了一个很舒服的程度。<br>个人生活的质量有较大的提高，我不用担心做明天的中饭的问题，可以在中午简单地做一个meal，晚上有时候我fasting，所以省下一整块时间做自己的事。<br>工作方面，有时候当你有非常明确的东西去做的时候，我可以变得非常高效。但对于别的工作比如说需要和别人去交涉，或者需要别人的一些帮忙时，有时候线上的交流会有一些delay，交流的热情也不如在公司里那么强烈。</p>","more":"<p>我刚开始会有一些struggle，所以我每天给自己定两个大目标，你有对公司做足够的贡献吗？你有对自己做足够的贡献吗？<br>更细化一点的话，我会列出三个最重要的事情，今天必须实现，比如一个比较重要的活，或者针对一个topic做一个research，或者写一篇文章，继续读书计划等等。对我来说，清晨的效率比较高，适合做这些事，特别是阅读。<br>然后我会列一些不那么重要但是Nice to have的东西，比如读一篇技术类文章，看一个技术类视频，etc...</p>\n<p>有一些对工作效率有影响的东西，比如刷手机，是需要想办法去杜绝的，比如早上干完第一件事之前，强制自己不要去刷，因为容易扰乱心神。<br>有一个比较有趣的发现是，我是一个内向的人，在家让我非常舒服，我可以在想中断的时候在家里到处走走，这样很助于我转换思路，激发创造力。而如果在公司的话，我会尽量去避免随意走动，因为不想碰到同事而去硬着头皮尬聊。</p>\n<p>在家里也很难避免地需要去做更多的house work，做得多了，会开始去思考如何优化他们，比如厨房用品如何更好地摆放，橱柜怎么收拾会更方便使用和整理，为此而改造了不少东西，也买了一些提高家务活效率的东西。想得多了，渐渐发现之前有些日常用品的购买被收了智商税，比如电动牙刷的刷头或者打印机的墨盒，如果在亚马逊买适合型号的非官方用品的话，会比官方用品便宜非常多。</p>\n<p>厨艺的提高是不可避免的，现在甚至让我觉得我完全不需要去外面吃了，follow了老饭骨这个频道后，觉得一切都可以自己做。上周迷上了做面，从做鲜奶馒头开始，到杂粮馒头，再到流沙包，虽然成功率有起伏，但起码可以对外宣扬会做一些面食了，之后希望能学油泼面。</p>\n<p>我也开始了yard work，之前拖了很久都没有开动的后院deck计划被改成了patio，因为更简单一点，每天下午花一点时间刨土，现在已经刨出了一个10ft * 10ft小区域，之后就是填gravel和砖块的活了，暑假竣工后，终于可以好好享受后院了。</p>\n<p>女友和我都认为，这可能是一辈子唯一的机会能在一起呆那么多天，24小时都不分开，我们都很珍惜这个机会，虽然偶有分歧和争吵，但在一起做了很多有意思的事情，非常幸福。猫女儿也很幸福，虽然大部分时间是在睡觉，但需要我们的时候，我们总是随叫随到的。</p>\n<p>也许再过一两个月就要复工了，老板跟我聊天的时候说到有的同事会跟他说希望复工后也能保持一周有几天在家上班的节奏，我深有所感。找到自己的节奏的话，在家里会更加高效，因为完全可以做到免除打扰，有些不必要的会议也可以不去参加。</p>\n<p>也许人们之后会努力让自己成为自由职业者？至少我会开始有这样的想法了。</p>\n<p>不管在哪里，都要努力的生活啊！</p>"},{"title":"从零开始学架构-笔记01","top":false,"cover":false,"toc":true,"mathjax":true,"date":"2020-03-18T20:09:03.000Z","password":null,"summary":"从零开始学架构学习笔记01","_content":"\n# 01 | 架构到底是指什么？\n<!--more-->\n系统与子系统、模块与组件、框架与架构。\n\n## 系统与子系统\n\n以微信举例来说： \n微信本身是一个系统，包含聊天、登录、支付、朋友圈等子系统。\n- 朋友圈这个系统又包括动态、评论、点赞等子系统。\n- 评论这个系统可能又包括防刷子系统、审核子系统、发布子系统、存储子系统。\n- 评论审核子系统不再包含业务意义上的子系统，而是包括各个模块或者组件，这些模块或者组件本身也是另外一个维度上的系统。例如，MySQL、Redis 等是存储系统，但不是业务子系统。\n\n## 模块与组件\n\n从逻辑的角度来拆分系统后，得到的单元就是“模块”；从物理的角度来拆分系统后，得到的单元就是“组件”。划分模块的主要目的是职责分离；划分组件的主要目的是单元复用。\n\n以一个最简单的网站系统来为例。假设我们要做一个学生信息管理系统，这个系统从逻辑的角度来拆分，可以分为“登录注册模块”“个人信息模块”“个人成绩模块”；从物理的角度来拆分，可以拆分为 Nginx、Web 服务器、MySQL。\n\n## 框架与架构\n\n框架关注的是“规范”，架构关注的是“结构”。\n\n架构会根据角度的不同而产生不同的定义，这也是4+1视图的由来：\n![4+1 from IBM](4+1.jpg)\n\n举例来说：\n1. 从业务逻辑的角度，“学生管理系统”的架构由**登录注册模块**、**个人信息模块**和**个人成绩模块**组成\n2. 从物理部署的角度，“学生管理系统”的架构由**nginx**，**web服务器**和**mysql**组成\n3. 从开发规范的角度，“学生管理系统”的架构由**Model**, **View** 和**Controller**组成\n\n## 总结\n\n首先，“系统是一群关联个体组成”，这些“个体”可以是“子系统”“模块”“组件”等；架构需要明确系统包含哪些“个体”。其次，系统中的个体需要“根据某种规则”运作，架构需要明确个体运作和协作的规则。\n\n## 思考\n\n原来对架构的理解完全由自己工作中的产品决定的，中型规模的产品，已经有了关于模块和组件的理解，也有了从业务逻辑和物理部署角度对于架构的认识。\n现在产品越来越大，也在向SaaS和microservice转型，物理部署相较于业务逻辑，改动会更大一点，而且cloud提供了很多原来on prem无法提供的功能，比如serverless，或者redis。\n以后的趋势也许会越来越倾向于：架构被外包给cloud provider，就像发型设计师一样，程序员和云平台的架构师沟通好，然后他们给出一套方案，直接用就行了。\n","source":"_posts/从零开始学架构-笔记01.md","raw":"---\ntitle: 从零开始学架构-笔记01\ntop: false\ncover: false\ntoc: true\nmathjax: true\ndate: 2020-03-18 16:09:03\ncategories: Tech\ntags:\n    - Architecture\npassword:\nsummary: 从零开始学架构学习笔记01\n---\n\n# 01 | 架构到底是指什么？\n<!--more-->\n系统与子系统、模块与组件、框架与架构。\n\n## 系统与子系统\n\n以微信举例来说： \n微信本身是一个系统，包含聊天、登录、支付、朋友圈等子系统。\n- 朋友圈这个系统又包括动态、评论、点赞等子系统。\n- 评论这个系统可能又包括防刷子系统、审核子系统、发布子系统、存储子系统。\n- 评论审核子系统不再包含业务意义上的子系统，而是包括各个模块或者组件，这些模块或者组件本身也是另外一个维度上的系统。例如，MySQL、Redis 等是存储系统，但不是业务子系统。\n\n## 模块与组件\n\n从逻辑的角度来拆分系统后，得到的单元就是“模块”；从物理的角度来拆分系统后，得到的单元就是“组件”。划分模块的主要目的是职责分离；划分组件的主要目的是单元复用。\n\n以一个最简单的网站系统来为例。假设我们要做一个学生信息管理系统，这个系统从逻辑的角度来拆分，可以分为“登录注册模块”“个人信息模块”“个人成绩模块”；从物理的角度来拆分，可以拆分为 Nginx、Web 服务器、MySQL。\n\n## 框架与架构\n\n框架关注的是“规范”，架构关注的是“结构”。\n\n架构会根据角度的不同而产生不同的定义，这也是4+1视图的由来：\n![4+1 from IBM](4+1.jpg)\n\n举例来说：\n1. 从业务逻辑的角度，“学生管理系统”的架构由**登录注册模块**、**个人信息模块**和**个人成绩模块**组成\n2. 从物理部署的角度，“学生管理系统”的架构由**nginx**，**web服务器**和**mysql**组成\n3. 从开发规范的角度，“学生管理系统”的架构由**Model**, **View** 和**Controller**组成\n\n## 总结\n\n首先，“系统是一群关联个体组成”，这些“个体”可以是“子系统”“模块”“组件”等；架构需要明确系统包含哪些“个体”。其次，系统中的个体需要“根据某种规则”运作，架构需要明确个体运作和协作的规则。\n\n## 思考\n\n原来对架构的理解完全由自己工作中的产品决定的，中型规模的产品，已经有了关于模块和组件的理解，也有了从业务逻辑和物理部署角度对于架构的认识。\n现在产品越来越大，也在向SaaS和microservice转型，物理部署相较于业务逻辑，改动会更大一点，而且cloud提供了很多原来on prem无法提供的功能，比如serverless，或者redis。\n以后的趋势也许会越来越倾向于：架构被外包给cloud provider，就像发型设计师一样，程序员和云平台的架构师沟通好，然后他们给出一套方案，直接用就行了。\n","slug":"从零开始学架构-笔记01","published":1,"updated":"2020-05-05T15:12:48.751Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ckcxuqetj0024fkjxbt02tuk6","content":"<h1 id=\"01-架构到底是指什么？\"><a href=\"#01-架构到底是指什么？\" class=\"headerlink\" title=\"01 | 架构到底是指什么？\"></a>01 | 架构到底是指什么？</h1><a id=\"more\"></a>\n<p>系统与子系统、模块与组件、框架与架构。</p>\n<h2 id=\"系统与子系统\"><a href=\"#系统与子系统\" class=\"headerlink\" title=\"系统与子系统\"></a>系统与子系统</h2><p>以微信举例来说：<br>微信本身是一个系统，包含聊天、登录、支付、朋友圈等子系统。</p>\n<ul>\n<li>朋友圈这个系统又包括动态、评论、点赞等子系统。</li>\n<li>评论这个系统可能又包括防刷子系统、审核子系统、发布子系统、存储子系统。</li>\n<li>评论审核子系统不再包含业务意义上的子系统，而是包括各个模块或者组件，这些模块或者组件本身也是另外一个维度上的系统。例如，MySQL、Redis 等是存储系统，但不是业务子系统。</li>\n</ul>\n<h2 id=\"模块与组件\"><a href=\"#模块与组件\" class=\"headerlink\" title=\"模块与组件\"></a>模块与组件</h2><p>从逻辑的角度来拆分系统后，得到的单元就是“模块”；从物理的角度来拆分系统后，得到的单元就是“组件”。划分模块的主要目的是职责分离；划分组件的主要目的是单元复用。</p>\n<p>以一个最简单的网站系统来为例。假设我们要做一个学生信息管理系统，这个系统从逻辑的角度来拆分，可以分为“登录注册模块”“个人信息模块”“个人成绩模块”；从物理的角度来拆分，可以拆分为 Nginx、Web 服务器、MySQL。</p>\n<h2 id=\"框架与架构\"><a href=\"#框架与架构\" class=\"headerlink\" title=\"框架与架构\"></a>框架与架构</h2><p>框架关注的是“规范”，架构关注的是“结构”。</p>\n<p>架构会根据角度的不同而产生不同的定义，这也是4+1视图的由来：<br><img src=\"4+1.jpg\" alt=\"4+1 from IBM\"></p>\n<p>举例来说：</p>\n<ol>\n<li>从业务逻辑的角度，“学生管理系统”的架构由<strong>登录注册模块</strong>、<strong>个人信息模块</strong>和<strong>个人成绩模块</strong>组成</li>\n<li>从物理部署的角度，“学生管理系统”的架构由<strong>nginx</strong>，<strong>web服务器</strong>和<strong>mysql</strong>组成</li>\n<li>从开发规范的角度，“学生管理系统”的架构由<strong>Model</strong>, <strong>View</strong> 和<strong>Controller</strong>组成</li>\n</ol>\n<h2 id=\"总结\"><a href=\"#总结\" class=\"headerlink\" title=\"总结\"></a>总结</h2><p>首先，“系统是一群关联个体组成”，这些“个体”可以是“子系统”“模块”“组件”等；架构需要明确系统包含哪些“个体”。其次，系统中的个体需要“根据某种规则”运作，架构需要明确个体运作和协作的规则。</p>\n<h2 id=\"思考\"><a href=\"#思考\" class=\"headerlink\" title=\"思考\"></a>思考</h2><p>原来对架构的理解完全由自己工作中的产品决定的，中型规模的产品，已经有了关于模块和组件的理解，也有了从业务逻辑和物理部署角度对于架构的认识。<br>现在产品越来越大，也在向SaaS和microservice转型，物理部署相较于业务逻辑，改动会更大一点，而且cloud提供了很多原来on prem无法提供的功能，比如serverless，或者redis。<br>以后的趋势也许会越来越倾向于：架构被外包给cloud provider，就像发型设计师一样，程序员和云平台的架构师沟通好，然后他们给出一套方案，直接用就行了。</p>\n","site":{"data":{"next":{"override":false,"favicon":{"small":"/uploads/favicon-16x16.png","medium":"/uploads/favicon-32x32.png","apple_touch_icon":"/uploads/apple-touch-icon.png","safari_pinned_tab":"/uploads/favicon.png","ms_browserconfig":"/uploads/browserconfig.xml"},"keywords":"Hexo, NexT","rss":null,"footer":{"icon":"user","copyright":null,"powered":true,"theme":{"enable":true,"version":true}},"canonical":true,"seo":false,"index_with_subtitle":false,"menu":{"home":"/ || home","archives":"/archives/ || archive"},"menu_icons":{"enable":true},"scheme":"Pisces","social_icons":{"enable":true,"icons_only":false,"transition":false},"links_icon":"link","links_title":"Links","links_layout":"block","toc":{"enable":true,"number":true,"wrap":false},"sidebar":{"position":"left","display":"post","offset":12,"b2t":false,"scrollpercent":false,"onmobile":false},"scroll_to_more":true,"save_scroll":false,"excerpt_description":true,"auto_excerpt":{"enable":false,"length":30},"read_more_btn":true,"post_meta":{"item_text":true,"created_at":true,"updated_at":false,"categories":true},"post_wordcount":{"item_text":true,"wordcount":false,"min2read":false,"totalcount":false,"separated_meta":true},"post_copyright":{"enable":false,"license":"CC BY-NC-SA 3.0","license_url":"https://creativecommons.org/licenses/by-nc-sa/3.0/"},"mobile_layout_economy":false,"android_chrome_color":"#222","custom_logo":{"enabled":false,"image":null},"marked":{"smartypants":false},"highlight_theme":"normal","font":{"enable":false,"host":null,"global":{"external":true,"family":"Lato","size":null},"headings":{"external":true,"family":null,"size":null},"posts":{"external":true,"family":null},"logo":{"external":true,"family":null,"size":null},"codes":{"external":true,"family":null,"size":null}},"mathjax":{"enable":false,"per_page":false,"cdn":"//cdn.bootcss.com/mathjax/2.7.1/latest.js?config=TeX-AMS-MML_HTMLorMML"},"han":false,"disqus":{"enable":false,"shortname":null,"count":true},"changyan":{"enable":false,"appid":null,"appkey":null},"valine":{"enable":false,"appid":null,"appkey":null,"notify":false,"verify":false,"placeholder":"Just go go","avatar":"mm","guest_info":"nick,mail,link","pageSize":10},"gitment":{"enable":false,"mint":true,"count":true,"lazy":false,"cleanly":false,"language":null,"github_user":null,"github_repo":null,"client_id":null,"client_secret":null,"proxy_gateway":null,"redirect_protocol":null},"needmoreshare2":{"enable":false,"postbottom":{"enable":false,"options":{"iconStyle":"box","boxForm":"horizontal","position":"bottomCenter","networks":"Weibo,Wechat,Douban,QQZone,Twitter,Facebook"}},"float":{"enable":false,"options":{"iconStyle":"box","boxForm":"horizontal","position":"middleRight","networks":"Weibo,Wechat,Douban,QQZone,Twitter,Facebook"}}},"duoshuo_info":{"ua_enable":true,"admin_enable":false,"user_id":0},"facebook_sdk":{"enable":false,"app_id":null,"fb_admin":null,"like_button":null,"webmaster":null},"facebook_comments_plugin":{"enable":false,"num_of_posts":10,"width":"100%","scheme":"light"},"vkontakte_api":{"enable":false,"app_id":null,"like":true,"comments":true,"num_of_posts":10},"rating":{"enable":false,"id":null,"color":"fc6423"},"leancloud_visitors":{"enable":false,"app_id":null,"app_key":null},"firestore":{"enable":false,"collection":"articles","apiKey":null,"projectId":null,"bluebird":false},"busuanzi_count":{"enable":false,"site_uv":true,"site_uv_header":"<i class=\"fa fa-user\"></i>","site_uv_footer":null,"site_pv":true,"site_pv_header":"<i class=\"fa fa-eye\"></i>","site_pv_footer":null,"page_pv":true,"page_pv_header":"<i class=\"fa fa-file-o\"></i>","page_pv_footer":null},"baidu_push":false,"calendar":{"enable":false,"calendar_id":"<required>","api_key":"<required>","orderBy":"startTime","offsetMax":24,"offsetMin":4,"timeZone":null,"showDeleted":false,"singleEvents":true,"maxResults":250},"algolia_search":{"enable":false,"hits":{"per_page":10},"labels":{"input_placeholder":"Search for Posts","hits_empty":"We didn't find any results for the search: ${query}","hits_stats":"${hits} results found in ${time} ms"}},"local_search":{"enable":false,"trigger":"auto","top_n_per_article":1},"exturl":false,"note":{"style":"simple","icons":false,"border_radius":3,"light_bg_offset":0},"label":true,"tabs":{"enable":true,"transition":{"tabs":false,"labels":true},"border_radius":0},"motion":{"enable":true,"async":false,"transition":{"post_block":"fadeIn","post_header":"slideDownIn","post_body":"slideDownIn","coll_header":"slideLeftIn","sidebar":"slideUpIn"}},"fancybox":true,"pace":false,"pace_theme":"pace-theme-minimal","canvas_nest":false,"three_waves":false,"canvas_lines":false,"canvas_sphere":false,"canvas_ribbon":{"enable":false,"size":300,"alpha":0.6,"zIndex":-1},"vendors":{"_internal":"lib","jquery":null,"fancybox":null,"fancybox_css":null,"fastclick":null,"lazyload":null,"velocity":null,"velocity_ui":null,"ua_parser":null,"fontawesome":null,"algolia_instant_js":null,"algolia_instant_css":null,"pace":null,"pace_css":null,"canvas_nest":null,"three":null,"three_waves":null,"canvas_lines":null,"canvas_sphere":null,"canvas_ribbon":null,"han":null,"needMoreShare2":null},"css":"css","js":"js","images":"images","version":"5.1.4"}}},"excerpt":"<h1 id=\"01-架构到底是指什么？\"><a href=\"#01-架构到底是指什么？\" class=\"headerlink\" title=\"01 | 架构到底是指什么？\"></a>01 | 架构到底是指什么？</h1>","more":"<p>系统与子系统、模块与组件、框架与架构。</p>\n<h2 id=\"系统与子系统\"><a href=\"#系统与子系统\" class=\"headerlink\" title=\"系统与子系统\"></a>系统与子系统</h2><p>以微信举例来说：<br>微信本身是一个系统，包含聊天、登录、支付、朋友圈等子系统。</p>\n<ul>\n<li>朋友圈这个系统又包括动态、评论、点赞等子系统。</li>\n<li>评论这个系统可能又包括防刷子系统、审核子系统、发布子系统、存储子系统。</li>\n<li>评论审核子系统不再包含业务意义上的子系统，而是包括各个模块或者组件，这些模块或者组件本身也是另外一个维度上的系统。例如，MySQL、Redis 等是存储系统，但不是业务子系统。</li>\n</ul>\n<h2 id=\"模块与组件\"><a href=\"#模块与组件\" class=\"headerlink\" title=\"模块与组件\"></a>模块与组件</h2><p>从逻辑的角度来拆分系统后，得到的单元就是“模块”；从物理的角度来拆分系统后，得到的单元就是“组件”。划分模块的主要目的是职责分离；划分组件的主要目的是单元复用。</p>\n<p>以一个最简单的网站系统来为例。假设我们要做一个学生信息管理系统，这个系统从逻辑的角度来拆分，可以分为“登录注册模块”“个人信息模块”“个人成绩模块”；从物理的角度来拆分，可以拆分为 Nginx、Web 服务器、MySQL。</p>\n<h2 id=\"框架与架构\"><a href=\"#框架与架构\" class=\"headerlink\" title=\"框架与架构\"></a>框架与架构</h2><p>框架关注的是“规范”，架构关注的是“结构”。</p>\n<p>架构会根据角度的不同而产生不同的定义，这也是4+1视图的由来：<br><img src=\"4+1.jpg\" alt=\"4+1 from IBM\"></p>\n<p>举例来说：</p>\n<ol>\n<li>从业务逻辑的角度，“学生管理系统”的架构由<strong>登录注册模块</strong>、<strong>个人信息模块</strong>和<strong>个人成绩模块</strong>组成</li>\n<li>从物理部署的角度，“学生管理系统”的架构由<strong>nginx</strong>，<strong>web服务器</strong>和<strong>mysql</strong>组成</li>\n<li>从开发规范的角度，“学生管理系统”的架构由<strong>Model</strong>, <strong>View</strong> 和<strong>Controller</strong>组成</li>\n</ol>\n<h2 id=\"总结\"><a href=\"#总结\" class=\"headerlink\" title=\"总结\"></a>总结</h2><p>首先，“系统是一群关联个体组成”，这些“个体”可以是“子系统”“模块”“组件”等；架构需要明确系统包含哪些“个体”。其次，系统中的个体需要“根据某种规则”运作，架构需要明确个体运作和协作的规则。</p>\n<h2 id=\"思考\"><a href=\"#思考\" class=\"headerlink\" title=\"思考\"></a>思考</h2><p>原来对架构的理解完全由自己工作中的产品决定的，中型规模的产品，已经有了关于模块和组件的理解，也有了从业务逻辑和物理部署角度对于架构的认识。<br>现在产品越来越大，也在向SaaS和microservice转型，物理部署相较于业务逻辑，改动会更大一点，而且cloud提供了很多原来on prem无法提供的功能，比如serverless，或者redis。<br>以后的趋势也许会越来越倾向于：架构被外包给cloud provider，就像发型设计师一样，程序员和云平台的架构师沟通好，然后他们给出一套方案，直接用就行了。</p>"},{"title":"传奇程序员修炼之道-直播观后感","top":false,"cover":false,"toc":true,"mathjax":true,"date":"2020-04-27T22:50:24.000Z","summary":null,"password":null,"_content":"\n\n# 传奇程序员修炼之道 直播观后感\n<!--more-->\nhttp://play.itdks.com/watch/10045724?lang=en-us\n\n\n\n## 如何从小工成长为大牛\n\n**云风**：以前觉得挑战复杂的东西比较有成就感，JPEG 解码器。但现在会去追求如何把复杂的东西变简单，或者怎么找到简单的方法去解决问题。\nKISS 原则 - keep it simple and stupid\n\n**陈皓**：之前在银行，后来在外包公司当码农，动力主要是为了找好的工作。提升最多是在外企，当时看到外企用版本管理很震惊。当时在啃TCP/IP的书，后来在银行的工作中学以致用。\n学习的时候喜欢看一下原理，研究为什么是这样的设计，之后觉得所有技术都在解决一个问题：把控制逻辑和业务逻辑拆分。\n\n**孙玄**：浙大毕业，然后去百度做百度空间，之后去58做IM，做到架构师级别。后来在转转，研究中台，做首席架构师。后来发现自己对教育很感兴趣，后来去创业做教育。\n做任何事情的时候，能不能从本质的东西搞清楚，如果本质搞清楚，道明白，那术都可以不一样。\n心目中有两种架构师：第一种把复杂问题简单化，第二种是把简单问题复杂化。\n\n**唐巧**：2000-2007 算法，2008 架构，2010 领域知识，2012 表达与写作，2014 产品与组织，2018 商业。\n后来进IBM 觉得代码写得不好，开始研究架构，如何把代码写得好看。\n后来发现周围的程序员太闷，不善言辞，跟产品经理沟通不好，所以去研究表达和写作。最终成为公司里最能把产品表达清楚的程序员。\n觉得重要的是1.执行 2. 迭代\n\n**程军**：从中兴到一号店到饿了吗到贝壳找房\n认同本质的思路\n在饿了吗开始从用户的角度去思考\n保持高质量的输出（写文章）是非常困难的，需要去思考\n高效能人士的七个习惯\n\n\n## 关于读书\n\n**陈皓**：139页 状态机，设计模式\n状态是一个很重要的事情\n比如一个英文文档，写一个程序要弄清楚多少单词，需要维护两个状态，一个是单词怎么开始，第二个是单词怎么样结束\n\n\n**唐巧**：关于测试到底由谁负责\n书中说了应该是程序员负责\n意识大于流程\n\n\n写公众号，表达，写作\n\n\n**唐巧**：\n产品是能接受bug的，这和程序员思维非常不同\n\n**云风**：\n好的东西要易于修改\n\n## 问答环节\n\n**云风**：\nhttps://blog.codingnow.com/2019/09/hierarchy_tree.html\nhttps://blog.codingnow.com/2020/04/hierarchy_order.html#more\n\n**陈皓**：\n硬实力：\n1. 底层\n2. code review\n\n软实力：\n管理老板，产品经理\n\n\tXY 问题， 产品经理总会带来Y问题，需要追问X问题\n\t让更多人跟你承担压力，要说有条件的事，不要总是说“是”\n\n**云风**：\ndon't think outside of the box, instead find the the box","source":"_posts/传奇程序员修炼之道-直播观后感.md","raw":"---\ntitle: 传奇程序员修炼之道-直播观后感\ntop: false\ncover: false\ntoc: true\nmathjax: true\ndate: 2020-04-27 18:50:24\nsummary:\ncategories: Tech\ntags: \n    - Career\npassword:\n---\n\n\n# 传奇程序员修炼之道 直播观后感\n<!--more-->\nhttp://play.itdks.com/watch/10045724?lang=en-us\n\n\n\n## 如何从小工成长为大牛\n\n**云风**：以前觉得挑战复杂的东西比较有成就感，JPEG 解码器。但现在会去追求如何把复杂的东西变简单，或者怎么找到简单的方法去解决问题。\nKISS 原则 - keep it simple and stupid\n\n**陈皓**：之前在银行，后来在外包公司当码农，动力主要是为了找好的工作。提升最多是在外企，当时看到外企用版本管理很震惊。当时在啃TCP/IP的书，后来在银行的工作中学以致用。\n学习的时候喜欢看一下原理，研究为什么是这样的设计，之后觉得所有技术都在解决一个问题：把控制逻辑和业务逻辑拆分。\n\n**孙玄**：浙大毕业，然后去百度做百度空间，之后去58做IM，做到架构师级别。后来在转转，研究中台，做首席架构师。后来发现自己对教育很感兴趣，后来去创业做教育。\n做任何事情的时候，能不能从本质的东西搞清楚，如果本质搞清楚，道明白，那术都可以不一样。\n心目中有两种架构师：第一种把复杂问题简单化，第二种是把简单问题复杂化。\n\n**唐巧**：2000-2007 算法，2008 架构，2010 领域知识，2012 表达与写作，2014 产品与组织，2018 商业。\n后来进IBM 觉得代码写得不好，开始研究架构，如何把代码写得好看。\n后来发现周围的程序员太闷，不善言辞，跟产品经理沟通不好，所以去研究表达和写作。最终成为公司里最能把产品表达清楚的程序员。\n觉得重要的是1.执行 2. 迭代\n\n**程军**：从中兴到一号店到饿了吗到贝壳找房\n认同本质的思路\n在饿了吗开始从用户的角度去思考\n保持高质量的输出（写文章）是非常困难的，需要去思考\n高效能人士的七个习惯\n\n\n## 关于读书\n\n**陈皓**：139页 状态机，设计模式\n状态是一个很重要的事情\n比如一个英文文档，写一个程序要弄清楚多少单词，需要维护两个状态，一个是单词怎么开始，第二个是单词怎么样结束\n\n\n**唐巧**：关于测试到底由谁负责\n书中说了应该是程序员负责\n意识大于流程\n\n\n写公众号，表达，写作\n\n\n**唐巧**：\n产品是能接受bug的，这和程序员思维非常不同\n\n**云风**：\n好的东西要易于修改\n\n## 问答环节\n\n**云风**：\nhttps://blog.codingnow.com/2019/09/hierarchy_tree.html\nhttps://blog.codingnow.com/2020/04/hierarchy_order.html#more\n\n**陈皓**：\n硬实力：\n1. 底层\n2. code review\n\n软实力：\n管理老板，产品经理\n\n\tXY 问题， 产品经理总会带来Y问题，需要追问X问题\n\t让更多人跟你承担压力，要说有条件的事，不要总是说“是”\n\n**云风**：\ndon't think outside of the box, instead find the the box","slug":"传奇程序员修炼之道-直播观后感","published":1,"updated":"2020-05-05T15:12:51.527Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ckcxuqetr0029fkjxx24vq9xi","content":"<h1 id=\"传奇程序员修炼之道-直播观后感\"><a href=\"#传奇程序员修炼之道-直播观后感\" class=\"headerlink\" title=\"传奇程序员修炼之道 直播观后感\"></a>传奇程序员修炼之道 直播观后感</h1><a id=\"more\"></a>\n<p><a href=\"http://play.itdks.com/watch/10045724?lang=en-us\" target=\"_blank\" rel=\"noopener\">http://play.itdks.com/watch/10045724?lang=en-us</a></p>\n<h2 id=\"如何从小工成长为大牛\"><a href=\"#如何从小工成长为大牛\" class=\"headerlink\" title=\"如何从小工成长为大牛\"></a>如何从小工成长为大牛</h2><p><strong>云风</strong>：以前觉得挑战复杂的东西比较有成就感，JPEG 解码器。但现在会去追求如何把复杂的东西变简单，或者怎么找到简单的方法去解决问题。<br>KISS 原则 - keep it simple and stupid</p>\n<p><strong>陈皓</strong>：之前在银行，后来在外包公司当码农，动力主要是为了找好的工作。提升最多是在外企，当时看到外企用版本管理很震惊。当时在啃TCP/IP的书，后来在银行的工作中学以致用。<br>学习的时候喜欢看一下原理，研究为什么是这样的设计，之后觉得所有技术都在解决一个问题：把控制逻辑和业务逻辑拆分。</p>\n<p><strong>孙玄</strong>：浙大毕业，然后去百度做百度空间，之后去58做IM，做到架构师级别。后来在转转，研究中台，做首席架构师。后来发现自己对教育很感兴趣，后来去创业做教育。<br>做任何事情的时候，能不能从本质的东西搞清楚，如果本质搞清楚，道明白，那术都可以不一样。<br>心目中有两种架构师：第一种把复杂问题简单化，第二种是把简单问题复杂化。</p>\n<p><strong>唐巧</strong>：2000-2007 算法，2008 架构，2010 领域知识，2012 表达与写作，2014 产品与组织，2018 商业。<br>后来进IBM 觉得代码写得不好，开始研究架构，如何把代码写得好看。<br>后来发现周围的程序员太闷，不善言辞，跟产品经理沟通不好，所以去研究表达和写作。最终成为公司里最能把产品表达清楚的程序员。<br>觉得重要的是1.执行 2. 迭代</p>\n<p><strong>程军</strong>：从中兴到一号店到饿了吗到贝壳找房<br>认同本质的思路<br>在饿了吗开始从用户的角度去思考<br>保持高质量的输出（写文章）是非常困难的，需要去思考<br>高效能人士的七个习惯</p>\n<h2 id=\"关于读书\"><a href=\"#关于读书\" class=\"headerlink\" title=\"关于读书\"></a>关于读书</h2><p><strong>陈皓</strong>：139页 状态机，设计模式<br>状态是一个很重要的事情<br>比如一个英文文档，写一个程序要弄清楚多少单词，需要维护两个状态，一个是单词怎么开始，第二个是单词怎么样结束</p>\n<p><strong>唐巧</strong>：关于测试到底由谁负责<br>书中说了应该是程序员负责<br>意识大于流程</p>\n<p>写公众号，表达，写作</p>\n<p><strong>唐巧</strong>：<br>产品是能接受bug的，这和程序员思维非常不同</p>\n<p><strong>云风</strong>：<br>好的东西要易于修改</p>\n<h2 id=\"问答环节\"><a href=\"#问答环节\" class=\"headerlink\" title=\"问答环节\"></a>问答环节</h2><p><strong>云风</strong>：<br><a href=\"https://blog.codingnow.com/2019/09/hierarchy_tree.html\" target=\"_blank\" rel=\"noopener\">https://blog.codingnow.com/2019/09/hierarchy_tree.html</a><br><a href=\"https://blog.codingnow.com/2020/04/hierarchy_order.html#more\" target=\"_blank\" rel=\"noopener\">https://blog.codingnow.com/2020/04/hierarchy_order.html#more</a></p>\n<p><strong>陈皓</strong>：<br>硬实力：</p>\n<ol>\n<li>底层</li>\n<li>code review</li>\n</ol>\n<p>软实力：<br>管理老板，产品经理</p>\n<pre><code>XY 问题， 产品经理总会带来Y问题，需要追问X问题\n让更多人跟你承担压力，要说有条件的事，不要总是说“是”</code></pre><p><strong>云风</strong>：<br>don&#39;t think outside of the box, instead find the the box</p>\n","site":{"data":{"next":{"override":false,"favicon":{"small":"/uploads/favicon-16x16.png","medium":"/uploads/favicon-32x32.png","apple_touch_icon":"/uploads/apple-touch-icon.png","safari_pinned_tab":"/uploads/favicon.png","ms_browserconfig":"/uploads/browserconfig.xml"},"keywords":"Hexo, NexT","rss":null,"footer":{"icon":"user","copyright":null,"powered":true,"theme":{"enable":true,"version":true}},"canonical":true,"seo":false,"index_with_subtitle":false,"menu":{"home":"/ || home","archives":"/archives/ || archive"},"menu_icons":{"enable":true},"scheme":"Pisces","social_icons":{"enable":true,"icons_only":false,"transition":false},"links_icon":"link","links_title":"Links","links_layout":"block","toc":{"enable":true,"number":true,"wrap":false},"sidebar":{"position":"left","display":"post","offset":12,"b2t":false,"scrollpercent":false,"onmobile":false},"scroll_to_more":true,"save_scroll":false,"excerpt_description":true,"auto_excerpt":{"enable":false,"length":30},"read_more_btn":true,"post_meta":{"item_text":true,"created_at":true,"updated_at":false,"categories":true},"post_wordcount":{"item_text":true,"wordcount":false,"min2read":false,"totalcount":false,"separated_meta":true},"post_copyright":{"enable":false,"license":"CC BY-NC-SA 3.0","license_url":"https://creativecommons.org/licenses/by-nc-sa/3.0/"},"mobile_layout_economy":false,"android_chrome_color":"#222","custom_logo":{"enabled":false,"image":null},"marked":{"smartypants":false},"highlight_theme":"normal","font":{"enable":false,"host":null,"global":{"external":true,"family":"Lato","size":null},"headings":{"external":true,"family":null,"size":null},"posts":{"external":true,"family":null},"logo":{"external":true,"family":null,"size":null},"codes":{"external":true,"family":null,"size":null}},"mathjax":{"enable":false,"per_page":false,"cdn":"//cdn.bootcss.com/mathjax/2.7.1/latest.js?config=TeX-AMS-MML_HTMLorMML"},"han":false,"disqus":{"enable":false,"shortname":null,"count":true},"changyan":{"enable":false,"appid":null,"appkey":null},"valine":{"enable":false,"appid":null,"appkey":null,"notify":false,"verify":false,"placeholder":"Just go go","avatar":"mm","guest_info":"nick,mail,link","pageSize":10},"gitment":{"enable":false,"mint":true,"count":true,"lazy":false,"cleanly":false,"language":null,"github_user":null,"github_repo":null,"client_id":null,"client_secret":null,"proxy_gateway":null,"redirect_protocol":null},"needmoreshare2":{"enable":false,"postbottom":{"enable":false,"options":{"iconStyle":"box","boxForm":"horizontal","position":"bottomCenter","networks":"Weibo,Wechat,Douban,QQZone,Twitter,Facebook"}},"float":{"enable":false,"options":{"iconStyle":"box","boxForm":"horizontal","position":"middleRight","networks":"Weibo,Wechat,Douban,QQZone,Twitter,Facebook"}}},"duoshuo_info":{"ua_enable":true,"admin_enable":false,"user_id":0},"facebook_sdk":{"enable":false,"app_id":null,"fb_admin":null,"like_button":null,"webmaster":null},"facebook_comments_plugin":{"enable":false,"num_of_posts":10,"width":"100%","scheme":"light"},"vkontakte_api":{"enable":false,"app_id":null,"like":true,"comments":true,"num_of_posts":10},"rating":{"enable":false,"id":null,"color":"fc6423"},"leancloud_visitors":{"enable":false,"app_id":null,"app_key":null},"firestore":{"enable":false,"collection":"articles","apiKey":null,"projectId":null,"bluebird":false},"busuanzi_count":{"enable":false,"site_uv":true,"site_uv_header":"<i class=\"fa fa-user\"></i>","site_uv_footer":null,"site_pv":true,"site_pv_header":"<i class=\"fa fa-eye\"></i>","site_pv_footer":null,"page_pv":true,"page_pv_header":"<i class=\"fa fa-file-o\"></i>","page_pv_footer":null},"baidu_push":false,"calendar":{"enable":false,"calendar_id":"<required>","api_key":"<required>","orderBy":"startTime","offsetMax":24,"offsetMin":4,"timeZone":null,"showDeleted":false,"singleEvents":true,"maxResults":250},"algolia_search":{"enable":false,"hits":{"per_page":10},"labels":{"input_placeholder":"Search for Posts","hits_empty":"We didn't find any results for the search: ${query}","hits_stats":"${hits} results found in ${time} ms"}},"local_search":{"enable":false,"trigger":"auto","top_n_per_article":1},"exturl":false,"note":{"style":"simple","icons":false,"border_radius":3,"light_bg_offset":0},"label":true,"tabs":{"enable":true,"transition":{"tabs":false,"labels":true},"border_radius":0},"motion":{"enable":true,"async":false,"transition":{"post_block":"fadeIn","post_header":"slideDownIn","post_body":"slideDownIn","coll_header":"slideLeftIn","sidebar":"slideUpIn"}},"fancybox":true,"pace":false,"pace_theme":"pace-theme-minimal","canvas_nest":false,"three_waves":false,"canvas_lines":false,"canvas_sphere":false,"canvas_ribbon":{"enable":false,"size":300,"alpha":0.6,"zIndex":-1},"vendors":{"_internal":"lib","jquery":null,"fancybox":null,"fancybox_css":null,"fastclick":null,"lazyload":null,"velocity":null,"velocity_ui":null,"ua_parser":null,"fontawesome":null,"algolia_instant_js":null,"algolia_instant_css":null,"pace":null,"pace_css":null,"canvas_nest":null,"three":null,"three_waves":null,"canvas_lines":null,"canvas_sphere":null,"canvas_ribbon":null,"han":null,"needMoreShare2":null},"css":"css","js":"js","images":"images","version":"5.1.4"}}},"excerpt":"<h1 id=\"传奇程序员修炼之道-直播观后感\"><a href=\"#传奇程序员修炼之道-直播观后感\" class=\"headerlink\" title=\"传奇程序员修炼之道 直播观后感\"></a>传奇程序员修炼之道 直播观后感</h1>","more":"<p><a href=\"http://play.itdks.com/watch/10045724?lang=en-us\" target=\"_blank\" rel=\"noopener\">http://play.itdks.com/watch/10045724?lang=en-us</a></p>\n<h2 id=\"如何从小工成长为大牛\"><a href=\"#如何从小工成长为大牛\" class=\"headerlink\" title=\"如何从小工成长为大牛\"></a>如何从小工成长为大牛</h2><p><strong>云风</strong>：以前觉得挑战复杂的东西比较有成就感，JPEG 解码器。但现在会去追求如何把复杂的东西变简单，或者怎么找到简单的方法去解决问题。<br>KISS 原则 - keep it simple and stupid</p>\n<p><strong>陈皓</strong>：之前在银行，后来在外包公司当码农，动力主要是为了找好的工作。提升最多是在外企，当时看到外企用版本管理很震惊。当时在啃TCP/IP的书，后来在银行的工作中学以致用。<br>学习的时候喜欢看一下原理，研究为什么是这样的设计，之后觉得所有技术都在解决一个问题：把控制逻辑和业务逻辑拆分。</p>\n<p><strong>孙玄</strong>：浙大毕业，然后去百度做百度空间，之后去58做IM，做到架构师级别。后来在转转，研究中台，做首席架构师。后来发现自己对教育很感兴趣，后来去创业做教育。<br>做任何事情的时候，能不能从本质的东西搞清楚，如果本质搞清楚，道明白，那术都可以不一样。<br>心目中有两种架构师：第一种把复杂问题简单化，第二种是把简单问题复杂化。</p>\n<p><strong>唐巧</strong>：2000-2007 算法，2008 架构，2010 领域知识，2012 表达与写作，2014 产品与组织，2018 商业。<br>后来进IBM 觉得代码写得不好，开始研究架构，如何把代码写得好看。<br>后来发现周围的程序员太闷，不善言辞，跟产品经理沟通不好，所以去研究表达和写作。最终成为公司里最能把产品表达清楚的程序员。<br>觉得重要的是1.执行 2. 迭代</p>\n<p><strong>程军</strong>：从中兴到一号店到饿了吗到贝壳找房<br>认同本质的思路<br>在饿了吗开始从用户的角度去思考<br>保持高质量的输出（写文章）是非常困难的，需要去思考<br>高效能人士的七个习惯</p>\n<h2 id=\"关于读书\"><a href=\"#关于读书\" class=\"headerlink\" title=\"关于读书\"></a>关于读书</h2><p><strong>陈皓</strong>：139页 状态机，设计模式<br>状态是一个很重要的事情<br>比如一个英文文档，写一个程序要弄清楚多少单词，需要维护两个状态，一个是单词怎么开始，第二个是单词怎么样结束</p>\n<p><strong>唐巧</strong>：关于测试到底由谁负责<br>书中说了应该是程序员负责<br>意识大于流程</p>\n<p>写公众号，表达，写作</p>\n<p><strong>唐巧</strong>：<br>产品是能接受bug的，这和程序员思维非常不同</p>\n<p><strong>云风</strong>：<br>好的东西要易于修改</p>\n<h2 id=\"问答环节\"><a href=\"#问答环节\" class=\"headerlink\" title=\"问答环节\"></a>问答环节</h2><p><strong>云风</strong>：<br><a href=\"https://blog.codingnow.com/2019/09/hierarchy_tree.html\" target=\"_blank\" rel=\"noopener\">https://blog.codingnow.com/2019/09/hierarchy_tree.html</a><br><a href=\"https://blog.codingnow.com/2020/04/hierarchy_order.html#more\" target=\"_blank\" rel=\"noopener\">https://blog.codingnow.com/2020/04/hierarchy_order.html#more</a></p>\n<p><strong>陈皓</strong>：<br>硬实力：</p>\n<ol>\n<li>底层</li>\n<li>code review</li>\n</ol>\n<p>软实力：<br>管理老板，产品经理</p>\n<pre><code>XY 问题， 产品经理总会带来Y问题，需要追问X问题\n让更多人跟你承担压力，要说有条件的事，不要总是说“是”</code></pre><p><strong>云风</strong>：<br>don&#39;t think outside of the box, instead find the the box</p>"},{"title":"第一个OKR","top":false,"cover":false,"toc":true,"mathjax":true,"date":"2020-05-31T20:29:46.000Z","summary":null,"password":null,"_content":"\n\n开始用Notion之后，终于下定决心在五月下半月执行OKR，试一试新的workflow会不会让我自己更有效率。\n<!--more-->\nOKR的全称是Objectives and Key Results。它的特点有：\n\n1.  可量化，在一定时间内完成的目标是可以量化的，比如一周健身三次；\n2.  目标是比较有挑战的，一般目标定8分，只会完成6分，定10分的话，会完成8分。这样你才会不断为此而奋斗；\n\n## 转变\n\n之前我一直是用todoist（后来改成Microsoft Todo后又改了回来），规定下每天应该干什么，有些东西是一三五做，有些是二四六。后来我发现，这些有一些死板了，如果我需要在两周的时间内阅读两个章节，或者是一周健身三次，为什么一定要规定在哪天去做呢？只要在这段时间过去之后做总结，看有没有达标就可以了，这样的情况对我来说就很适合用OKR。\n\n## 感想\n\n用了OKR之后，有一个比较明显的感受是：以前我的注意力容易分散，如果在某天找到比较好的东西的话，可能明天就想去试试。这样就会打破原先的计划，而且很有可能两头都完成不好，还不如坚持之前的计划，把新发现的东西放在之后的list里；现在用了OKR，我会形成这样的思维，在发现新的东西的时候，会主动想到OKR的优先级，会更希望完成OKR中列下的事项。\n\n这次OKR我列下了11个事项，完成了六个，有两个完全没有开始。虽然不够完美，但好歹也是一个不错的开始。\n\n## 不足\n\nOKR的事项中，其实是有难易之分的，今天看来，我会更倾向于把更难的人物拖到最后做，有些就干脆没有做完，希望之后能够想到一个好的方法去解决。\n\n而且，有一些会重复发生的任务（比如说，每个月月中和月底制定下一个OKR），这样的事项不能放进OKR中，但是是需要track或者提醒的。也许它们还是应该用todoist来管理，或者直接设calendar的reminder？\n\n## 总结\n\n总而言之，从daily todo list 到OKR的确让我更productive，也更容易集中注意力干更高优先级的事情。但它不是完美的，还有很多东西需要我去探索和提升。\n\n这是我用Notion之后的第一个比较大的尝试，之后希望能够做一个思维导图来管理的我knowledge base。","source":"_posts/第一个OKR.md","raw":"---\ntitle: 第一个OKR\ntop: false\ncover: false\ntoc: true\nmathjax: true\ndate: 2020-05-31 16:29:46\nsummary:\ncategories: Life\ntags:\n    - Efficiency\n    - OKR\npassword:\n---\n\n\n开始用Notion之后，终于下定决心在五月下半月执行OKR，试一试新的workflow会不会让我自己更有效率。\n<!--more-->\nOKR的全称是Objectives and Key Results。它的特点有：\n\n1.  可量化，在一定时间内完成的目标是可以量化的，比如一周健身三次；\n2.  目标是比较有挑战的，一般目标定8分，只会完成6分，定10分的话，会完成8分。这样你才会不断为此而奋斗；\n\n## 转变\n\n之前我一直是用todoist（后来改成Microsoft Todo后又改了回来），规定下每天应该干什么，有些东西是一三五做，有些是二四六。后来我发现，这些有一些死板了，如果我需要在两周的时间内阅读两个章节，或者是一周健身三次，为什么一定要规定在哪天去做呢？只要在这段时间过去之后做总结，看有没有达标就可以了，这样的情况对我来说就很适合用OKR。\n\n## 感想\n\n用了OKR之后，有一个比较明显的感受是：以前我的注意力容易分散，如果在某天找到比较好的东西的话，可能明天就想去试试。这样就会打破原先的计划，而且很有可能两头都完成不好，还不如坚持之前的计划，把新发现的东西放在之后的list里；现在用了OKR，我会形成这样的思维，在发现新的东西的时候，会主动想到OKR的优先级，会更希望完成OKR中列下的事项。\n\n这次OKR我列下了11个事项，完成了六个，有两个完全没有开始。虽然不够完美，但好歹也是一个不错的开始。\n\n## 不足\n\nOKR的事项中，其实是有难易之分的，今天看来，我会更倾向于把更难的人物拖到最后做，有些就干脆没有做完，希望之后能够想到一个好的方法去解决。\n\n而且，有一些会重复发生的任务（比如说，每个月月中和月底制定下一个OKR），这样的事项不能放进OKR中，但是是需要track或者提醒的。也许它们还是应该用todoist来管理，或者直接设calendar的reminder？\n\n## 总结\n\n总而言之，从daily todo list 到OKR的确让我更productive，也更容易集中注意力干更高优先级的事情。但它不是完美的，还有很多东西需要我去探索和提升。\n\n这是我用Notion之后的第一个比较大的尝试，之后希望能够做一个思维导图来管理的我knowledge base。","slug":"第一个OKR","published":1,"updated":"2020-05-31T20:37:51.840Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ckcxuqetw002cfkjxywie8ycf","content":"<p>开始用Notion之后，终于下定决心在五月下半月执行OKR，试一试新的workflow会不会让我自己更有效率。</p>\n<a id=\"more\"></a>\n<p>OKR的全称是Objectives and Key Results。它的特点有：</p>\n<ol>\n<li>可量化，在一定时间内完成的目标是可以量化的，比如一周健身三次；</li>\n<li>目标是比较有挑战的，一般目标定8分，只会完成6分，定10分的话，会完成8分。这样你才会不断为此而奋斗；</li>\n</ol>\n<h2 id=\"转变\"><a href=\"#转变\" class=\"headerlink\" title=\"转变\"></a>转变</h2><p>之前我一直是用todoist（后来改成Microsoft Todo后又改了回来），规定下每天应该干什么，有些东西是一三五做，有些是二四六。后来我发现，这些有一些死板了，如果我需要在两周的时间内阅读两个章节，或者是一周健身三次，为什么一定要规定在哪天去做呢？只要在这段时间过去之后做总结，看有没有达标就可以了，这样的情况对我来说就很适合用OKR。</p>\n<h2 id=\"感想\"><a href=\"#感想\" class=\"headerlink\" title=\"感想\"></a>感想</h2><p>用了OKR之后，有一个比较明显的感受是：以前我的注意力容易分散，如果在某天找到比较好的东西的话，可能明天就想去试试。这样就会打破原先的计划，而且很有可能两头都完成不好，还不如坚持之前的计划，把新发现的东西放在之后的list里；现在用了OKR，我会形成这样的思维，在发现新的东西的时候，会主动想到OKR的优先级，会更希望完成OKR中列下的事项。</p>\n<p>这次OKR我列下了11个事项，完成了六个，有两个完全没有开始。虽然不够完美，但好歹也是一个不错的开始。</p>\n<h2 id=\"不足\"><a href=\"#不足\" class=\"headerlink\" title=\"不足\"></a>不足</h2><p>OKR的事项中，其实是有难易之分的，今天看来，我会更倾向于把更难的人物拖到最后做，有些就干脆没有做完，希望之后能够想到一个好的方法去解决。</p>\n<p>而且，有一些会重复发生的任务（比如说，每个月月中和月底制定下一个OKR），这样的事项不能放进OKR中，但是是需要track或者提醒的。也许它们还是应该用todoist来管理，或者直接设calendar的reminder？</p>\n<h2 id=\"总结\"><a href=\"#总结\" class=\"headerlink\" title=\"总结\"></a>总结</h2><p>总而言之，从daily todo list 到OKR的确让我更productive，也更容易集中注意力干更高优先级的事情。但它不是完美的，还有很多东西需要我去探索和提升。</p>\n<p>这是我用Notion之后的第一个比较大的尝试，之后希望能够做一个思维导图来管理的我knowledge base。</p>\n","site":{"data":{"next":{"override":false,"favicon":{"small":"/uploads/favicon-16x16.png","medium":"/uploads/favicon-32x32.png","apple_touch_icon":"/uploads/apple-touch-icon.png","safari_pinned_tab":"/uploads/favicon.png","ms_browserconfig":"/uploads/browserconfig.xml"},"keywords":"Hexo, NexT","rss":null,"footer":{"icon":"user","copyright":null,"powered":true,"theme":{"enable":true,"version":true}},"canonical":true,"seo":false,"index_with_subtitle":false,"menu":{"home":"/ || home","archives":"/archives/ || archive"},"menu_icons":{"enable":true},"scheme":"Pisces","social_icons":{"enable":true,"icons_only":false,"transition":false},"links_icon":"link","links_title":"Links","links_layout":"block","toc":{"enable":true,"number":true,"wrap":false},"sidebar":{"position":"left","display":"post","offset":12,"b2t":false,"scrollpercent":false,"onmobile":false},"scroll_to_more":true,"save_scroll":false,"excerpt_description":true,"auto_excerpt":{"enable":false,"length":30},"read_more_btn":true,"post_meta":{"item_text":true,"created_at":true,"updated_at":false,"categories":true},"post_wordcount":{"item_text":true,"wordcount":false,"min2read":false,"totalcount":false,"separated_meta":true},"post_copyright":{"enable":false,"license":"CC BY-NC-SA 3.0","license_url":"https://creativecommons.org/licenses/by-nc-sa/3.0/"},"mobile_layout_economy":false,"android_chrome_color":"#222","custom_logo":{"enabled":false,"image":null},"marked":{"smartypants":false},"highlight_theme":"normal","font":{"enable":false,"host":null,"global":{"external":true,"family":"Lato","size":null},"headings":{"external":true,"family":null,"size":null},"posts":{"external":true,"family":null},"logo":{"external":true,"family":null,"size":null},"codes":{"external":true,"family":null,"size":null}},"mathjax":{"enable":false,"per_page":false,"cdn":"//cdn.bootcss.com/mathjax/2.7.1/latest.js?config=TeX-AMS-MML_HTMLorMML"},"han":false,"disqus":{"enable":false,"shortname":null,"count":true},"changyan":{"enable":false,"appid":null,"appkey":null},"valine":{"enable":false,"appid":null,"appkey":null,"notify":false,"verify":false,"placeholder":"Just go go","avatar":"mm","guest_info":"nick,mail,link","pageSize":10},"gitment":{"enable":false,"mint":true,"count":true,"lazy":false,"cleanly":false,"language":null,"github_user":null,"github_repo":null,"client_id":null,"client_secret":null,"proxy_gateway":null,"redirect_protocol":null},"needmoreshare2":{"enable":false,"postbottom":{"enable":false,"options":{"iconStyle":"box","boxForm":"horizontal","position":"bottomCenter","networks":"Weibo,Wechat,Douban,QQZone,Twitter,Facebook"}},"float":{"enable":false,"options":{"iconStyle":"box","boxForm":"horizontal","position":"middleRight","networks":"Weibo,Wechat,Douban,QQZone,Twitter,Facebook"}}},"duoshuo_info":{"ua_enable":true,"admin_enable":false,"user_id":0},"facebook_sdk":{"enable":false,"app_id":null,"fb_admin":null,"like_button":null,"webmaster":null},"facebook_comments_plugin":{"enable":false,"num_of_posts":10,"width":"100%","scheme":"light"},"vkontakte_api":{"enable":false,"app_id":null,"like":true,"comments":true,"num_of_posts":10},"rating":{"enable":false,"id":null,"color":"fc6423"},"leancloud_visitors":{"enable":false,"app_id":null,"app_key":null},"firestore":{"enable":false,"collection":"articles","apiKey":null,"projectId":null,"bluebird":false},"busuanzi_count":{"enable":false,"site_uv":true,"site_uv_header":"<i class=\"fa fa-user\"></i>","site_uv_footer":null,"site_pv":true,"site_pv_header":"<i class=\"fa fa-eye\"></i>","site_pv_footer":null,"page_pv":true,"page_pv_header":"<i class=\"fa fa-file-o\"></i>","page_pv_footer":null},"baidu_push":false,"calendar":{"enable":false,"calendar_id":"<required>","api_key":"<required>","orderBy":"startTime","offsetMax":24,"offsetMin":4,"timeZone":null,"showDeleted":false,"singleEvents":true,"maxResults":250},"algolia_search":{"enable":false,"hits":{"per_page":10},"labels":{"input_placeholder":"Search for Posts","hits_empty":"We didn't find any results for the search: ${query}","hits_stats":"${hits} results found in ${time} ms"}},"local_search":{"enable":false,"trigger":"auto","top_n_per_article":1},"exturl":false,"note":{"style":"simple","icons":false,"border_radius":3,"light_bg_offset":0},"label":true,"tabs":{"enable":true,"transition":{"tabs":false,"labels":true},"border_radius":0},"motion":{"enable":true,"async":false,"transition":{"post_block":"fadeIn","post_header":"slideDownIn","post_body":"slideDownIn","coll_header":"slideLeftIn","sidebar":"slideUpIn"}},"fancybox":true,"pace":false,"pace_theme":"pace-theme-minimal","canvas_nest":false,"three_waves":false,"canvas_lines":false,"canvas_sphere":false,"canvas_ribbon":{"enable":false,"size":300,"alpha":0.6,"zIndex":-1},"vendors":{"_internal":"lib","jquery":null,"fancybox":null,"fancybox_css":null,"fastclick":null,"lazyload":null,"velocity":null,"velocity_ui":null,"ua_parser":null,"fontawesome":null,"algolia_instant_js":null,"algolia_instant_css":null,"pace":null,"pace_css":null,"canvas_nest":null,"three":null,"three_waves":null,"canvas_lines":null,"canvas_sphere":null,"canvas_ribbon":null,"han":null,"needMoreShare2":null},"css":"css","js":"js","images":"images","version":"5.1.4"}}},"excerpt":"<p>开始用Notion之后，终于下定决心在五月下半月执行OKR，试一试新的workflow会不会让我自己更有效率。</p>","more":"<p>OKR的全称是Objectives and Key Results。它的特点有：</p>\n<ol>\n<li>可量化，在一定时间内完成的目标是可以量化的，比如一周健身三次；</li>\n<li>目标是比较有挑战的，一般目标定8分，只会完成6分，定10分的话，会完成8分。这样你才会不断为此而奋斗；</li>\n</ol>\n<h2 id=\"转变\"><a href=\"#转变\" class=\"headerlink\" title=\"转变\"></a>转变</h2><p>之前我一直是用todoist（后来改成Microsoft Todo后又改了回来），规定下每天应该干什么，有些东西是一三五做，有些是二四六。后来我发现，这些有一些死板了，如果我需要在两周的时间内阅读两个章节，或者是一周健身三次，为什么一定要规定在哪天去做呢？只要在这段时间过去之后做总结，看有没有达标就可以了，这样的情况对我来说就很适合用OKR。</p>\n<h2 id=\"感想\"><a href=\"#感想\" class=\"headerlink\" title=\"感想\"></a>感想</h2><p>用了OKR之后，有一个比较明显的感受是：以前我的注意力容易分散，如果在某天找到比较好的东西的话，可能明天就想去试试。这样就会打破原先的计划，而且很有可能两头都完成不好，还不如坚持之前的计划，把新发现的东西放在之后的list里；现在用了OKR，我会形成这样的思维，在发现新的东西的时候，会主动想到OKR的优先级，会更希望完成OKR中列下的事项。</p>\n<p>这次OKR我列下了11个事项，完成了六个，有两个完全没有开始。虽然不够完美，但好歹也是一个不错的开始。</p>\n<h2 id=\"不足\"><a href=\"#不足\" class=\"headerlink\" title=\"不足\"></a>不足</h2><p>OKR的事项中，其实是有难易之分的，今天看来，我会更倾向于把更难的人物拖到最后做，有些就干脆没有做完，希望之后能够想到一个好的方法去解决。</p>\n<p>而且，有一些会重复发生的任务（比如说，每个月月中和月底制定下一个OKR），这样的事项不能放进OKR中，但是是需要track或者提醒的。也许它们还是应该用todoist来管理，或者直接设calendar的reminder？</p>\n<h2 id=\"总结\"><a href=\"#总结\" class=\"headerlink\" title=\"总结\"></a>总结</h2><p>总而言之，从daily todo list 到OKR的确让我更productive，也更容易集中注意力干更高优先级的事情。但它不是完美的，还有很多东西需要我去探索和提升。</p>\n<p>这是我用Notion之后的第一个比较大的尝试，之后希望能够做一个思维导图来管理的我knowledge base。</p>"},{"title":"# 第三个OKR","top":false,"cover":false,"toc":true,"mathjax":true,"date":"2020-07-02T03:00:24.000Z","summary":null,"password":null,"_content":"\n# 第三个OKR\n<!--more-->\n第三个OKR结束了。\n\n在第二个OKR结束之后，我对第三个OKR做一个改动：在每一个OKR加上权重，突出优先级。我有六个OKR task的优先级最高(3),六个优先级中等(2)，三个优先级最低（1）。\n\n结果怎么样呢？\n\n- 六个最高优先级的OKR task中，我完成了三个，有两个进行到了一半，有一个没有开始。\n- 六个中等优先级的OKR task中，我完成了一个，有两个完成了一大半，两个完成了一小部分，一个没有开始。\n- 三个最低优先级的OKR task中，我完成了一个，有一个完成了一大半，一个完成了一小部分。\n\n总体算来，完成率是60%左右。\n\n虽然之前的OKR没有用上权重，但是这次OKR有肉眼可见的提升，我的确成功地增加了更高优先级OKR的完成度。考虑到这两周我花了不少时间玩游戏，这个完成度我很满意。\n\n当然，这也并不代表什么问题都没有：\n\n有些任务涉及到他人，我们需要拆分得更细一些，因为你无法控制别人的行为，而他们又会影响你的进度\n有的课程有很多个课时，如果不管这些细节的话，学习的过程会比较没有那么多动力，比如一门课有五十节课，哼哧哼哧学了一个礼拜学到第二十节，但是进度条还是0。Target value从1改成50的话，也许会更有motivation，而且如果做不完的话也会很方便的挪到下一个OKR\n现在有了权重，我就能大概知道我一个OKR task能完成多少任务了，这有点类似JIRA里面的每一个card的point，加起来就知道一个sprint完成的任务。\n\n对于七月第一个OKR，我并不会做太大的调整，目前选出的任务的权重加起来的总量和上一个一样，希望能有更高的完成度。","source":"_posts/第三个OKR.md","raw":"---\ntitle: '# 第三个OKR'\ntop: false\ncover: false\ntoc: true\nmathjax: true\ndate: 2020-07-01 23:00:24\nsummary:\ncategories: Life\ntags:\n    - Efficiency\n    - OKR\npassword:\n---\n\n# 第三个OKR\n<!--more-->\n第三个OKR结束了。\n\n在第二个OKR结束之后，我对第三个OKR做一个改动：在每一个OKR加上权重，突出优先级。我有六个OKR task的优先级最高(3),六个优先级中等(2)，三个优先级最低（1）。\n\n结果怎么样呢？\n\n- 六个最高优先级的OKR task中，我完成了三个，有两个进行到了一半，有一个没有开始。\n- 六个中等优先级的OKR task中，我完成了一个，有两个完成了一大半，两个完成了一小部分，一个没有开始。\n- 三个最低优先级的OKR task中，我完成了一个，有一个完成了一大半，一个完成了一小部分。\n\n总体算来，完成率是60%左右。\n\n虽然之前的OKR没有用上权重，但是这次OKR有肉眼可见的提升，我的确成功地增加了更高优先级OKR的完成度。考虑到这两周我花了不少时间玩游戏，这个完成度我很满意。\n\n当然，这也并不代表什么问题都没有：\n\n有些任务涉及到他人，我们需要拆分得更细一些，因为你无法控制别人的行为，而他们又会影响你的进度\n有的课程有很多个课时，如果不管这些细节的话，学习的过程会比较没有那么多动力，比如一门课有五十节课，哼哧哼哧学了一个礼拜学到第二十节，但是进度条还是0。Target value从1改成50的话，也许会更有motivation，而且如果做不完的话也会很方便的挪到下一个OKR\n现在有了权重，我就能大概知道我一个OKR task能完成多少任务了，这有点类似JIRA里面的每一个card的point，加起来就知道一个sprint完成的任务。\n\n对于七月第一个OKR，我并不会做太大的调整，目前选出的任务的权重加起来的总量和上一个一样，希望能有更高的完成度。","slug":"第三个OKR","published":1,"updated":"2020-07-13T03:01:51.472Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ckcxuqeu3002gfkjx9eejxxw5","content":"<h1 id=\"第三个OKR\"><a href=\"#第三个OKR\" class=\"headerlink\" title=\"第三个OKR\"></a>第三个OKR</h1><a id=\"more\"></a>\n<p>第三个OKR结束了。</p>\n<p>在第二个OKR结束之后，我对第三个OKR做一个改动：在每一个OKR加上权重，突出优先级。我有六个OKR task的优先级最高(3),六个优先级中等(2)，三个优先级最低（1）。</p>\n<p>结果怎么样呢？</p>\n<ul>\n<li>六个最高优先级的OKR task中，我完成了三个，有两个进行到了一半，有一个没有开始。</li>\n<li>六个中等优先级的OKR task中，我完成了一个，有两个完成了一大半，两个完成了一小部分，一个没有开始。</li>\n<li>三个最低优先级的OKR task中，我完成了一个，有一个完成了一大半，一个完成了一小部分。</li>\n</ul>\n<p>总体算来，完成率是60%左右。</p>\n<p>虽然之前的OKR没有用上权重，但是这次OKR有肉眼可见的提升，我的确成功地增加了更高优先级OKR的完成度。考虑到这两周我花了不少时间玩游戏，这个完成度我很满意。</p>\n<p>当然，这也并不代表什么问题都没有：</p>\n<p>有些任务涉及到他人，我们需要拆分得更细一些，因为你无法控制别人的行为，而他们又会影响你的进度<br>有的课程有很多个课时，如果不管这些细节的话，学习的过程会比较没有那么多动力，比如一门课有五十节课，哼哧哼哧学了一个礼拜学到第二十节，但是进度条还是0。Target value从1改成50的话，也许会更有motivation，而且如果做不完的话也会很方便的挪到下一个OKR<br>现在有了权重，我就能大概知道我一个OKR task能完成多少任务了，这有点类似JIRA里面的每一个card的point，加起来就知道一个sprint完成的任务。</p>\n<p>对于七月第一个OKR，我并不会做太大的调整，目前选出的任务的权重加起来的总量和上一个一样，希望能有更高的完成度。</p>\n","site":{"data":{"next":{"override":false,"favicon":{"small":"/uploads/favicon-16x16.png","medium":"/uploads/favicon-32x32.png","apple_touch_icon":"/uploads/apple-touch-icon.png","safari_pinned_tab":"/uploads/favicon.png","ms_browserconfig":"/uploads/browserconfig.xml"},"keywords":"Hexo, NexT","rss":null,"footer":{"icon":"user","copyright":null,"powered":true,"theme":{"enable":true,"version":true}},"canonical":true,"seo":false,"index_with_subtitle":false,"menu":{"home":"/ || home","archives":"/archives/ || archive"},"menu_icons":{"enable":true},"scheme":"Pisces","social_icons":{"enable":true,"icons_only":false,"transition":false},"links_icon":"link","links_title":"Links","links_layout":"block","toc":{"enable":true,"number":true,"wrap":false},"sidebar":{"position":"left","display":"post","offset":12,"b2t":false,"scrollpercent":false,"onmobile":false},"scroll_to_more":true,"save_scroll":false,"excerpt_description":true,"auto_excerpt":{"enable":false,"length":30},"read_more_btn":true,"post_meta":{"item_text":true,"created_at":true,"updated_at":false,"categories":true},"post_wordcount":{"item_text":true,"wordcount":false,"min2read":false,"totalcount":false,"separated_meta":true},"post_copyright":{"enable":false,"license":"CC BY-NC-SA 3.0","license_url":"https://creativecommons.org/licenses/by-nc-sa/3.0/"},"mobile_layout_economy":false,"android_chrome_color":"#222","custom_logo":{"enabled":false,"image":null},"marked":{"smartypants":false},"highlight_theme":"normal","font":{"enable":false,"host":null,"global":{"external":true,"family":"Lato","size":null},"headings":{"external":true,"family":null,"size":null},"posts":{"external":true,"family":null},"logo":{"external":true,"family":null,"size":null},"codes":{"external":true,"family":null,"size":null}},"mathjax":{"enable":false,"per_page":false,"cdn":"//cdn.bootcss.com/mathjax/2.7.1/latest.js?config=TeX-AMS-MML_HTMLorMML"},"han":false,"disqus":{"enable":false,"shortname":null,"count":true},"changyan":{"enable":false,"appid":null,"appkey":null},"valine":{"enable":false,"appid":null,"appkey":null,"notify":false,"verify":false,"placeholder":"Just go go","avatar":"mm","guest_info":"nick,mail,link","pageSize":10},"gitment":{"enable":false,"mint":true,"count":true,"lazy":false,"cleanly":false,"language":null,"github_user":null,"github_repo":null,"client_id":null,"client_secret":null,"proxy_gateway":null,"redirect_protocol":null},"needmoreshare2":{"enable":false,"postbottom":{"enable":false,"options":{"iconStyle":"box","boxForm":"horizontal","position":"bottomCenter","networks":"Weibo,Wechat,Douban,QQZone,Twitter,Facebook"}},"float":{"enable":false,"options":{"iconStyle":"box","boxForm":"horizontal","position":"middleRight","networks":"Weibo,Wechat,Douban,QQZone,Twitter,Facebook"}}},"duoshuo_info":{"ua_enable":true,"admin_enable":false,"user_id":0},"facebook_sdk":{"enable":false,"app_id":null,"fb_admin":null,"like_button":null,"webmaster":null},"facebook_comments_plugin":{"enable":false,"num_of_posts":10,"width":"100%","scheme":"light"},"vkontakte_api":{"enable":false,"app_id":null,"like":true,"comments":true,"num_of_posts":10},"rating":{"enable":false,"id":null,"color":"fc6423"},"leancloud_visitors":{"enable":false,"app_id":null,"app_key":null},"firestore":{"enable":false,"collection":"articles","apiKey":null,"projectId":null,"bluebird":false},"busuanzi_count":{"enable":false,"site_uv":true,"site_uv_header":"<i class=\"fa fa-user\"></i>","site_uv_footer":null,"site_pv":true,"site_pv_header":"<i class=\"fa fa-eye\"></i>","site_pv_footer":null,"page_pv":true,"page_pv_header":"<i class=\"fa fa-file-o\"></i>","page_pv_footer":null},"baidu_push":false,"calendar":{"enable":false,"calendar_id":"<required>","api_key":"<required>","orderBy":"startTime","offsetMax":24,"offsetMin":4,"timeZone":null,"showDeleted":false,"singleEvents":true,"maxResults":250},"algolia_search":{"enable":false,"hits":{"per_page":10},"labels":{"input_placeholder":"Search for Posts","hits_empty":"We didn't find any results for the search: ${query}","hits_stats":"${hits} results found in ${time} ms"}},"local_search":{"enable":false,"trigger":"auto","top_n_per_article":1},"exturl":false,"note":{"style":"simple","icons":false,"border_radius":3,"light_bg_offset":0},"label":true,"tabs":{"enable":true,"transition":{"tabs":false,"labels":true},"border_radius":0},"motion":{"enable":true,"async":false,"transition":{"post_block":"fadeIn","post_header":"slideDownIn","post_body":"slideDownIn","coll_header":"slideLeftIn","sidebar":"slideUpIn"}},"fancybox":true,"pace":false,"pace_theme":"pace-theme-minimal","canvas_nest":false,"three_waves":false,"canvas_lines":false,"canvas_sphere":false,"canvas_ribbon":{"enable":false,"size":300,"alpha":0.6,"zIndex":-1},"vendors":{"_internal":"lib","jquery":null,"fancybox":null,"fancybox_css":null,"fastclick":null,"lazyload":null,"velocity":null,"velocity_ui":null,"ua_parser":null,"fontawesome":null,"algolia_instant_js":null,"algolia_instant_css":null,"pace":null,"pace_css":null,"canvas_nest":null,"three":null,"three_waves":null,"canvas_lines":null,"canvas_sphere":null,"canvas_ribbon":null,"han":null,"needMoreShare2":null},"css":"css","js":"js","images":"images","version":"5.1.4"}}},"excerpt":"<h1 id=\"第三个OKR\"><a href=\"#第三个OKR\" class=\"headerlink\" title=\"第三个OKR\"></a>第三个OKR</h1>","more":"<p>第三个OKR结束了。</p>\n<p>在第二个OKR结束之后，我对第三个OKR做一个改动：在每一个OKR加上权重，突出优先级。我有六个OKR task的优先级最高(3),六个优先级中等(2)，三个优先级最低（1）。</p>\n<p>结果怎么样呢？</p>\n<ul>\n<li>六个最高优先级的OKR task中，我完成了三个，有两个进行到了一半，有一个没有开始。</li>\n<li>六个中等优先级的OKR task中，我完成了一个，有两个完成了一大半，两个完成了一小部分，一个没有开始。</li>\n<li>三个最低优先级的OKR task中，我完成了一个，有一个完成了一大半，一个完成了一小部分。</li>\n</ul>\n<p>总体算来，完成率是60%左右。</p>\n<p>虽然之前的OKR没有用上权重，但是这次OKR有肉眼可见的提升，我的确成功地增加了更高优先级OKR的完成度。考虑到这两周我花了不少时间玩游戏，这个完成度我很满意。</p>\n<p>当然，这也并不代表什么问题都没有：</p>\n<p>有些任务涉及到他人，我们需要拆分得更细一些，因为你无法控制别人的行为，而他们又会影响你的进度<br>有的课程有很多个课时，如果不管这些细节的话，学习的过程会比较没有那么多动力，比如一门课有五十节课，哼哧哼哧学了一个礼拜学到第二十节，但是进度条还是0。Target value从1改成50的话，也许会更有motivation，而且如果做不完的话也会很方便的挪到下一个OKR<br>现在有了权重，我就能大概知道我一个OKR task能完成多少任务了，这有点类似JIRA里面的每一个card的point，加起来就知道一个sprint完成的任务。</p>\n<p>对于七月第一个OKR，我并不会做太大的调整，目前选出的任务的权重加起来的总量和上一个一样，希望能有更高的完成度。</p>"},{"title":"第二个OKR","top":false,"cover":false,"toc":true,"mathjax":true,"date":"2020-06-17T13:47:10.000Z","summary":null,"password":null,"_content":"\n很快第二个OKR也过去了，这次总体成绩比上次要好，大部分任务都完成了，上次说的读书的问题这次也完成的很好（虽然TCP/IP那一章我啃了一个礼拜）。\n<!--more-->\n问题是什么呢？我在这个OKR的最后一天在写这一篇文章，而这一篇文章将是我这两周唯一发表的一篇文章，远低于我的预期（5篇）。\n\n我分析了一下原因，大概有下面几个：\n\n1. 没有合适的规划，比如每一篇大概用哪个主题；\n2. 惰性，往往看到有别的可以完成，就去完成别的更简单的任务了\n\n我觉得OKR的综合评分是不是加上权重会更好一点，比如写作应该是优先级非常高的任务，应该给予比较高的权重。\n\n还有一点，有一些任务是比较琐碎的，比如push多少个commit，看多少篇科技文章。这些给我的感觉：\n\n1. 它们和别的有可能会有重合，比如我学习了一些课，就自然会push一些代码去github。\n2. 它们感觉太细粒度了，如果有一个更high level的objective的话，是不是会更好？\n3. 但是去除他们又感觉怕怕的，毕竟它们的存在对我来说也是一个督促，在一些情况下能起到提醒的作用。\n\n第三个OKR 我准备加上权重，这样虽然有些任务比较琐碎，有重复性，但是如果权重比较低的话，也会让我自然而然地去选择权重较高的项目去完成。同时这些琐碎的任务也能让我在效率较低的时候实现刷刷刷的快感。\n\n看看有了这些改变之后，能不能反映更真实的结果，督促自己完成更重要的任务。","source":"_posts/第二个OKR.md","raw":"---\ntitle: '第二个OKR'\ntop: false\ncover: false\ntoc: true\nmathjax: true\ndate: 2020-06-17 09:47:10\nsummary:\ncategories: Life\ntags:\n    - Efficiency\n    - OKR\npassword:\n---\n\n很快第二个OKR也过去了，这次总体成绩比上次要好，大部分任务都完成了，上次说的读书的问题这次也完成的很好（虽然TCP/IP那一章我啃了一个礼拜）。\n<!--more-->\n问题是什么呢？我在这个OKR的最后一天在写这一篇文章，而这一篇文章将是我这两周唯一发表的一篇文章，远低于我的预期（5篇）。\n\n我分析了一下原因，大概有下面几个：\n\n1. 没有合适的规划，比如每一篇大概用哪个主题；\n2. 惰性，往往看到有别的可以完成，就去完成别的更简单的任务了\n\n我觉得OKR的综合评分是不是加上权重会更好一点，比如写作应该是优先级非常高的任务，应该给予比较高的权重。\n\n还有一点，有一些任务是比较琐碎的，比如push多少个commit，看多少篇科技文章。这些给我的感觉：\n\n1. 它们和别的有可能会有重合，比如我学习了一些课，就自然会push一些代码去github。\n2. 它们感觉太细粒度了，如果有一个更high level的objective的话，是不是会更好？\n3. 但是去除他们又感觉怕怕的，毕竟它们的存在对我来说也是一个督促，在一些情况下能起到提醒的作用。\n\n第三个OKR 我准备加上权重，这样虽然有些任务比较琐碎，有重复性，但是如果权重比较低的话，也会让我自然而然地去选择权重较高的项目去完成。同时这些琐碎的任务也能让我在效率较低的时候实现刷刷刷的快感。\n\n看看有了这些改变之后，能不能反映更真实的结果，督促自己完成更重要的任务。","slug":"第二个OKR","published":1,"updated":"2020-06-17T13:53:25.173Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ckcxuqeua002jfkjxza0s65wn","content":"<p>很快第二个OKR也过去了，这次总体成绩比上次要好，大部分任务都完成了，上次说的读书的问题这次也完成的很好（虽然TCP/IP那一章我啃了一个礼拜）。</p>\n<a id=\"more\"></a>\n<p>问题是什么呢？我在这个OKR的最后一天在写这一篇文章，而这一篇文章将是我这两周唯一发表的一篇文章，远低于我的预期（5篇）。</p>\n<p>我分析了一下原因，大概有下面几个：</p>\n<ol>\n<li>没有合适的规划，比如每一篇大概用哪个主题；</li>\n<li>惰性，往往看到有别的可以完成，就去完成别的更简单的任务了</li>\n</ol>\n<p>我觉得OKR的综合评分是不是加上权重会更好一点，比如写作应该是优先级非常高的任务，应该给予比较高的权重。</p>\n<p>还有一点，有一些任务是比较琐碎的，比如push多少个commit，看多少篇科技文章。这些给我的感觉：</p>\n<ol>\n<li>它们和别的有可能会有重合，比如我学习了一些课，就自然会push一些代码去github。</li>\n<li>它们感觉太细粒度了，如果有一个更high level的objective的话，是不是会更好？</li>\n<li>但是去除他们又感觉怕怕的，毕竟它们的存在对我来说也是一个督促，在一些情况下能起到提醒的作用。</li>\n</ol>\n<p>第三个OKR 我准备加上权重，这样虽然有些任务比较琐碎，有重复性，但是如果权重比较低的话，也会让我自然而然地去选择权重较高的项目去完成。同时这些琐碎的任务也能让我在效率较低的时候实现刷刷刷的快感。</p>\n<p>看看有了这些改变之后，能不能反映更真实的结果，督促自己完成更重要的任务。</p>\n","site":{"data":{"next":{"override":false,"favicon":{"small":"/uploads/favicon-16x16.png","medium":"/uploads/favicon-32x32.png","apple_touch_icon":"/uploads/apple-touch-icon.png","safari_pinned_tab":"/uploads/favicon.png","ms_browserconfig":"/uploads/browserconfig.xml"},"keywords":"Hexo, NexT","rss":null,"footer":{"icon":"user","copyright":null,"powered":true,"theme":{"enable":true,"version":true}},"canonical":true,"seo":false,"index_with_subtitle":false,"menu":{"home":"/ || home","archives":"/archives/ || archive"},"menu_icons":{"enable":true},"scheme":"Pisces","social_icons":{"enable":true,"icons_only":false,"transition":false},"links_icon":"link","links_title":"Links","links_layout":"block","toc":{"enable":true,"number":true,"wrap":false},"sidebar":{"position":"left","display":"post","offset":12,"b2t":false,"scrollpercent":false,"onmobile":false},"scroll_to_more":true,"save_scroll":false,"excerpt_description":true,"auto_excerpt":{"enable":false,"length":30},"read_more_btn":true,"post_meta":{"item_text":true,"created_at":true,"updated_at":false,"categories":true},"post_wordcount":{"item_text":true,"wordcount":false,"min2read":false,"totalcount":false,"separated_meta":true},"post_copyright":{"enable":false,"license":"CC BY-NC-SA 3.0","license_url":"https://creativecommons.org/licenses/by-nc-sa/3.0/"},"mobile_layout_economy":false,"android_chrome_color":"#222","custom_logo":{"enabled":false,"image":null},"marked":{"smartypants":false},"highlight_theme":"normal","font":{"enable":false,"host":null,"global":{"external":true,"family":"Lato","size":null},"headings":{"external":true,"family":null,"size":null},"posts":{"external":true,"family":null},"logo":{"external":true,"family":null,"size":null},"codes":{"external":true,"family":null,"size":null}},"mathjax":{"enable":false,"per_page":false,"cdn":"//cdn.bootcss.com/mathjax/2.7.1/latest.js?config=TeX-AMS-MML_HTMLorMML"},"han":false,"disqus":{"enable":false,"shortname":null,"count":true},"changyan":{"enable":false,"appid":null,"appkey":null},"valine":{"enable":false,"appid":null,"appkey":null,"notify":false,"verify":false,"placeholder":"Just go go","avatar":"mm","guest_info":"nick,mail,link","pageSize":10},"gitment":{"enable":false,"mint":true,"count":true,"lazy":false,"cleanly":false,"language":null,"github_user":null,"github_repo":null,"client_id":null,"client_secret":null,"proxy_gateway":null,"redirect_protocol":null},"needmoreshare2":{"enable":false,"postbottom":{"enable":false,"options":{"iconStyle":"box","boxForm":"horizontal","position":"bottomCenter","networks":"Weibo,Wechat,Douban,QQZone,Twitter,Facebook"}},"float":{"enable":false,"options":{"iconStyle":"box","boxForm":"horizontal","position":"middleRight","networks":"Weibo,Wechat,Douban,QQZone,Twitter,Facebook"}}},"duoshuo_info":{"ua_enable":true,"admin_enable":false,"user_id":0},"facebook_sdk":{"enable":false,"app_id":null,"fb_admin":null,"like_button":null,"webmaster":null},"facebook_comments_plugin":{"enable":false,"num_of_posts":10,"width":"100%","scheme":"light"},"vkontakte_api":{"enable":false,"app_id":null,"like":true,"comments":true,"num_of_posts":10},"rating":{"enable":false,"id":null,"color":"fc6423"},"leancloud_visitors":{"enable":false,"app_id":null,"app_key":null},"firestore":{"enable":false,"collection":"articles","apiKey":null,"projectId":null,"bluebird":false},"busuanzi_count":{"enable":false,"site_uv":true,"site_uv_header":"<i class=\"fa fa-user\"></i>","site_uv_footer":null,"site_pv":true,"site_pv_header":"<i class=\"fa fa-eye\"></i>","site_pv_footer":null,"page_pv":true,"page_pv_header":"<i class=\"fa fa-file-o\"></i>","page_pv_footer":null},"baidu_push":false,"calendar":{"enable":false,"calendar_id":"<required>","api_key":"<required>","orderBy":"startTime","offsetMax":24,"offsetMin":4,"timeZone":null,"showDeleted":false,"singleEvents":true,"maxResults":250},"algolia_search":{"enable":false,"hits":{"per_page":10},"labels":{"input_placeholder":"Search for Posts","hits_empty":"We didn't find any results for the search: ${query}","hits_stats":"${hits} results found in ${time} ms"}},"local_search":{"enable":false,"trigger":"auto","top_n_per_article":1},"exturl":false,"note":{"style":"simple","icons":false,"border_radius":3,"light_bg_offset":0},"label":true,"tabs":{"enable":true,"transition":{"tabs":false,"labels":true},"border_radius":0},"motion":{"enable":true,"async":false,"transition":{"post_block":"fadeIn","post_header":"slideDownIn","post_body":"slideDownIn","coll_header":"slideLeftIn","sidebar":"slideUpIn"}},"fancybox":true,"pace":false,"pace_theme":"pace-theme-minimal","canvas_nest":false,"three_waves":false,"canvas_lines":false,"canvas_sphere":false,"canvas_ribbon":{"enable":false,"size":300,"alpha":0.6,"zIndex":-1},"vendors":{"_internal":"lib","jquery":null,"fancybox":null,"fancybox_css":null,"fastclick":null,"lazyload":null,"velocity":null,"velocity_ui":null,"ua_parser":null,"fontawesome":null,"algolia_instant_js":null,"algolia_instant_css":null,"pace":null,"pace_css":null,"canvas_nest":null,"three":null,"three_waves":null,"canvas_lines":null,"canvas_sphere":null,"canvas_ribbon":null,"han":null,"needMoreShare2":null},"css":"css","js":"js","images":"images","version":"5.1.4"}}},"excerpt":"<p>很快第二个OKR也过去了，这次总体成绩比上次要好，大部分任务都完成了，上次说的读书的问题这次也完成的很好（虽然TCP/IP那一章我啃了一个礼拜）。</p>","more":"<p>问题是什么呢？我在这个OKR的最后一天在写这一篇文章，而这一篇文章将是我这两周唯一发表的一篇文章，远低于我的预期（5篇）。</p>\n<p>我分析了一下原因，大概有下面几个：</p>\n<ol>\n<li>没有合适的规划，比如每一篇大概用哪个主题；</li>\n<li>惰性，往往看到有别的可以完成，就去完成别的更简单的任务了</li>\n</ol>\n<p>我觉得OKR的综合评分是不是加上权重会更好一点，比如写作应该是优先级非常高的任务，应该给予比较高的权重。</p>\n<p>还有一点，有一些任务是比较琐碎的，比如push多少个commit，看多少篇科技文章。这些给我的感觉：</p>\n<ol>\n<li>它们和别的有可能会有重合，比如我学习了一些课，就自然会push一些代码去github。</li>\n<li>它们感觉太细粒度了，如果有一个更high level的objective的话，是不是会更好？</li>\n<li>但是去除他们又感觉怕怕的，毕竟它们的存在对我来说也是一个督促，在一些情况下能起到提醒的作用。</li>\n</ol>\n<p>第三个OKR 我准备加上权重，这样虽然有些任务比较琐碎，有重复性，但是如果权重比较低的话，也会让我自然而然地去选择权重较高的项目去完成。同时这些琐碎的任务也能让我在效率较低的时候实现刷刷刷的快感。</p>\n<p>看看有了这些改变之后，能不能反映更真实的结果，督促自己完成更重要的任务。</p>"},{"title":"第四个OKR","top":false,"cover":false,"toc":true,"mathjax":true,"date":"2020-07-16T01:03:43.000Z","summary":null,"password":null,"_content":"\n# 第四个OKR\n<!--more-->\n第四个OKR结束了！结果喜人。\n\n|                    |               第三个OKR               |            第四个OKR             |\n| :----------------: | :-----------------------------------: | :------------------------------: |\n| 总完成率* 总任务量 |                 20.03                 |              26.862              |\n|   weight3完成量    |       三个100%，两个一半，一个0       |  三个100%，一个一半，一个刚开始  |\n|   weight2完成量    | 一个100%，两个快结束，两个刚开始一个0 |       三个100%，四个快结束       |\n|   weight1完成量    |   一个100%，一个快结束，一个刚开始    | 两个100%，一个快结束，一个刚开始 |\n\n\n\n有些课程比想象中进度要缓慢不少，比如正在学习的go的这门课程，55节课，每节课10分钟以内，看起来非常轻松，也就加起来十个小时的事儿。可是学下来才发现并不是这样，跟着写代码，理解代码，理解课程背后的一些内容，这些都很花时间，算下来其实远不止十个小时。再加上战线比较长，学了几节课之后会有疲惫感。\n\n这个OKR的读书任务比较重，所以完成程度比较差，每一章的内容长度比堪比之前的两章甚至还多，所以刚读起来就心里有了压力。再加上APUE这本书非常难啃，幸运的是我找到了一个非常好的讲解视频，跟这它看会让阅读轻松非常多，同时这也意味着花在上面的时间更多了（因为要加上视频和代码练习）。之后希望能够先看下篇幅，再去定任务，如果一章很长的话，那就读少一点。\n\n因为堆积的to read list太长，我这一两周都没有去阅读新的email或者别的信息源，目的是想把积压的文章读完。结果是文章也没读，新的文章也完全没有加进来。有的文章很短，有的文章很长，有时也让人动力不高。\n\n有一个想法是，在OKR开始的时候，不如每一个任务都试着做一做，知道大概是什么样的，心里有一个大概的认知，任务量大不大，多久能做完。这样在比如效率不高的时候，也许就可以做那些自己知道的可以无脑去做的任务。\n\n还有一个感受就是，每天因为要完成OKR给自己带来的压力，有一点影响工作。有时早上起来之后想先读书，啃大部头，看到九点多十点就会嘀咕要不要去工作，会有一种无形的压力的感觉。也许可以把工作中的一个挑战放进OKR里面。\n\n有了OKR以来，生活中多了一点点压力，非常正向的压力，让我在做决策的时候随时都在想，这个对我的OKR的帮助是大还是小。我非常欣喜于这种优先级的思考给我带来的好处。\n\n总而言之，好希望有一个能够轻松顺利全部完成的OKR啊！","source":"_posts/第四个OKR.md","raw":"---\ntitle: 第四个OKR\ntop: false\ncover: false\ntoc: true\nmathjax: true\ndate: 2020-07-15 21:03:43\nsummary:\ncategories: Life\ntags:\n    - Efficiency\n    - OKR\npassword:\n---\n\n# 第四个OKR\n<!--more-->\n第四个OKR结束了！结果喜人。\n\n|                    |               第三个OKR               |            第四个OKR             |\n| :----------------: | :-----------------------------------: | :------------------------------: |\n| 总完成率* 总任务量 |                 20.03                 |              26.862              |\n|   weight3完成量    |       三个100%，两个一半，一个0       |  三个100%，一个一半，一个刚开始  |\n|   weight2完成量    | 一个100%，两个快结束，两个刚开始一个0 |       三个100%，四个快结束       |\n|   weight1完成量    |   一个100%，一个快结束，一个刚开始    | 两个100%，一个快结束，一个刚开始 |\n\n\n\n有些课程比想象中进度要缓慢不少，比如正在学习的go的这门课程，55节课，每节课10分钟以内，看起来非常轻松，也就加起来十个小时的事儿。可是学下来才发现并不是这样，跟着写代码，理解代码，理解课程背后的一些内容，这些都很花时间，算下来其实远不止十个小时。再加上战线比较长，学了几节课之后会有疲惫感。\n\n这个OKR的读书任务比较重，所以完成程度比较差，每一章的内容长度比堪比之前的两章甚至还多，所以刚读起来就心里有了压力。再加上APUE这本书非常难啃，幸运的是我找到了一个非常好的讲解视频，跟这它看会让阅读轻松非常多，同时这也意味着花在上面的时间更多了（因为要加上视频和代码练习）。之后希望能够先看下篇幅，再去定任务，如果一章很长的话，那就读少一点。\n\n因为堆积的to read list太长，我这一两周都没有去阅读新的email或者别的信息源，目的是想把积压的文章读完。结果是文章也没读，新的文章也完全没有加进来。有的文章很短，有的文章很长，有时也让人动力不高。\n\n有一个想法是，在OKR开始的时候，不如每一个任务都试着做一做，知道大概是什么样的，心里有一个大概的认知，任务量大不大，多久能做完。这样在比如效率不高的时候，也许就可以做那些自己知道的可以无脑去做的任务。\n\n还有一个感受就是，每天因为要完成OKR给自己带来的压力，有一点影响工作。有时早上起来之后想先读书，啃大部头，看到九点多十点就会嘀咕要不要去工作，会有一种无形的压力的感觉。也许可以把工作中的一个挑战放进OKR里面。\n\n有了OKR以来，生活中多了一点点压力，非常正向的压力，让我在做决策的时候随时都在想，这个对我的OKR的帮助是大还是小。我非常欣喜于这种优先级的思考给我带来的好处。\n\n总而言之，好希望有一个能够轻松顺利全部完成的OKR啊！","slug":"第四个OKR","published":1,"updated":"2020-07-16T01:04:43.225Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ckcxuqeum002nfkjxl60ide1c","content":"<h1 id=\"第四个OKR\"><a href=\"#第四个OKR\" class=\"headerlink\" title=\"第四个OKR\"></a>第四个OKR</h1><a id=\"more\"></a>\n<p>第四个OKR结束了！结果喜人。</p>\n<table>\n<thead>\n<tr>\n<th align=\"center\"></th>\n<th align=\"center\">第三个OKR</th>\n<th align=\"center\">第四个OKR</th>\n</tr>\n</thead>\n<tbody><tr>\n<td align=\"center\">总完成率* 总任务量</td>\n<td align=\"center\">20.03</td>\n<td align=\"center\">26.862</td>\n</tr>\n<tr>\n<td align=\"center\">weight3完成量</td>\n<td align=\"center\">三个100%，两个一半，一个0</td>\n<td align=\"center\">三个100%，一个一半，一个刚开始</td>\n</tr>\n<tr>\n<td align=\"center\">weight2完成量</td>\n<td align=\"center\">一个100%，两个快结束，两个刚开始一个0</td>\n<td align=\"center\">三个100%，四个快结束</td>\n</tr>\n<tr>\n<td align=\"center\">weight1完成量</td>\n<td align=\"center\">一个100%，一个快结束，一个刚开始</td>\n<td align=\"center\">两个100%，一个快结束，一个刚开始</td>\n</tr>\n</tbody></table>\n<p>有些课程比想象中进度要缓慢不少，比如正在学习的go的这门课程，55节课，每节课10分钟以内，看起来非常轻松，也就加起来十个小时的事儿。可是学下来才发现并不是这样，跟着写代码，理解代码，理解课程背后的一些内容，这些都很花时间，算下来其实远不止十个小时。再加上战线比较长，学了几节课之后会有疲惫感。</p>\n<p>这个OKR的读书任务比较重，所以完成程度比较差，每一章的内容长度比堪比之前的两章甚至还多，所以刚读起来就心里有了压力。再加上APUE这本书非常难啃，幸运的是我找到了一个非常好的讲解视频，跟这它看会让阅读轻松非常多，同时这也意味着花在上面的时间更多了（因为要加上视频和代码练习）。之后希望能够先看下篇幅，再去定任务，如果一章很长的话，那就读少一点。</p>\n<p>因为堆积的to read list太长，我这一两周都没有去阅读新的email或者别的信息源，目的是想把积压的文章读完。结果是文章也没读，新的文章也完全没有加进来。有的文章很短，有的文章很长，有时也让人动力不高。</p>\n<p>有一个想法是，在OKR开始的时候，不如每一个任务都试着做一做，知道大概是什么样的，心里有一个大概的认知，任务量大不大，多久能做完。这样在比如效率不高的时候，也许就可以做那些自己知道的可以无脑去做的任务。</p>\n<p>还有一个感受就是，每天因为要完成OKR给自己带来的压力，有一点影响工作。有时早上起来之后想先读书，啃大部头，看到九点多十点就会嘀咕要不要去工作，会有一种无形的压力的感觉。也许可以把工作中的一个挑战放进OKR里面。</p>\n<p>有了OKR以来，生活中多了一点点压力，非常正向的压力，让我在做决策的时候随时都在想，这个对我的OKR的帮助是大还是小。我非常欣喜于这种优先级的思考给我带来的好处。</p>\n<p>总而言之，好希望有一个能够轻松顺利全部完成的OKR啊！</p>\n","site":{"data":{"next":{"override":false,"favicon":{"small":"/uploads/favicon-16x16.png","medium":"/uploads/favicon-32x32.png","apple_touch_icon":"/uploads/apple-touch-icon.png","safari_pinned_tab":"/uploads/favicon.png","ms_browserconfig":"/uploads/browserconfig.xml"},"keywords":"Hexo, NexT","rss":null,"footer":{"icon":"user","copyright":null,"powered":true,"theme":{"enable":true,"version":true}},"canonical":true,"seo":false,"index_with_subtitle":false,"menu":{"home":"/ || home","archives":"/archives/ || archive"},"menu_icons":{"enable":true},"scheme":"Pisces","social_icons":{"enable":true,"icons_only":false,"transition":false},"links_icon":"link","links_title":"Links","links_layout":"block","toc":{"enable":true,"number":true,"wrap":false},"sidebar":{"position":"left","display":"post","offset":12,"b2t":false,"scrollpercent":false,"onmobile":false},"scroll_to_more":true,"save_scroll":false,"excerpt_description":true,"auto_excerpt":{"enable":false,"length":30},"read_more_btn":true,"post_meta":{"item_text":true,"created_at":true,"updated_at":false,"categories":true},"post_wordcount":{"item_text":true,"wordcount":false,"min2read":false,"totalcount":false,"separated_meta":true},"post_copyright":{"enable":false,"license":"CC BY-NC-SA 3.0","license_url":"https://creativecommons.org/licenses/by-nc-sa/3.0/"},"mobile_layout_economy":false,"android_chrome_color":"#222","custom_logo":{"enabled":false,"image":null},"marked":{"smartypants":false},"highlight_theme":"normal","font":{"enable":false,"host":null,"global":{"external":true,"family":"Lato","size":null},"headings":{"external":true,"family":null,"size":null},"posts":{"external":true,"family":null},"logo":{"external":true,"family":null,"size":null},"codes":{"external":true,"family":null,"size":null}},"mathjax":{"enable":false,"per_page":false,"cdn":"//cdn.bootcss.com/mathjax/2.7.1/latest.js?config=TeX-AMS-MML_HTMLorMML"},"han":false,"disqus":{"enable":false,"shortname":null,"count":true},"changyan":{"enable":false,"appid":null,"appkey":null},"valine":{"enable":false,"appid":null,"appkey":null,"notify":false,"verify":false,"placeholder":"Just go go","avatar":"mm","guest_info":"nick,mail,link","pageSize":10},"gitment":{"enable":false,"mint":true,"count":true,"lazy":false,"cleanly":false,"language":null,"github_user":null,"github_repo":null,"client_id":null,"client_secret":null,"proxy_gateway":null,"redirect_protocol":null},"needmoreshare2":{"enable":false,"postbottom":{"enable":false,"options":{"iconStyle":"box","boxForm":"horizontal","position":"bottomCenter","networks":"Weibo,Wechat,Douban,QQZone,Twitter,Facebook"}},"float":{"enable":false,"options":{"iconStyle":"box","boxForm":"horizontal","position":"middleRight","networks":"Weibo,Wechat,Douban,QQZone,Twitter,Facebook"}}},"duoshuo_info":{"ua_enable":true,"admin_enable":false,"user_id":0},"facebook_sdk":{"enable":false,"app_id":null,"fb_admin":null,"like_button":null,"webmaster":null},"facebook_comments_plugin":{"enable":false,"num_of_posts":10,"width":"100%","scheme":"light"},"vkontakte_api":{"enable":false,"app_id":null,"like":true,"comments":true,"num_of_posts":10},"rating":{"enable":false,"id":null,"color":"fc6423"},"leancloud_visitors":{"enable":false,"app_id":null,"app_key":null},"firestore":{"enable":false,"collection":"articles","apiKey":null,"projectId":null,"bluebird":false},"busuanzi_count":{"enable":false,"site_uv":true,"site_uv_header":"<i class=\"fa fa-user\"></i>","site_uv_footer":null,"site_pv":true,"site_pv_header":"<i class=\"fa fa-eye\"></i>","site_pv_footer":null,"page_pv":true,"page_pv_header":"<i class=\"fa fa-file-o\"></i>","page_pv_footer":null},"baidu_push":false,"calendar":{"enable":false,"calendar_id":"<required>","api_key":"<required>","orderBy":"startTime","offsetMax":24,"offsetMin":4,"timeZone":null,"showDeleted":false,"singleEvents":true,"maxResults":250},"algolia_search":{"enable":false,"hits":{"per_page":10},"labels":{"input_placeholder":"Search for Posts","hits_empty":"We didn't find any results for the search: ${query}","hits_stats":"${hits} results found in ${time} ms"}},"local_search":{"enable":false,"trigger":"auto","top_n_per_article":1},"exturl":false,"note":{"style":"simple","icons":false,"border_radius":3,"light_bg_offset":0},"label":true,"tabs":{"enable":true,"transition":{"tabs":false,"labels":true},"border_radius":0},"motion":{"enable":true,"async":false,"transition":{"post_block":"fadeIn","post_header":"slideDownIn","post_body":"slideDownIn","coll_header":"slideLeftIn","sidebar":"slideUpIn"}},"fancybox":true,"pace":false,"pace_theme":"pace-theme-minimal","canvas_nest":false,"three_waves":false,"canvas_lines":false,"canvas_sphere":false,"canvas_ribbon":{"enable":false,"size":300,"alpha":0.6,"zIndex":-1},"vendors":{"_internal":"lib","jquery":null,"fancybox":null,"fancybox_css":null,"fastclick":null,"lazyload":null,"velocity":null,"velocity_ui":null,"ua_parser":null,"fontawesome":null,"algolia_instant_js":null,"algolia_instant_css":null,"pace":null,"pace_css":null,"canvas_nest":null,"three":null,"three_waves":null,"canvas_lines":null,"canvas_sphere":null,"canvas_ribbon":null,"han":null,"needMoreShare2":null},"css":"css","js":"js","images":"images","version":"5.1.4"}}},"excerpt":"<h1 id=\"第四个OKR\"><a href=\"#第四个OKR\" class=\"headerlink\" title=\"第四个OKR\"></a>第四个OKR</h1>","more":"<p>第四个OKR结束了！结果喜人。</p>\n<table>\n<thead>\n<tr>\n<th align=\"center\"></th>\n<th align=\"center\">第三个OKR</th>\n<th align=\"center\">第四个OKR</th>\n</tr>\n</thead>\n<tbody><tr>\n<td align=\"center\">总完成率* 总任务量</td>\n<td align=\"center\">20.03</td>\n<td align=\"center\">26.862</td>\n</tr>\n<tr>\n<td align=\"center\">weight3完成量</td>\n<td align=\"center\">三个100%，两个一半，一个0</td>\n<td align=\"center\">三个100%，一个一半，一个刚开始</td>\n</tr>\n<tr>\n<td align=\"center\">weight2完成量</td>\n<td align=\"center\">一个100%，两个快结束，两个刚开始一个0</td>\n<td align=\"center\">三个100%，四个快结束</td>\n</tr>\n<tr>\n<td align=\"center\">weight1完成量</td>\n<td align=\"center\">一个100%，一个快结束，一个刚开始</td>\n<td align=\"center\">两个100%，一个快结束，一个刚开始</td>\n</tr>\n</tbody></table>\n<p>有些课程比想象中进度要缓慢不少，比如正在学习的go的这门课程，55节课，每节课10分钟以内，看起来非常轻松，也就加起来十个小时的事儿。可是学下来才发现并不是这样，跟着写代码，理解代码，理解课程背后的一些内容，这些都很花时间，算下来其实远不止十个小时。再加上战线比较长，学了几节课之后会有疲惫感。</p>\n<p>这个OKR的读书任务比较重，所以完成程度比较差，每一章的内容长度比堪比之前的两章甚至还多，所以刚读起来就心里有了压力。再加上APUE这本书非常难啃，幸运的是我找到了一个非常好的讲解视频，跟这它看会让阅读轻松非常多，同时这也意味着花在上面的时间更多了（因为要加上视频和代码练习）。之后希望能够先看下篇幅，再去定任务，如果一章很长的话，那就读少一点。</p>\n<p>因为堆积的to read list太长，我这一两周都没有去阅读新的email或者别的信息源，目的是想把积压的文章读完。结果是文章也没读，新的文章也完全没有加进来。有的文章很短，有的文章很长，有时也让人动力不高。</p>\n<p>有一个想法是，在OKR开始的时候，不如每一个任务都试着做一做，知道大概是什么样的，心里有一个大概的认知，任务量大不大，多久能做完。这样在比如效率不高的时候，也许就可以做那些自己知道的可以无脑去做的任务。</p>\n<p>还有一个感受就是，每天因为要完成OKR给自己带来的压力，有一点影响工作。有时早上起来之后想先读书，啃大部头，看到九点多十点就会嘀咕要不要去工作，会有一种无形的压力的感觉。也许可以把工作中的一个挑战放进OKR里面。</p>\n<p>有了OKR以来，生活中多了一点点压力，非常正向的压力，让我在做决策的时候随时都在想，这个对我的OKR的帮助是大还是小。我非常欣喜于这种优先级的思考给我带来的好处。</p>\n<p>总而言之，好希望有一个能够轻松顺利全部完成的OKR啊！</p>"}],"PostAsset":[{"_id":"source/_posts/Advanced-Programming-in-Unix-Chapter-3/buffer_size_comparison.png","slug":"buffer_size_comparison.png","post":"ckcxuqelc0007fkjxujztm5rg","modified":1,"renderable":0},{"_id":"source/_posts/Cryptography-notes/image-20200708153106778.png","slug":"image-20200708153106778.png","post":"ckcxuqelt0009fkjxsczs9c01","modified":1,"renderable":0},{"_id":"source/_posts/Cryptography-notes/image-20200708113856166.png","slug":"image-20200708113856166.png","post":"ckcxuqelt0009fkjxsczs9c01","modified":1,"renderable":0},{"_id":"source/_posts/Cryptography-notes/image-20200708110748416.png","slug":"image-20200708110748416.png","post":"ckcxuqelt0009fkjxsczs9c01","modified":1,"renderable":0},{"_id":"source/_posts/Netty-in-Action-Chapter-1-1/java_bloking_IO.png","slug":"java_bloking_IO.png","post":"ckcxuqenq000rfkjxa79jep9q","modified":1,"renderable":0},{"_id":"source/_posts/Netty-in-Action-Chapter-9/embedded_channel_workflow.png","post":"ckcxuqere001cfkjx2lvr1ag9","slug":"embedded_channel_workflow.png","modified":1,"renderable":1},{"_id":"source/_posts/Technology-Sharing-May-2020/pyramid.png","post":"ckcxuqerv001jfkjxm5h5v4jj","slug":"pyramid.png","modified":1,"renderable":1},{"_id":"source/_posts/从零开始学架构-笔记01/4+1.jpg","post":"ckcxuqetj0024fkjxbt02tuk6","slug":"4+1.jpg","modified":1,"renderable":1},{"_id":"source/_posts/Netty-in-Action-Chapter-7/eventloop_allocation.png","post":"ckcxuqepq0015fkjx9r541hig","slug":"eventloop_allocation.png","modified":1,"renderable":1},{"_id":"source/_posts/Netty-in-Action-Chapter-7/executor_logic.png","post":"ckcxuqepq0015fkjx9r541hig","slug":"executor_logic.png","modified":1,"renderable":1},{"_id":"source/_posts/Netty-in-Action-Chapter-5/bytebuf.png","post":"ckcxuqeq60018fkjx7u3b8nvo","slug":"bytebuf.png","modified":1,"renderable":1},{"_id":"source/_posts/Netty-in-Action-Chapter-5/bytebuf_internal_segmentation.png","post":"ckcxuqeq60018fkjx7u3b8nvo","slug":"bytebuf_internal_segmentation.png","modified":1,"renderable":1},{"_id":"source/_posts/Netty-in-Action-Chapter-8/bootstrapping_process.png","post":"ckcxuqer0001afkjxyzxex5p2","slug":"bootstrapping_process.png","modified":1,"renderable":1},{"_id":"source/_posts/Netty-in-Action-Chapter-8/eventLoop_shared_among_channels.png","post":"ckcxuqer0001afkjxyzxex5p2","slug":"eventLoop_shared_among_channels.png","modified":1,"renderable":1},{"_id":"source/_posts/Advanced-Programming-in-Unix-Chapter-1/common_shell.png","post":"ckcxuqekf0001fkjxqzebspmq","slug":"common_shell.png","modified":1,"renderable":1},{"_id":"source/_posts/Advanced-Programming-in-Unix-Chapter-1/systemCallAndLibraryCall.png","post":"ckcxuqekf0001fkjxqzebspmq","slug":"systemCallAndLibraryCall.png","modified":1,"renderable":1},{"_id":"source/_posts/Advanced-Programming-in-Unix-Chapter-1/unix_architecture.png","post":"ckcxuqekf0001fkjxqzebspmq","slug":"unix_architecture.png","modified":1,"renderable":1},{"_id":"source/_posts/Netty-in-Action-Chapter-3/channelPipeline.png","post":"ckcxuqeo7000wfkjxozygayxi","slug":"channelPipeline.png","modified":1,"renderable":1},{"_id":"source/_posts/Netty-in-Action-Chapter-3/channel_eventLoop.png","post":"ckcxuqeo7000wfkjxozygayxi","slug":"channel_eventLoop.png","modified":1,"renderable":1},{"_id":"source/_posts/Netty-in-Action-Chapter-3/eventLoopGroup.png","post":"ckcxuqeo7000wfkjxozygayxi","slug":"eventLoopGroup.png","modified":1,"renderable":1},{"_id":"source/_posts/Netty-in-Action-Chapter-4/OIO_processing_logic.png","post":"ckcxuqeok000zfkjx6kzwh53m","slug":"OIO_processing_logic.png","modified":1,"renderable":1},{"_id":"source/_posts/Netty-in-Action-Chapter-4/netty_provided_transports.png","post":"ckcxuqeok000zfkjx6kzwh53m","slug":"netty_provided_transports.png","modified":1,"renderable":1},{"_id":"source/_posts/Netty-in-Action-Chapter-4/selector_workflow.png","post":"ckcxuqeok000zfkjx6kzwh53m","slug":"selector_workflow.png","modified":1,"renderable":1},{"_id":"source/_posts/Advanced-Programming-in-Unix-Chapter-3/kernel_data_structure_after_dup.png","post":"ckcxuqelc0007fkjxujztm5rg","slug":"kernel_data_structure_after_dup.png","modified":1,"renderable":1},{"_id":"source/_posts/Advanced-Programming-in-Unix-Chapter-3/kernel_data_structure_for_open_files.png","post":"ckcxuqelc0007fkjxujztm5rg","slug":"kernel_data_structure_for_open_files.png","modified":1,"renderable":1},{"_id":"source/_posts/Advanced-Programming-in-Unix-Chapter-3/two_processes_one_file.png","post":"ckcxuqelc0007fkjxujztm5rg","slug":"two_processes_one_file.png","modified":1,"renderable":1},{"_id":"source/_posts/Spring-security-notes/image-20200703140104398.png","post":"ckcxuqero001gfkjxtsjph8yd","slug":"image-20200703140104398.png","modified":1,"renderable":1},{"_id":"source/_posts/Spring-security-notes/image-20200705115002217.png","post":"ckcxuqero001gfkjxtsjph8yd","slug":"image-20200705115002217.png","modified":1,"renderable":1},{"_id":"source/_posts/Spring-security-notes/image-20200705115533934.png","post":"ckcxuqero001gfkjxtsjph8yd","slug":"image-20200705115533934.png","modified":1,"renderable":1},{"_id":"source/_posts/Spring-security-notes/image-20200705122105774.png","post":"ckcxuqero001gfkjxtsjph8yd","slug":"image-20200705122105774.png","modified":1,"renderable":1},{"_id":"source/_posts/Cryptography-notes/image-20200708104031335.png","slug":"image-20200708104031335.png","post":"ckcxuqelt0009fkjxsczs9c01","modified":1,"renderable":0},{"_id":"source/_posts/Cryptography-notes/image-20200708152328368.png","slug":"image-20200708152328368.png","post":"ckcxuqelt0009fkjxsczs9c01","modified":1,"renderable":0},{"_id":"source/_posts/Netty-in-Action-Chapter-1-1/callback.png","post":"ckcxuqenq000rfkjxa79jep9q","slug":"callback.png","modified":1,"renderable":1},{"_id":"source/_posts/Netty-in-Action-Chapter-1-1/callback_with_future.png","post":"ckcxuqenq000rfkjxa79jep9q","slug":"callback_with_future.png","modified":1,"renderable":1},{"_id":"source/_posts/Netty-in-Action-Chapter-1-1/callback_with_future2.png","post":"ckcxuqenq000rfkjxa79jep9q","slug":"callback_with_future2.png","modified":1,"renderable":1},{"_id":"source/_posts/Netty-in-Action-Chapter-1-1/netty_feature_summary.png","post":"ckcxuqenq000rfkjxa79jep9q","slug":"netty_feature_summary.png","modified":1,"renderable":1},{"_id":"source/_posts/Netty-in-Action-Chapter-6/ChannelHandlerAdaptor.png","post":"ckcxuqep20012fkjx89pmw9v5","slug":"ChannelHandlerAdaptor.png","modified":1,"renderable":1},{"_id":"source/_posts/Netty-in-Action-Chapter-6/channelFutureListenerToChannelFuture.png","post":"ckcxuqep20012fkjx89pmw9v5","slug":"channelFutureListenerToChannelFuture.png","modified":1,"renderable":1},{"_id":"source/_posts/Netty-in-Action-Chapter-6/channelFutureListenerToChannelPromise.png","post":"ckcxuqep20012fkjx89pmw9v5","slug":"channelFutureListenerToChannelPromise.png","modified":1,"renderable":1},{"_id":"source/_posts/Netty-in-Action-Chapter-6/channelPipeline_channelHandlers.png","post":"ckcxuqep20012fkjx89pmw9v5","slug":"channelPipeline_channelHandlers.png","modified":1,"renderable":1},{"_id":"source/_posts/Netty-in-Action-Chapter-6/channel_state_model.png","post":"ckcxuqep20012fkjx89pmw9v5","slug":"channel_state_model.png","modified":1,"renderable":1},{"_id":"source/_posts/Netty-in-Action-Chapter-6/operationsTriggeredViaContext.png","post":"ckcxuqep20012fkjx89pmw9v5","slug":"operationsTriggeredViaContext.png","modified":1,"renderable":1}],"PostCategory":[{"post_id":"ckcxuqelt0009fkjxsczs9c01","category_id":"ckcxuqel30005fkjxer0ga28b","_id":"ckcxuqemu000hfkjxycb5l9oj"},{"post_id":"ckcxuqekf0001fkjxqzebspmq","category_id":"ckcxuqel30005fkjxer0ga28b","_id":"ckcxuqen6000mfkjxfcq8nxyw"},{"post_id":"ckcxuqem7000bfkjx9xdp3o2s","category_id":"ckcxuqel30005fkjxer0ga28b","_id":"ckcxuqenj000ofkjxb8kv0hcy"},{"post_id":"ckcxuqemk000ffkjx32j1vzcb","category_id":"ckcxuqel30005fkjxer0ga28b","_id":"ckcxuqenr000sfkjxwyppsrde"},{"post_id":"ckcxuqekv0003fkjx10rt9v9a","category_id":"ckcxuqel30005fkjxer0ga28b","_id":"ckcxuqeo0000ufkjxwx0zl28j"},{"post_id":"ckcxuqemt000gfkjx37utc8rl","category_id":"ckcxuqel30005fkjxer0ga28b","_id":"ckcxuqeo8000xfkjx37dlqp9w"},{"post_id":"ckcxuqen3000lfkjx7we61ptv","category_id":"ckcxuqel30005fkjxer0ga28b","_id":"ckcxuqeoo0010fkjxtag310e4"},{"post_id":"ckcxuqelc0007fkjxujztm5rg","category_id":"ckcxuqel30005fkjxer0ga28b","_id":"ckcxuqep60013fkjxlbxun6nh"},{"post_id":"ckcxuqeni000nfkjxqlac9601","category_id":"ckcxuqel30005fkjxer0ga28b","_id":"ckcxuqepu0016fkjxtdnnnq2i"},{"post_id":"ckcxuqenq000rfkjxa79jep9q","category_id":"ckcxuqel30005fkjxer0ga28b","_id":"ckcxuqeqb0019fkjxnczmu2pp"},{"post_id":"ckcxuqeny000tfkjxojg53n30","category_id":"ckcxuqel30005fkjxer0ga28b","_id":"ckcxuqer8001bfkjxo62d7igy"},{"post_id":"ckcxuqeo7000wfkjxozygayxi","category_id":"ckcxuqel30005fkjxer0ga28b","_id":"ckcxuqerm001dfkjx6j0c5h28"},{"post_id":"ckcxuqeok000zfkjx6kzwh53m","category_id":"ckcxuqel30005fkjxer0ga28b","_id":"ckcxuqert001hfkjxpbtestq2"},{"post_id":"ckcxuqep20012fkjx89pmw9v5","category_id":"ckcxuqel30005fkjxer0ga28b","_id":"ckcxuqerz001kfkjxbk2e7kon"},{"post_id":"ckcxuqepq0015fkjx9r541hig","category_id":"ckcxuqel30005fkjxer0ga28b","_id":"ckcxuqesa001ofkjx5hukrxcn"},{"post_id":"ckcxuqeq60018fkjx7u3b8nvo","category_id":"ckcxuqel30005fkjxer0ga28b","_id":"ckcxuqesj001rfkjxqr622r4k"},{"post_id":"ckcxuqer0001afkjxyzxex5p2","category_id":"ckcxuqel30005fkjxer0ga28b","_id":"ckcxuqesq001vfkjxnbpumj6s"},{"post_id":"ckcxuqere001cfkjx2lvr1ag9","category_id":"ckcxuqel30005fkjxer0ga28b","_id":"ckcxuqet8001yfkjxry6xnf9z"},{"post_id":"ckcxuqero001gfkjxtsjph8yd","category_id":"ckcxuqel30005fkjxer0ga28b","_id":"ckcxuqeti0022fkjxlpwvyge8"},{"post_id":"ckcxuqerv001jfkjxm5h5v4jj","category_id":"ckcxuqel30005fkjxer0ga28b","_id":"ckcxuqetm0025fkjxgfu37kus"},{"post_id":"ckcxuqes6001nfkjxkuq4epy5","category_id":"ckcxuqel30005fkjxer0ga28b","_id":"ckcxuqett002afkjxmj8xmswe"},{"post_id":"ckcxuqesd001qfkjxlg42pmpg","category_id":"ckcxuqel30005fkjxer0ga28b","_id":"ckcxuqetz002dfkjx2k3bxad0"},{"post_id":"ckcxuqesn001ufkjx00x4864m","category_id":"ckcxuqel30005fkjxer0ga28b","_id":"ckcxuqeu8002hfkjx644ubnek"},{"post_id":"ckcxuqest001xfkjx45ip2snq","category_id":"ckcxuqel30005fkjxer0ga28b","_id":"ckcxuqeuf002kfkjxfk7lk42b"},{"post_id":"ckcxuqetj0024fkjxbt02tuk6","category_id":"ckcxuqel30005fkjxer0ga28b","_id":"ckcxuqeup002ofkjxn1o7f1vf"},{"post_id":"ckcxuqetr0029fkjxx24vq9xi","category_id":"ckcxuqel30005fkjxer0ga28b","_id":"ckcxuqeus002qfkjxligjxovn"},{"post_id":"ckcxuqetw002cfkjxywie8ycf","category_id":"ckcxuqetq0027fkjxow8dtciy","_id":"ckcxuqeuv002tfkjxl37oswa7"},{"post_id":"ckcxuqetd0021fkjxgytkceje","category_id":"ckcxuqetq0027fkjxow8dtciy","_id":"ckcxuqeux002vfkjx1m9umrxv"},{"post_id":"ckcxuqeu3002gfkjx9eejxxw5","category_id":"ckcxuqetq0027fkjxow8dtciy","_id":"ckcxuqeuy002yfkjx0rg17o4q"},{"post_id":"ckcxuqeua002jfkjxza0s65wn","category_id":"ckcxuqetq0027fkjxow8dtciy","_id":"ckcxuqeuz0030fkjxmlqoc86y"},{"post_id":"ckcxuqeum002nfkjxl60ide1c","category_id":"ckcxuqetq0027fkjxow8dtciy","_id":"ckcxuqev50032fkjxtc6otidh"}],"PostTag":[{"post_id":"ckcxuqekf0001fkjxqzebspmq","tag_id":"ckcxuqela0006fkjxsa7xp7kh","_id":"ckcxuqemh000efkjxiwmjmin0"},{"post_id":"ckcxuqekv0003fkjx10rt9v9a","tag_id":"ckcxuqela0006fkjxsa7xp7kh","_id":"ckcxuqen3000kfkjxhwdwfdxt"},{"post_id":"ckcxuqelc0007fkjxujztm5rg","tag_id":"ckcxuqela0006fkjxsa7xp7kh","_id":"ckcxuqenp000qfkjx5fwfka86"},{"post_id":"ckcxuqelt0009fkjxsczs9c01","tag_id":"ckcxuqenk000pfkjxegwxdxk0","_id":"ckcxuqeo9000yfkjxr4fyowjs"},{"post_id":"ckcxuqem7000bfkjx9xdp3o2s","tag_id":"ckcxuqeo2000vfkjxjkjtka5g","_id":"ckcxuqepa0014fkjx02ugrv0m"},{"post_id":"ckcxuqemk000ffkjx32j1vzcb","tag_id":"ckcxuqep00011fkjxaqjc506q","_id":"ckcxuqern001ffkjxjifkojjp"},{"post_id":"ckcxuqemk000ffkjx32j1vzcb","tag_id":"ckcxuqeq60017fkjxbnzcglhz","_id":"ckcxuqerv001ifkjxbiudu83k"},{"post_id":"ckcxuqero001gfkjxtsjph8yd","tag_id":"ckcxuqenk000pfkjxegwxdxk0","_id":"ckcxuqes5001mfkjxnaw2bosn"},{"post_id":"ckcxuqemt000gfkjx37utc8rl","tag_id":"ckcxuqerm001efkjxhzr8kxkg","_id":"ckcxuqesc001pfkjxg6uckov2"},{"post_id":"ckcxuqerv001jfkjxm5h5v4jj","tag_id":"ckcxuqep00011fkjxaqjc506q","_id":"ckcxuqesm001tfkjxkt4erk5b"},{"post_id":"ckcxuqerv001jfkjxm5h5v4jj","tag_id":"ckcxuqeq60017fkjxbnzcglhz","_id":"ckcxuqess001wfkjxgbcir1u5"},{"post_id":"ckcxuqes6001nfkjxkuq4epy5","tag_id":"ckcxuqeo2000vfkjxjkjtka5g","_id":"ckcxuqetd0020fkjxljj2z9qx"},{"post_id":"ckcxuqesd001qfkjxlg42pmpg","tag_id":"ckcxuqeo2000vfkjxjkjtka5g","_id":"ckcxuqetj0023fkjxwxx7ln6f"},{"post_id":"ckcxuqesn001ufkjx00x4864m","tag_id":"ckcxuqeo2000vfkjxjkjtka5g","_id":"ckcxuqetq0028fkjxut92c5ua"},{"post_id":"ckcxuqen3000lfkjx7we61ptv","tag_id":"ckcxuqep00011fkjxaqjc506q","_id":"ckcxuqetv002bfkjxoqxwx5h9"},{"post_id":"ckcxuqen3000lfkjx7we61ptv","tag_id":"ckcxuqeq60017fkjxbnzcglhz","_id":"ckcxuqeu2002ffkjxerp0fu38"},{"post_id":"ckcxuqest001xfkjx45ip2snq","tag_id":"ckcxuqeo2000vfkjxjkjtka5g","_id":"ckcxuqeua002ifkjxt16hnl1k"},{"post_id":"ckcxuqetj0024fkjxbt02tuk6","tag_id":"ckcxuqeq60017fkjxbnzcglhz","_id":"ckcxuqeuj002mfkjxm7gf09jo"},{"post_id":"ckcxuqetr0029fkjxx24vq9xi","tag_id":"ckcxuqeo2000vfkjxjkjtka5g","_id":"ckcxuqeur002pfkjx8e5nin5v"},{"post_id":"ckcxuqeni000nfkjxqlac9601","tag_id":"ckcxuqep00011fkjxaqjc506q","_id":"ckcxuqeuv002sfkjx457mn1bg"},{"post_id":"ckcxuqeni000nfkjxqlac9601","tag_id":"ckcxuqeq60017fkjxbnzcglhz","_id":"ckcxuqeuw002ufkjx6hbzwo60"},{"post_id":"ckcxuqenq000rfkjxa79jep9q","tag_id":"ckcxuqerm001efkjxhzr8kxkg","_id":"ckcxuqeuy002xfkjxnftag4x5"},{"post_id":"ckcxuqenq000rfkjxa79jep9q","tag_id":"ckcxuqeug002lfkjxqmjur0jn","_id":"ckcxuqeuz002zfkjx1kawcjr1"},{"post_id":"ckcxuqeny000tfkjxojg53n30","tag_id":"ckcxuqerm001efkjxhzr8kxkg","_id":"ckcxuqev50033fkjxmgpiz1jd"},{"post_id":"ckcxuqeny000tfkjxojg53n30","tag_id":"ckcxuqeug002lfkjxqmjur0jn","_id":"ckcxuqev60034fkjxeysyd5xi"},{"post_id":"ckcxuqeo7000wfkjxozygayxi","tag_id":"ckcxuqerm001efkjxhzr8kxkg","_id":"ckcxuqeva0037fkjxoypw4boh"},{"post_id":"ckcxuqeo7000wfkjxozygayxi","tag_id":"ckcxuqeug002lfkjxqmjur0jn","_id":"ckcxuqeva0038fkjxzc5bf9tx"},{"post_id":"ckcxuqeok000zfkjx6kzwh53m","tag_id":"ckcxuqerm001efkjxhzr8kxkg","_id":"ckcxuqevf003bfkjxfohmrs4w"},{"post_id":"ckcxuqeok000zfkjx6kzwh53m","tag_id":"ckcxuqeug002lfkjxqmjur0jn","_id":"ckcxuqevf003cfkjximulxpb9"},{"post_id":"ckcxuqep20012fkjx89pmw9v5","tag_id":"ckcxuqerm001efkjxhzr8kxkg","_id":"ckcxuqevl003ffkjxnabv0sfz"},{"post_id":"ckcxuqep20012fkjx89pmw9v5","tag_id":"ckcxuqeug002lfkjxqmjur0jn","_id":"ckcxuqevm003gfkjx12gakj58"},{"post_id":"ckcxuqepq0015fkjx9r541hig","tag_id":"ckcxuqerm001efkjxhzr8kxkg","_id":"ckcxuqevo003jfkjxwisre7o8"},{"post_id":"ckcxuqepq0015fkjx9r541hig","tag_id":"ckcxuqeug002lfkjxqmjur0jn","_id":"ckcxuqevo003kfkjxt5a9wxwu"},{"post_id":"ckcxuqeq60018fkjx7u3b8nvo","tag_id":"ckcxuqerm001efkjxhzr8kxkg","_id":"ckcxuqevt003nfkjxaipn6zkq"},{"post_id":"ckcxuqeq60018fkjx7u3b8nvo","tag_id":"ckcxuqeug002lfkjxqmjur0jn","_id":"ckcxuqevu003ofkjx90uu1twg"},{"post_id":"ckcxuqer0001afkjxyzxex5p2","tag_id":"ckcxuqerm001efkjxhzr8kxkg","_id":"ckcxuqew0003rfkjxvqvdqqva"},{"post_id":"ckcxuqer0001afkjxyzxex5p2","tag_id":"ckcxuqeug002lfkjxqmjur0jn","_id":"ckcxuqew1003sfkjx5frswyzw"},{"post_id":"ckcxuqere001cfkjx2lvr1ag9","tag_id":"ckcxuqerm001efkjxhzr8kxkg","_id":"ckcxuqew6003vfkjx30mle2rv"},{"post_id":"ckcxuqere001cfkjx2lvr1ag9","tag_id":"ckcxuqeug002lfkjxqmjur0jn","_id":"ckcxuqew6003wfkjxbguf9hj9"},{"post_id":"ckcxuqetd0021fkjxgytkceje","tag_id":"ckcxuqew5003ufkjx6fr0gr50","_id":"ckcxuqew8003yfkjxucpse7wj"},{"post_id":"ckcxuqetw002cfkjxywie8ycf","tag_id":"ckcxuqew5003ufkjx6fr0gr50","_id":"ckcxuqewd0041fkjxjmwdzquu"},{"post_id":"ckcxuqetw002cfkjxywie8ycf","tag_id":"ckcxuqew8003zfkjx54t2kf1q","_id":"ckcxuqewe0042fkjxr5rb6xcg"},{"post_id":"ckcxuqeu3002gfkjx9eejxxw5","tag_id":"ckcxuqew5003ufkjx6fr0gr50","_id":"ckcxuqewi0045fkjx5i6xhemx"},{"post_id":"ckcxuqeu3002gfkjx9eejxxw5","tag_id":"ckcxuqew8003zfkjx54t2kf1q","_id":"ckcxuqewj0046fkjxzwiwwd33"},{"post_id":"ckcxuqeua002jfkjxza0s65wn","tag_id":"ckcxuqew5003ufkjx6fr0gr50","_id":"ckcxuqewn0049fkjxh4a7ojsj"},{"post_id":"ckcxuqeua002jfkjxza0s65wn","tag_id":"ckcxuqew8003zfkjx54t2kf1q","_id":"ckcxuqeww004afkjxecqe3ve8"},{"post_id":"ckcxuqeum002nfkjxl60ide1c","tag_id":"ckcxuqew5003ufkjx6fr0gr50","_id":"ckcxuqewy004cfkjxvhq8io3j"},{"post_id":"ckcxuqeum002nfkjxl60ide1c","tag_id":"ckcxuqew8003zfkjx54t2kf1q","_id":"ckcxuqewy004dfkjxnqkjozdw"}],"Tag":[{"name":"Operating System","_id":"ckcxuqela0006fkjxsa7xp7kh"},{"name":"Security","_id":"ckcxuqenk000pfkjxegwxdxk0"},{"name":"Career","_id":"ckcxuqeo2000vfkjxjkjtka5g"},{"name":"Sharing","_id":"ckcxuqep00011fkjxaqjc506q"},{"name":"Architecture","_id":"ckcxuqeq60017fkjxbnzcglhz"},{"name":"Java","_id":"ckcxuqerm001efkjxhzr8kxkg"},{"name":"Netty","_id":"ckcxuqeug002lfkjxqmjur0jn"},{"name":"Efficiency","_id":"ckcxuqew5003ufkjx6fr0gr50"},{"name":"OKR","_id":"ckcxuqew8003zfkjx54t2kf1q"}]}}